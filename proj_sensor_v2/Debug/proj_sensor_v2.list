
proj_sensor_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038fc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac8  08003ac8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ac8  08003ac8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ac8  08003ac8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08003adc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08003adc  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fc6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001808  00000000  00000000  00028002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  00029810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002a118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254ff  00000000  00000000  0002a948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009685  00000000  00000000  0004fe47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3626  00000000  00000000  000594cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013caf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c4  00000000  00000000  0013cb44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a6c 	.word	0x08003a6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003a6c 	.word	0x08003a6c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b43      	ldr	r3, [pc, #268]	; (8000958 <MX_GPIO_Init+0x124>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a42      	ldr	r2, [pc, #264]	; (8000958 <MX_GPIO_Init+0x124>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b40      	ldr	r3, [pc, #256]	; (8000958 <MX_GPIO_Init+0x124>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <MX_GPIO_Init+0x124>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a3c      	ldr	r2, [pc, #240]	; (8000958 <MX_GPIO_Init+0x124>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b3a      	ldr	r3, [pc, #232]	; (8000958 <MX_GPIO_Init+0x124>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b37      	ldr	r3, [pc, #220]	; (8000958 <MX_GPIO_Init+0x124>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a36      	ldr	r2, [pc, #216]	; (8000958 <MX_GPIO_Init+0x124>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b34      	ldr	r3, [pc, #208]	; (8000958 <MX_GPIO_Init+0x124>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	4b31      	ldr	r3, [pc, #196]	; (8000958 <MX_GPIO_Init+0x124>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a30      	ldr	r2, [pc, #192]	; (8000958 <MX_GPIO_Init+0x124>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <MX_GPIO_Init+0x124>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <MX_GPIO_Init+0x124>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a2a      	ldr	r2, [pc, #168]	; (8000958 <MX_GPIO_Init+0x124>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b28      	ldr	r3, [pc, #160]	; (8000958 <MX_GPIO_Init+0x124>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2120      	movs	r1, #32
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ca:	f001 fb4f 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2104      	movs	r1, #4
 80008d2:	4822      	ldr	r0, [pc, #136]	; (800095c <MX_GPIO_Init+0x128>)
 80008d4:	f001 fb4a 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	481c      	ldr	r0, [pc, #112]	; (8000960 <MX_GPIO_Init+0x12c>)
 80008f0:	f001 f992 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008f4:	230c      	movs	r3, #12
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000904:	2307      	movs	r3, #7
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000912:	f001 f981 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000916:	2320      	movs	r3, #32
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000930:	f001 f972 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8000934:	2304      	movs	r3, #4
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_GPIO_Init+0x128>)
 800094c:	f001 f964 	bl	8001c18 <HAL_GPIO_Init>

}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	; 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000
 800095c:	48000c00 	.word	0x48000c00
 8000960:	48000800 	.word	0x48000800

08000964 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8000968:	bf00      	nop
 800096a:	f000 f981 	bl	8000c70 <icm20948_who_am_i>
 800096e:	4603      	mov	r3, r0
 8000970:	f083 0301 	eor.w	r3, r3, #1
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d1f7      	bne.n	800096a <icm20948_init+0x6>

	icm20948_device_reset();
 800097a:	f000 f99e 	bl	8000cba <icm20948_device_reset>
	icm20948_wakeup();
 800097e:	f000 f9b3 	bl	8000ce8 <icm20948_wakeup>

	icm20948_clock_source(1);
 8000982:	2001      	movs	r0, #1
 8000984:	f000 fa2b 	bl	8000dde <icm20948_clock_source>
	icm20948_odr_align_enable();
 8000988:	f000 fa42 	bl	8000e10 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 800098c:	f000 f9c6 	bl	8000d1c <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fa46 	bl	8000e22 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8000996:	2000      	movs	r0, #0
 8000998:	f000 fa60 	bl	8000e5c <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 800099c:	2000      	movs	r0, #0
 800099e:	f000 fa7a 	bl	8000e96 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f000 fa86 	bl	8000eb4 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 80009a8:	f000 fab4 	bl	8000f14 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 80009ac:	f000 fb4e 	bl	800104c <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 80009b0:	2003      	movs	r0, #3
 80009b2:	f000 fc59 	bl	8001268 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 80009b6:	2003      	movs	r0, #3
 80009b8:	f000 fca0 	bl	80012fc <icm20948_accel_full_scale_select>
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <ak09916_init>:

void ak09916_init()
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 80009c4:	f000 f9c1 	bl	8000d4a <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 80009c8:	f000 f9d6 	bl	8000d78 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 80009cc:	2007      	movs	r0, #7
 80009ce:	f000 f9ed 	bl	8000dac <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 80009d2:	bf00      	nop
 80009d4:	f000 f95f 	bl	8000c96 <ak09916_who_am_i>
 80009d8:	4603      	mov	r3, r0
 80009da:	f083 0301 	eor.w	r3, r3, #1
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1f7      	bne.n	80009d4 <ak09916_init+0x14>

	ak09916_soft_reset();
 80009e4:	f000 f975 	bl	8000cd2 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 80009e8:	2008      	movs	r0, #8
 80009ea:	f000 fa81 	bl	8000ef0 <ak09916_operation_mode_setting>
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b084      	sub	sp, #16
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 80009fa:	2206      	movs	r2, #6
 80009fc:	2133      	movs	r1, #51	; 0x33
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 fd44 	bl	800148c <read_multiple_icm20948_reg>
 8000a04:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3301      	adds	r3, #1
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	ee07 3a90 	vmov	s15, r3
 8000a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	b21a      	sxth	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	3303      	adds	r3, #3
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b21b      	sxth	r3, r3
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b21b      	sxth	r3, r3
 8000a3e:	ee07 3a90 	vmov	s15, r3
 8000a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	3304      	adds	r3, #4
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	021b      	lsls	r3, r3, #8
 8000a54:	b21a      	sxth	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	3305      	adds	r3, #5
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b21b      	sxth	r3, r3
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	b21b      	sxth	r3, r3
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8000a80:	2206      	movs	r2, #6
 8000a82:	212d      	movs	r1, #45	; 0x2d
 8000a84:	2000      	movs	r0, #0
 8000a86:	f000 fd01 	bl	800148c <read_multiple_icm20948_reg>
 8000a8a:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	b21b      	sxth	r3, r3
 8000aa0:	ee07 3a90 	vmov	s15, r3
 8000aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	b21a      	sxth	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	3303      	adds	r3, #3
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	ee07 3a90 	vmov	s15, r3
 8000ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor; 
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	b21a      	sxth	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3305      	adds	r3, #5
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b21b      	sxth	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	ee07 3a90 	vmov	s15, r3
 8000aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <icm20948_accel_read+0x90>)
 8000af2:	edd3 7a00 	vldr	s15, [r3]
 8000af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	edc3 7a02 	vstr	s15, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000002c 	.word	0x2000002c

08000b0c <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 8000b14:	2010      	movs	r0, #16
 8000b16:	f000 fd15 	bl	8001544 <read_single_ak09916_reg>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	75fb      	strb	r3, [r7, #23]
	if(!drdy)	return false;
 8000b22:	7dfb      	ldrb	r3, [r7, #23]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d101      	bne.n	8000b2c <ak09916_mag_read+0x20>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e046      	b.n	8000bba <ak09916_mag_read+0xae>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 8000b2c:	2106      	movs	r1, #6
 8000b2e:	2011      	movs	r0, #17
 8000b30:	f000 fd4b 	bl	80015ca <read_multiple_ak09916_reg>
 8000b34:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 8000b36:	2018      	movs	r0, #24
 8000b38:	f000 fd04 	bl	8001544 <read_single_ak09916_reg>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	73fb      	strb	r3, [r7, #15]
	if(hofl)	return false;
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <ak09916_mag_read+0x42>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e035      	b.n	8000bba <ak09916_mag_read+0xae>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	3301      	adds	r3, #1
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	021b      	lsls	r3, r3, #8
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	ee07 3a90 	vmov	s15, r3
 8000b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	3303      	adds	r3, #3
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	4313      	orrs	r3, r2
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	ee07 3a90 	vmov	s15, r3
 8000b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	3305      	adds	r3, #5
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	021b      	lsls	r3, r3, #8
 8000b9c:	b21a      	sxth	r2, r3
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	ee07 3a90 	vmov	s15, r3
 8000bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	edc3 7a02 	vstr	s15, [r3, #8]

	return true;
 8000bb8:	2301      	movs	r3, #1
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	0000      	movs	r0, r0
 8000bc4:	0000      	movs	r0, r0
	...

08000bc8 <ak09916_mag_read_uT>:
	data->y /= accel_scale_factor;
	data->z /= accel_scale_factor;
}

bool ak09916_mag_read_uT(axises* data)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	axises temp;
	bool new_data = ak09916_mag_read(&temp);
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff99 	bl	8000b0c <ak09916_mag_read>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	75fb      	strb	r3, [r7, #23]
	if(!new_data)	return false;
 8000bde:	7dfb      	ldrb	r3, [r7, #23]
 8000be0:	f083 0301 	eor.w	r3, r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <ak09916_mag_read_uT+0x26>
 8000bea:	2300      	movs	r3, #0
 8000bec:	e036      	b.n	8000c5c <ak09916_mag_read_uT+0x94>

	data->x = (float)(temp.x * 0.15);
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fd77 	bl	80006e4 <__aeabi_f2d>
 8000bf6:	a31c      	add	r3, pc, #112	; (adr r3, 8000c68 <ak09916_mag_read_uT+0xa0>)
 8000bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfc:	f7ff fae4 	bl	80001c8 <__aeabi_dmul>
 8000c00:	4602      	mov	r2, r0
 8000c02:	460b      	mov	r3, r1
 8000c04:	4610      	mov	r0, r2
 8000c06:	4619      	mov	r1, r3
 8000c08:	f7ff fdc4 	bl	8000794 <__aeabi_d2f>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]
	data->y = (float)(temp.y * 0.15);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fd65 	bl	80006e4 <__aeabi_f2d>
 8000c1a:	a313      	add	r3, pc, #76	; (adr r3, 8000c68 <ak09916_mag_read_uT+0xa0>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	f7ff fad2 	bl	80001c8 <__aeabi_dmul>
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	4610      	mov	r0, r2
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f7ff fdb2 	bl	8000794 <__aeabi_d2f>
 8000c30:	4602      	mov	r2, r0
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	605a      	str	r2, [r3, #4]
	data->z = (float)(temp.z * 0.15);
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fd53 	bl	80006e4 <__aeabi_f2d>
 8000c3e:	a30a      	add	r3, pc, #40	; (adr r3, 8000c68 <ak09916_mag_read_uT+0xa0>)
 8000c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c44:	f7ff fac0 	bl	80001c8 <__aeabi_dmul>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	4610      	mov	r0, r2
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f7ff fda0 	bl	8000794 <__aeabi_d2f>
 8000c54:	4602      	mov	r2, r0
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	609a      	str	r2, [r3, #8]

	return true;
 8000c5a:	2301      	movs	r3, #1
}	
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	f3af 8000 	nop.w
 8000c68:	33333333 	.word	0x33333333
 8000c6c:	3fc33333 	.word	0x3fc33333

08000c70 <icm20948_who_am_i>:


/* Sub Functions */
bool icm20948_who_am_i()
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8000c76:	2100      	movs	r1, #0
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f000 fbb7 	bl	80013ec <read_single_icm20948_reg>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2bea      	cmp	r3, #234	; 0xea
 8000c86:	d101      	bne.n	8000c8c <icm20948_who_am_i+0x1c>
		return true;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <icm20948_who_am_i+0x1e>
	else
		return false;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f000 fc51 	bl	8001544 <read_single_ak09916_reg>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b09      	cmp	r3, #9
 8000caa:	d101      	bne.n	8000cb0 <ak09916_who_am_i+0x1a>
		return true;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <ak09916_who_am_i+0x1c>
	else
		return false;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <icm20948_device_reset>:

void icm20948_device_reset()
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8000cbe:	22c1      	movs	r2, #193	; 0xc1
 8000cc0:	2106      	movs	r1, #6
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 fbbe 	bl	8001444 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000cc8:	2064      	movs	r0, #100	; 0x64
 8000cca:	f000 fe9b 	bl	8001a04 <HAL_Delay>
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	2032      	movs	r0, #50	; 0x32
 8000cda:	f000 fc54 	bl	8001586 <write_single_ak09916_reg>
	HAL_Delay(100);
 8000cde:	2064      	movs	r0, #100	; 0x64
 8000ce0:	f000 fe90 	bl	8001a04 <HAL_Delay>
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000cee:	2106      	movs	r1, #6
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f000 fb7b 	bl	80013ec <read_single_icm20948_reg>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d00:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	461a      	mov	r2, r3
 8000d06:	2106      	movs	r1, #6
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f000 fb9b 	bl	8001444 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000d0e:	2064      	movs	r0, #100	; 0x64
 8000d10:	f000 fe78 	bl	8001a04 <HAL_Delay>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000d22:	2103      	movs	r1, #3
 8000d24:	2000      	movs	r0, #0
 8000d26:	f000 fb61 	bl	80013ec <read_single_icm20948_reg>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	2103      	movs	r1, #3
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f000 fb81 	bl	8001444 <write_single_icm20948_reg>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000d50:	2103      	movs	r1, #3
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 fb4a 	bl	80013ec <read_single_icm20948_reg>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	461a      	mov	r2, r3
 8000d68:	2103      	movs	r1, #3
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 fb6a 	bl	8001444 <write_single_icm20948_reg>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000d7e:	2103      	movs	r1, #3
 8000d80:	2000      	movs	r0, #0
 8000d82:	f000 fb33 	bl	80013ec <read_single_icm20948_reg>
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f043 0320 	orr.w	r3, r3, #32
 8000d90:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	461a      	mov	r2, r3
 8000d96:	2103      	movs	r1, #3
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f000 fb53 	bl	8001444 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000d9e:	2064      	movs	r0, #100	; 0x64
 8000da0:	f000 fe30 	bl	8001a04 <HAL_Delay>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8000db6:	2101      	movs	r1, #1
 8000db8:	2030      	movs	r0, #48	; 0x30
 8000dba:	f000 fb17 	bl	80013ec <read_single_icm20948_reg>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 8000dc2:	7bfa      	ldrb	r2, [r7, #15]
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	2101      	movs	r1, #1
 8000dd0:	2030      	movs	r0, #48	; 0x30
 8000dd2:	f000 fb37 	bl	8001444 <write_single_icm20948_reg>
}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000de8:	2106      	movs	r1, #6
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 fafe 	bl	80013ec <read_single_icm20948_reg>
 8000df0:	4603      	mov	r3, r0
 8000df2:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8000df4:	7bfa      	ldrb	r2, [r7, #15]
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	2106      	movs	r1, #6
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 fb1e 	bl	8001444 <write_single_icm20948_reg>
}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2109      	movs	r1, #9
 8000e18:	2020      	movs	r0, #32
 8000e1a:	f000 fb13 	bl	8001444 <write_single_icm20948_reg>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b084      	sub	sp, #16
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	2020      	movs	r0, #32
 8000e30:	f000 fadc 	bl	80013ec <read_single_icm20948_reg>
 8000e34:	4603      	mov	r3, r0
 8000e36:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	b25a      	sxtb	r2, r3
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	2020      	movs	r0, #32
 8000e50:	f000 faf8 	bl	8001444 <write_single_icm20948_reg>
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8000e66:	2114      	movs	r1, #20
 8000e68:	2020      	movs	r0, #32
 8000e6a:	f000 fabf 	bl	80013ec <read_single_icm20948_reg>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	b25a      	sxtb	r2, r3
 8000e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	461a      	mov	r2, r3
 8000e86:	2101      	movs	r1, #1
 8000e88:	2020      	movs	r0, #32
 8000e8a:	f000 fadb 	bl	8001444 <write_single_icm20948_reg>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2020      	movs	r0, #32
 8000ea8:	f000 facc 	bl	8001444 <write_single_icm20948_reg>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2110      	movs	r1, #16
 8000ed6:	2020      	movs	r0, #32
 8000ed8:	f000 fab4 	bl	8001444 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8000edc:	7bbb      	ldrb	r3, [r7, #14]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	2111      	movs	r1, #17
 8000ee2:	2020      	movs	r0, #32
 8000ee4:	f000 faae 	bl	8001444 <write_single_icm20948_reg>
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4619      	mov	r1, r3
 8000efe:	2031      	movs	r0, #49	; 0x31
 8000f00:	f000 fb41 	bl	8001586 <write_single_ak09916_reg>
	HAL_Delay(100);
 8000f04:	2064      	movs	r0, #100	; 0x64
 8000f06:	f000 fd7d 	bl	8001a04 <HAL_Delay>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
 8000f32:	e031      	b.n	8000f98 <icm20948_gyro_calibration+0x84>
	{
		icm20948_gyro_read(&temp);
 8000f34:	f107 0318 	add.w	r3, r7, #24
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fd5a 	bl	80009f2 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f48:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f54:	ee17 3a90 	vmov	r3, s15
 8000f58:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	ee07 3a90 	vmov	s15, r3
 8000f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f64:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f70:	ee17 3a90 	vmov	r3, s15
 8000f74:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	ee07 3a90 	vmov	s15, r3
 8000f7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f80:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f8c:	ee17 3a90 	vmov	r3, s15
 8000f90:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 100; i++)
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	3301      	adds	r3, #1
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	2b63      	cmp	r3, #99	; 0x63
 8000f9c:	ddca      	ble.n	8000f34 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4a29      	ldr	r2, [pc, #164]	; (8001048 <icm20948_gyro_calibration+0x134>)
 8000fa2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa6:	1152      	asrs	r2, r2, #5
 8000fa8:	17db      	asrs	r3, r3, #31
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 100;
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4a25      	ldr	r2, [pc, #148]	; (8001048 <icm20948_gyro_calibration+0x134>)
 8000fb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb6:	1152      	asrs	r2, r2, #5
 8000fb8:	17db      	asrs	r3, r3, #31
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 100;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	4a21      	ldr	r2, [pc, #132]	; (8001048 <icm20948_gyro_calibration+0x134>)
 8000fc2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc6:	1152      	asrs	r2, r2, #5
 8000fc8:	17db      	asrs	r3, r3, #31
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	425b      	negs	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	da00      	bge.n	8000fd8 <icm20948_gyro_calibration+0xc4>
 8000fd6:	3303      	adds	r3, #3
 8000fd8:	109b      	asrs	r3, r3, #2
 8000fda:	121b      	asrs	r3, r3, #8
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	425b      	negs	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	da00      	bge.n	8000fea <icm20948_gyro_calibration+0xd6>
 8000fe8:	3303      	adds	r3, #3
 8000fea:	109b      	asrs	r3, r3, #2
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	425b      	negs	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	da00      	bge.n	8000ffa <icm20948_gyro_calibration+0xe6>
 8000ff8:	3303      	adds	r3, #3
 8000ffa:	109b      	asrs	r3, r3, #2
 8000ffc:	121b      	asrs	r3, r3, #8
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	425b      	negs	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	da00      	bge.n	800100c <icm20948_gyro_calibration+0xf8>
 800100a:	3303      	adds	r3, #3
 800100c:	109b      	asrs	r3, r3, #2
 800100e:	b2db      	uxtb	r3, r3
 8001010:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	425b      	negs	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	da00      	bge.n	800101c <icm20948_gyro_calibration+0x108>
 800101a:	3303      	adds	r3, #3
 800101c:	109b      	asrs	r3, r3, #2
 800101e:	121b      	asrs	r3, r3, #8
 8001020:	b2db      	uxtb	r3, r3
 8001022:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	425b      	negs	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	da00      	bge.n	800102e <icm20948_gyro_calibration+0x11a>
 800102c:	3303      	adds	r3, #3
 800102e:	109b      	asrs	r3, r3, #2
 8001030:	b2db      	uxtb	r3, r3
 8001032:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8001034:	1d3a      	adds	r2, r7, #4
 8001036:	2306      	movs	r3, #6
 8001038:	2103      	movs	r1, #3
 800103a:	2020      	movs	r0, #32
 800103c:	f000 fa56 	bl	80014ec <write_multiple_icm20948_reg>
}
 8001040:	bf00      	nop
 8001042:	3728      	adds	r7, #40	; 0x28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	51eb851f 	.word	0x51eb851f

0800104c <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b090      	sub	sp, #64	; 0x40
 8001050:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 8001052:	f107 0318 	add.w	r3, r7, #24
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	2300      	movs	r3, #0
 8001070:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8001072:	2300      	movs	r3, #0
 8001074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001076:	e031      	b.n	80010dc <icm20948_accel_calibration+0x90>
	{
		icm20948_accel_read(&temp);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fcfb 	bl	8000a78 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800108c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001098:	ee17 3a90 	vmov	r3, s15
 800109c:	61bb      	str	r3, [r7, #24]
		accel_bias[1] += temp.y;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b4:	ee17 3a90 	vmov	r3, s15
 80010b8:	61fb      	str	r3, [r7, #28]
		accel_bias[2] += temp.z;
 80010ba:	6a3b      	ldr	r3, [r7, #32]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d0:	ee17 3a90 	vmov	r3, s15
 80010d4:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 100; i++)
 80010d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010d8:	3301      	adds	r3, #1
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010de:	2b63      	cmp	r3, #99	; 0x63
 80010e0:	ddca      	ble.n	8001078 <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4a5e      	ldr	r2, [pc, #376]	; (8001260 <icm20948_accel_calibration+0x214>)
 80010e6:	fb82 1203 	smull	r1, r2, r2, r3
 80010ea:	1152      	asrs	r2, r2, #5
 80010ec:	17db      	asrs	r3, r3, #31
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	61bb      	str	r3, [r7, #24]
	accel_bias[1] /= 100;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	4a5a      	ldr	r2, [pc, #360]	; (8001260 <icm20948_accel_calibration+0x214>)
 80010f6:	fb82 1203 	smull	r1, r2, r2, r3
 80010fa:	1152      	asrs	r2, r2, #5
 80010fc:	17db      	asrs	r3, r3, #31
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	61fb      	str	r3, [r7, #28]
	accel_bias[2] /= 100;
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	4a56      	ldr	r2, [pc, #344]	; (8001260 <icm20948_accel_calibration+0x214>)
 8001106:	fb82 1203 	smull	r1, r2, r2, r3
 800110a:	1152      	asrs	r2, r2, #5
 800110c:	17db      	asrs	r3, r3, #31
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	623b      	str	r3, [r7, #32]

	uint8_t mask_bit[3] = {0, 0, 0};
 8001112:	4a54      	ldr	r2, [pc, #336]	; (8001264 <icm20948_accel_calibration+0x218>)
 8001114:	463b      	mov	r3, r7
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	4611      	mov	r1, r2
 800111a:	8019      	strh	r1, [r3, #0]
 800111c:	3302      	adds	r3, #2
 800111e:	0c12      	lsrs	r2, r2, #16
 8001120:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8001122:	2202      	movs	r2, #2
 8001124:	2114      	movs	r1, #20
 8001126:	2010      	movs	r0, #16
 8001128:	f000 f9b0 	bl	800148c <read_multiple_icm20948_reg>
 800112c:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 800112e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001136:	3201      	adds	r2, #1
 8001138:	7812      	ldrb	r2, [r2, #0]
 800113a:	4313      	orrs	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
	mask_bit[0] = temp2[1] & 0x01;
 800113e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001140:	3301      	adds	r3, #1
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	703b      	strb	r3, [r7, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 800114c:	2202      	movs	r2, #2
 800114e:	2117      	movs	r1, #23
 8001150:	2010      	movs	r0, #16
 8001152:	f000 f99b 	bl	800148c <read_multiple_icm20948_reg>
 8001156:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8001158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001160:	3201      	adds	r2, #1
 8001162:	7812      	ldrb	r2, [r2, #0]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
	mask_bit[1] = temp3[1] & 0x01;
 8001168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800116a:	3301      	adds	r3, #1
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	707b      	strb	r3, [r7, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8001176:	2202      	movs	r2, #2
 8001178:	211a      	movs	r1, #26
 800117a:	2010      	movs	r0, #16
 800117c:	f000 f986 	bl	800148c <read_multiple_icm20948_reg>
 8001180:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8001182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800118a:	3201      	adds	r2, #1
 800118c:	7812      	ldrb	r2, [r2, #0]
 800118e:	4313      	orrs	r3, r2
 8001190:	617b      	str	r3, [r7, #20]
	mask_bit[2] = temp4[1] & 0x01;
 8001192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001194:	3301      	adds	r3, #1
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	70bb      	strb	r3, [r7, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	da00      	bge.n	80011aa <icm20948_accel_calibration+0x15e>
 80011a8:	3307      	adds	r3, #7
 80011aa:	10db      	asrs	r3, r3, #3
 80011ac:	425b      	negs	r3, r3
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	da00      	bge.n	80011bc <icm20948_accel_calibration+0x170>
 80011ba:	3307      	adds	r3, #7
 80011bc:	10db      	asrs	r3, r3, #3
 80011be:	425b      	negs	r3, r3
 80011c0:	4413      	add	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da00      	bge.n	80011ce <icm20948_accel_calibration+0x182>
 80011cc:	3307      	adds	r3, #7
 80011ce:	10db      	asrs	r3, r3, #3
 80011d0:	425b      	negs	r3, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	617b      	str	r3, [r7, #20]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	121b      	asrs	r3, r3, #8
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	713b      	strb	r3, [r7, #4]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	f023 0301 	bic.w	r3, r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	717b      	strb	r3, [r7, #5]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 80011ea:	797a      	ldrb	r2, [r7, #5]
 80011ec:	783b      	ldrb	r3, [r7, #0]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	717b      	strb	r3, [r7, #5]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	121b      	asrs	r3, r3, #8
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	71bb      	strb	r3, [r7, #6]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	71fb      	strb	r3, [r7, #7]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8001208:	79fa      	ldrb	r2, [r7, #7]
 800120a:	787b      	ldrb	r3, [r7, #1]
 800120c:	4313      	orrs	r3, r2
 800120e:	b2db      	uxtb	r3, r3
 8001210:	71fb      	strb	r3, [r7, #7]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	121b      	asrs	r3, r3, #8
 8001216:	b2db      	uxtb	r3, r3
 8001218:	723b      	strb	r3, [r7, #8]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f023 0301 	bic.w	r3, r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	727b      	strb	r3, [r7, #9]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8001226:	7a7a      	ldrb	r2, [r7, #9]
 8001228:	78bb      	ldrb	r3, [r7, #2]
 800122a:	4313      	orrs	r3, r2
 800122c:	b2db      	uxtb	r3, r3
 800122e:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 8001230:	1d3a      	adds	r2, r7, #4
 8001232:	2302      	movs	r3, #2
 8001234:	2114      	movs	r1, #20
 8001236:	2010      	movs	r0, #16
 8001238:	f000 f958 	bl	80014ec <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	1c9a      	adds	r2, r3, #2
 8001240:	2302      	movs	r3, #2
 8001242:	2117      	movs	r1, #23
 8001244:	2010      	movs	r0, #16
 8001246:	f000 f951 	bl	80014ec <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	1d1a      	adds	r2, r3, #4
 800124e:	2302      	movs	r3, #2
 8001250:	211a      	movs	r1, #26
 8001252:	2010      	movs	r0, #16
 8001254:	f000 f94a 	bl	80014ec <write_multiple_icm20948_reg>
}
 8001258:	bf00      	nop
 800125a:	3740      	adds	r7, #64	; 0x40
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	51eb851f 	.word	0x51eb851f
 8001264:	08003a84 	.word	0x08003a84

08001268 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001272:	2101      	movs	r1, #1
 8001274:	2020      	movs	r0, #32
 8001276:	f000 f8b9 	bl	80013ec <read_single_icm20948_reg>
 800127a:	4603      	mov	r3, r0
 800127c:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b03      	cmp	r3, #3
 8001282:	d827      	bhi.n	80012d4 <icm20948_gyro_full_scale_select+0x6c>
 8001284:	a201      	add	r2, pc, #4	; (adr r2, 800128c <icm20948_gyro_full_scale_select+0x24>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	0800129d 	.word	0x0800129d
 8001290:	080012a5 	.word	0x080012a5
 8001294:	080012b5 	.word	0x080012b5
 8001298:	080012c5 	.word	0x080012c5
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <icm20948_gyro_full_scale_select+0x80>)
 800129e:	4a13      	ldr	r2, [pc, #76]	; (80012ec <icm20948_gyro_full_scale_select+0x84>)
 80012a0:	601a      	str	r2, [r3, #0]
			break;
 80012a2:	e017      	b.n	80012d4 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <icm20948_gyro_full_scale_select+0x80>)
 80012ae:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <icm20948_gyro_full_scale_select+0x88>)
 80012b0:	601a      	str	r2, [r3, #0]
			break;
 80012b2:	e00f      	b.n	80012d4 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <icm20948_gyro_full_scale_select+0x80>)
 80012be:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <icm20948_gyro_full_scale_select+0x8c>)
 80012c0:	601a      	str	r2, [r3, #0]
			break;
 80012c2:	e007      	b.n	80012d4 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	f043 0306 	orr.w	r3, r3, #6
 80012ca:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <icm20948_gyro_full_scale_select+0x80>)
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <icm20948_gyro_full_scale_select+0x90>)
 80012d0:	601a      	str	r2, [r3, #0]
			break;
 80012d2:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	461a      	mov	r2, r3
 80012d8:	2101      	movs	r1, #1
 80012da:	2020      	movs	r0, #32
 80012dc:	f000 f8b2 	bl	8001444 <write_single_icm20948_reg>
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000028 	.word	0x20000028
 80012ec:	43030000 	.word	0x43030000
 80012f0:	42830000 	.word	0x42830000
 80012f4:	42033333 	.word	0x42033333
 80012f8:	41833333 	.word	0x41833333

080012fc <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8001306:	2114      	movs	r1, #20
 8001308:	2020      	movs	r0, #32
 800130a:	f000 f86f 	bl	80013ec <read_single_icm20948_reg>
 800130e:	4603      	mov	r3, r0
 8001310:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b03      	cmp	r3, #3
 8001316:	d82b      	bhi.n	8001370 <icm20948_accel_full_scale_select+0x74>
 8001318:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <icm20948_accel_full_scale_select+0x24>)
 800131a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131e:	bf00      	nop
 8001320:	08001331 	.word	0x08001331
 8001324:	0800133b 	.word	0x0800133b
 8001328:	0800134d 	.word	0x0800134d
 800132c:	0800135f 	.word	0x0800135f
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <icm20948_accel_full_scale_select+0x88>)
 8001332:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001336:	601a      	str	r2, [r3, #0]
			break;
 8001338:	e01a      	b.n	8001370 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <icm20948_accel_full_scale_select+0x88>)
 8001344:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001348:	601a      	str	r2, [r3, #0]
			break;
 800134a:	e011      	b.n	8001370 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <icm20948_accel_full_scale_select+0x88>)
 8001356:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800135a:	601a      	str	r2, [r3, #0]
			break;
 800135c:	e008      	b.n	8001370 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	f043 0306 	orr.w	r3, r3, #6
 8001364:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <icm20948_accel_full_scale_select+0x88>)
 8001368:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800136c:	601a      	str	r2, [r3, #0]
			break;
 800136e:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	461a      	mov	r2, r3
 8001374:	2114      	movs	r1, #20
 8001376:	2020      	movs	r0, #32
 8001378:	f000 f864 	bl	8001444 <write_single_icm20948_reg>
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000002c 	.word	0x2000002c

08001388 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 800138c:	2201      	movs	r2, #1
 800138e:	2104      	movs	r1, #4
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <cs_high+0x14>)
 8001392:	f000 fdeb 	bl	8001f6c <HAL_GPIO_WritePin>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	48000c00 	.word	0x48000c00

080013a0 <cs_low>:

static void cs_low()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2104      	movs	r1, #4
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <cs_low+0x14>)
 80013aa:	f000 fddf 	bl	8001f6c <HAL_GPIO_WritePin>
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	48000c00 	.word	0x48000c00

080013b8 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 80013c2:	237f      	movs	r3, #127	; 0x7f
 80013c4:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	737b      	strb	r3, [r7, #13]

	cs_low();
 80013ca:	f7ff ffe9 	bl	80013a0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 80013ce:	f107 010c 	add.w	r1, r7, #12
 80013d2:	230a      	movs	r3, #10
 80013d4:	2202      	movs	r2, #2
 80013d6:	4804      	ldr	r0, [pc, #16]	; (80013e8 <select_user_bank+0x30>)
 80013d8:	f001 fcaf 	bl	8002d3a <HAL_SPI_Transmit>
	cs_high();
 80013dc:	f7ff ffd4 	bl	8001388 <cs_high>
}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000044 	.word	0x20000044

080013ec <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001402:	b2db      	uxtb	r3, r3
 8001404:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ffd5 	bl	80013b8 <select_user_bank>

	cs_low();
 800140e:	f7ff ffc7 	bl	80013a0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001412:	f107 010f 	add.w	r1, r7, #15
 8001416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141a:	2201      	movs	r2, #1
 800141c:	4808      	ldr	r0, [pc, #32]	; (8001440 <read_single_icm20948_reg+0x54>)
 800141e:	f001 fc8c 	bl	8002d3a <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8001422:	f107 010e 	add.w	r1, r7, #14
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	2201      	movs	r2, #1
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <read_single_icm20948_reg+0x54>)
 800142e:	f001 fdf2 	bl	8003016 <HAL_SPI_Receive>
	cs_high();
 8001432:	f7ff ffa9 	bl	8001388 <cs_high>

	return reg_val;
 8001436:	7bbb      	ldrb	r3, [r7, #14]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000044 	.word	0x20000044

08001444 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	460b      	mov	r3, r1
 8001450:	71bb      	strb	r3, [r7, #6]
 8001452:	4613      	mov	r3, r2
 8001454:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ffa9 	bl	80013b8 <select_user_bank>

	cs_low();
 8001466:	f7ff ff9b 	bl	80013a0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 800146a:	f107 010c 	add.w	r1, r7, #12
 800146e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001472:	2202      	movs	r2, #2
 8001474:	4804      	ldr	r0, [pc, #16]	; (8001488 <write_single_icm20948_reg+0x44>)
 8001476:	f001 fc60 	bl	8002d3a <HAL_SPI_Transmit>
	cs_high();
 800147a:	f7ff ff85 	bl	8001388 <cs_high>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000044 	.word	0x20000044

0800148c <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	460b      	mov	r3, r1
 8001498:	71bb      	strb	r3, [r7, #6]
 800149a:	4613      	mov	r3, r2
 800149c:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff84 	bl	80013b8 <select_user_bank>

	cs_low();
 80014b0:	f7ff ff76 	bl	80013a0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80014b4:	f107 010f 	add.w	r1, r7, #15
 80014b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014bc:	2201      	movs	r2, #1
 80014be:	4809      	ldr	r0, [pc, #36]	; (80014e4 <read_multiple_icm20948_reg+0x58>)
 80014c0:	f001 fc3b 	bl	8002d3a <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 80014c4:	797b      	ldrb	r3, [r7, #5]
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014cc:	4906      	ldr	r1, [pc, #24]	; (80014e8 <read_multiple_icm20948_reg+0x5c>)
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <read_multiple_icm20948_reg+0x58>)
 80014d0:	f001 fda1 	bl	8003016 <HAL_SPI_Receive>
	cs_high();
 80014d4:	f7ff ff58 	bl	8001388 <cs_high>

	return reg_val;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <read_multiple_icm20948_reg+0x5c>)
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000044 	.word	0x20000044
 80014e8:	20000030 	.word	0x20000030

080014ec <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	603a      	str	r2, [r7, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
 80014fa:	460b      	mov	r3, r1
 80014fc:	71bb      	strb	r3, [r7, #6]
 80014fe:	4613      	mov	r3, r2
 8001500:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 8001502:	79bb      	ldrb	r3, [r7, #6]
 8001504:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff55 	bl	80013b8 <select_user_bank>

	cs_low();
 800150e:	f7ff ff47 	bl	80013a0 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8001512:	f107 010f 	add.w	r1, r7, #15
 8001516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151a:	2201      	movs	r2, #1
 800151c:	4808      	ldr	r0, [pc, #32]	; (8001540 <write_multiple_icm20948_reg+0x54>)
 800151e:	f001 fc0c 	bl	8002d3a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8001522:	797b      	ldrb	r3, [r7, #5]
 8001524:	b29a      	uxth	r2, r3
 8001526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152a:	6839      	ldr	r1, [r7, #0]
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <write_multiple_icm20948_reg+0x54>)
 800152e:	f001 fc04 	bl	8002d3a <HAL_SPI_Transmit>
	cs_high();
 8001532:	f7ff ff29 	bl	8001388 <cs_high>
}
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000044 	.word	0x20000044

08001544 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 800154e:	228c      	movs	r2, #140	; 0x8c
 8001550:	2103      	movs	r1, #3
 8001552:	2030      	movs	r0, #48	; 0x30
 8001554:	f7ff ff76 	bl	8001444 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	461a      	mov	r2, r3
 800155c:	2104      	movs	r1, #4
 800155e:	2030      	movs	r0, #48	; 0x30
 8001560:	f7ff ff70 	bl	8001444 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001564:	2281      	movs	r2, #129	; 0x81
 8001566:	2105      	movs	r1, #5
 8001568:	2030      	movs	r0, #48	; 0x30
 800156a:	f7ff ff6b 	bl	8001444 <write_single_icm20948_reg>

	HAL_Delay(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f000 fa48 	bl	8001a04 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8001574:	213b      	movs	r1, #59	; 0x3b
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff ff38 	bl	80013ec <read_single_icm20948_reg>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	460a      	mov	r2, r1
 8001590:	71fb      	strb	r3, [r7, #7]
 8001592:	4613      	mov	r3, r2
 8001594:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8001596:	220c      	movs	r2, #12
 8001598:	2103      	movs	r1, #3
 800159a:	2030      	movs	r0, #48	; 0x30
 800159c:	f7ff ff52 	bl	8001444 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	461a      	mov	r2, r3
 80015a4:	2104      	movs	r1, #4
 80015a6:	2030      	movs	r0, #48	; 0x30
 80015a8:	f7ff ff4c 	bl	8001444 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 80015ac:	79bb      	ldrb	r3, [r7, #6]
 80015ae:	461a      	mov	r2, r3
 80015b0:	2106      	movs	r1, #6
 80015b2:	2030      	movs	r0, #48	; 0x30
 80015b4:	f7ff ff46 	bl	8001444 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80015b8:	2281      	movs	r2, #129	; 0x81
 80015ba:	2105      	movs	r1, #5
 80015bc:	2030      	movs	r0, #48	; 0x30
 80015be:	f7ff ff41 	bl	8001444 <write_single_icm20948_reg>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	460a      	mov	r2, r1
 80015d4:	71fb      	strb	r3, [r7, #7]
 80015d6:	4613      	mov	r3, r2
 80015d8:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 80015da:	228c      	movs	r2, #140	; 0x8c
 80015dc:	2103      	movs	r1, #3
 80015de:	2030      	movs	r0, #48	; 0x30
 80015e0:	f7ff ff30 	bl	8001444 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	461a      	mov	r2, r3
 80015e8:	2104      	movs	r1, #4
 80015ea:	2030      	movs	r0, #48	; 0x30
 80015ec:	f7ff ff2a 	bl	8001444 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	2105      	movs	r1, #5
 80015fc:	2030      	movs	r0, #48	; 0x30
 80015fe:	f7ff ff21 	bl	8001444 <write_single_icm20948_reg>

	HAL_Delay(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f000 f9fe 	bl	8001a04 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	461a      	mov	r2, r3
 800160c:	213b      	movs	r1, #59	; 0x3b
 800160e:	2000      	movs	r0, #0
 8001610:	f7ff ff3c 	bl	800148c <read_multiple_icm20948_reg>
 8001614:	4603      	mov	r3, r0
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001624:	f000 f972 	bl	800190c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001628:	f000 f80e 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162c:	f7ff f902 	bl	8000834 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001630:	f000 f860 	bl	80016f4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  icm20948_init();
 8001634:	f7ff f996 	bl	8000964 <icm20948_init>
  ak09916_init();
 8001638:	f7ff f9c2 	bl	80009c0 <ak09916_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
        ak09916_mag_read_uT(&my_mag);
 800163c:	4801      	ldr	r0, [pc, #4]	; (8001644 <main+0x24>)
 800163e:	f7ff fac3 	bl	8000bc8 <ak09916_mag_read_uT>
 8001642:	e7fb      	b.n	800163c <main+0x1c>
 8001644:	20000038 	.word	0x20000038

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b096      	sub	sp, #88	; 0x58
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	2244      	movs	r2, #68	; 0x44
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fa00 	bl	8003a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800166a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800166e:	f000 fca3 	bl	8001fb8 <HAL_PWREx_ControlVoltageScaling>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001678:	f000 f837 	bl	80016ea <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800167c:	2302      	movs	r3, #2
 800167e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001684:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001686:	2310      	movs	r3, #16
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168a:	2302      	movs	r3, #2
 800168c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800168e:	2302      	movs	r3, #2
 8001690:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001692:	2301      	movs	r3, #1
 8001694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001696:	230a      	movs	r3, #10
 8001698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800169a:	2307      	movs	r3, #7
 800169c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800169e:	2302      	movs	r3, #2
 80016a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fcda 	bl	8002064 <HAL_RCC_OscConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80016b6:	f000 f818 	bl	80016ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ba:	230f      	movs	r3, #15
 80016bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016be:	2303      	movs	r3, #3
 80016c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ce:	463b      	mov	r3, r7
 80016d0:	2104      	movs	r1, #4
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 f8a2 	bl	800281c <HAL_RCC_ClockConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016de:	f000 f804 	bl	80016ea <Error_Handler>
  }
}
 80016e2:	bf00      	nop
 80016e4:	3758      	adds	r7, #88	; 0x58
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ee:	b672      	cpsid	i
}
 80016f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <Error_Handler+0x8>

080016f4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <MX_SPI3_Init+0x74>)
 80016fa:	4a1c      	ldr	r2, [pc, #112]	; (800176c <MX_SPI3_Init+0x78>)
 80016fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_SPI3_Init+0x74>)
 8001700:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001704:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <MX_SPI3_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_SPI3_Init+0x74>)
 800170e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001712:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_SPI3_Init+0x74>)
 8001716:	2202      	movs	r2, #2
 8001718:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <MX_SPI3_Init+0x74>)
 800171c:	2201      	movs	r2, #1
 800171e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_SPI3_Init+0x74>)
 8001722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001726:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_SPI3_Init+0x74>)
 800172a:	2228      	movs	r2, #40	; 0x28
 800172c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_SPI3_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_SPI3_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_SPI3_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_SPI3_Init+0x74>)
 8001742:	2207      	movs	r2, #7
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <MX_SPI3_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_SPI3_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_SPI3_Init+0x74>)
 8001754:	f001 fa4e 	bl	8002bf4 <HAL_SPI_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800175e:	f7ff ffc4 	bl	80016ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000044 	.word	0x20000044
 800176c:	40003c00 	.word	0x40003c00

08001770 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_SPI_MspInit+0x7c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d128      	bne.n	80017e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	4a16      	ldr	r2, [pc, #88]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 8001798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800179c:	6593      	str	r3, [r2, #88]	; 0x58
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <HAL_SPI_MspInit+0x80>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017d4:	2306      	movs	r3, #6
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <HAL_SPI_MspInit+0x84>)
 80017e0:	f000 fa1a 	bl	8001c18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80017e4:	bf00      	nop
 80017e6:	3728      	adds	r7, #40	; 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40003c00 	.word	0x40003c00
 80017f0:	40021000 	.word	0x40021000
 80017f4:	48000800 	.word	0x48000800

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_MspInit+0x44>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	4a0e      	ldr	r2, [pc, #56]	; (800183c <HAL_MspInit+0x44>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6613      	str	r3, [r2, #96]	; 0x60
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_MspInit+0x44>)
 800180c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_MspInit+0x44>)
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_MspInit+0x44>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6593      	str	r3, [r2, #88]	; 0x58
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_MspInit+0x44>)
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <NMI_Handler+0x4>

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188c:	f000 f89a 	bl	80019c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <SystemInit+0x20>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <SystemInit+0x20>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018bc:	f7ff ffea 	bl	8001894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c0:	480c      	ldr	r0, [pc, #48]	; (80018f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80018c2:	490d      	ldr	r1, [pc, #52]	; (80018f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <LoopForever+0xe>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c8:	e002      	b.n	80018d0 <LoopCopyDataInit>

080018ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ce:	3304      	adds	r3, #4

080018d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d4:	d3f9      	bcc.n	80018ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018d8:	4c0a      	ldr	r4, [pc, #40]	; (8001904 <LoopForever+0x16>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018dc:	e001      	b.n	80018e2 <LoopFillZerobss>

080018de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e0:	3204      	adds	r2, #4

080018e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e4:	d3fb      	bcc.n	80018de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018e6:	f002 f895 	bl	8003a14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ea:	f7ff fe99 	bl	8001620 <main>

080018ee <LoopForever>:

LoopForever:
    b LoopForever
 80018ee:	e7fe      	b.n	80018ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018fc:	08003ad0 	.word	0x08003ad0
  ldr r2, =_sbss
 8001900:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001904:	200000ac 	.word	0x200000ac

08001908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC1_2_IRQHandler>
	...

0800190c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_Init+0x3c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <HAL_Init+0x3c>)
 800191c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001920:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001922:	2003      	movs	r0, #3
 8001924:	f000 f944 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001928:	2000      	movs	r0, #0
 800192a:	f000 f80f 	bl	800194c <HAL_InitTick>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	e001      	b.n	800193e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800193a:	f7ff ff5d 	bl	80017f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800193e:	79fb      	ldrb	r3, [r7, #7]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40022000 	.word	0x40022000

0800194c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_InitTick+0x6c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d023      	beq.n	80019a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_InitTick+0x70>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_InitTick+0x6c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f941 	bl	8001bfe <HAL_SYSTICK_Config>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10f      	bne.n	80019a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d809      	bhi.n	800199c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f000 f919 	bl	8001bc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_InitTick+0x74>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e007      	b.n	80019ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e004      	b.n	80019ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	e001      	b.n	80019ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000008 	.word	0x20000008
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x24>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_IncTick+0x24>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000008 	.word	0x20000008
 80019e8:	200000a8 	.word	0x200000a8

080019ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_GetTick+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	200000a8 	.word	0x200000a8

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff ffee 	bl	80019ec <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_Delay+0x44>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff ffde 	bl	80019ec <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	; (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b7c:	d301      	bcc.n	8001b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00f      	b.n	8001ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <SysTick_Config+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f7ff ff8e 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <SysTick_Config+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <SysTick_Config+0x40>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff47 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd8:	f7ff ff5c 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001bdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f7ff ff8e 	bl	8001b04 <NVIC_EncodePriority>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff5d 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffb0 	bl	8001b6c <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c26:	e17f      	b.n	8001f28 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	4013      	ands	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8171 	beq.w	8001f22 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d005      	beq.n	8001c58 <HAL_GPIO_Init+0x40>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d130      	bne.n	8001cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c8e:	2201      	movs	r2, #1
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 0201 	and.w	r2, r3, #1
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d118      	bne.n	8001cf8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	08db      	lsrs	r3, r3, #3
 8001ce2:	f003 0201 	and.w	r2, r3, #1
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d017      	beq.n	8001d34 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d123      	bne.n	8001d88 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3208      	adds	r2, #8
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	6939      	ldr	r1, [r7, #16]
 8001d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0203 	and.w	r2, r3, #3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80ac 	beq.w	8001f22 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	4b5f      	ldr	r3, [pc, #380]	; (8001f48 <HAL_GPIO_Init+0x330>)
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dce:	4a5e      	ldr	r2, [pc, #376]	; (8001f48 <HAL_GPIO_Init+0x330>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001dd6:	4b5c      	ldr	r3, [pc, #368]	; (8001f48 <HAL_GPIO_Init+0x330>)
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001de2:	4a5a      	ldr	r2, [pc, #360]	; (8001f4c <HAL_GPIO_Init+0x334>)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	3302      	adds	r3, #2
 8001dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	220f      	movs	r2, #15
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e0c:	d025      	beq.n	8001e5a <HAL_GPIO_Init+0x242>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4f      	ldr	r2, [pc, #316]	; (8001f50 <HAL_GPIO_Init+0x338>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d01f      	beq.n	8001e56 <HAL_GPIO_Init+0x23e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4e      	ldr	r2, [pc, #312]	; (8001f54 <HAL_GPIO_Init+0x33c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d019      	beq.n	8001e52 <HAL_GPIO_Init+0x23a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4d      	ldr	r2, [pc, #308]	; (8001f58 <HAL_GPIO_Init+0x340>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_GPIO_Init+0x236>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4c      	ldr	r2, [pc, #304]	; (8001f5c <HAL_GPIO_Init+0x344>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00d      	beq.n	8001e4a <HAL_GPIO_Init+0x232>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4b      	ldr	r2, [pc, #300]	; (8001f60 <HAL_GPIO_Init+0x348>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <HAL_GPIO_Init+0x22e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4a      	ldr	r2, [pc, #296]	; (8001f64 <HAL_GPIO_Init+0x34c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_GPIO_Init+0x22a>
 8001e3e:	2306      	movs	r3, #6
 8001e40:	e00c      	b.n	8001e5c <HAL_GPIO_Init+0x244>
 8001e42:	2307      	movs	r3, #7
 8001e44:	e00a      	b.n	8001e5c <HAL_GPIO_Init+0x244>
 8001e46:	2305      	movs	r3, #5
 8001e48:	e008      	b.n	8001e5c <HAL_GPIO_Init+0x244>
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	e006      	b.n	8001e5c <HAL_GPIO_Init+0x244>
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e004      	b.n	8001e5c <HAL_GPIO_Init+0x244>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e002      	b.n	8001e5c <HAL_GPIO_Init+0x244>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_GPIO_Init+0x244>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	f002 0203 	and.w	r2, r2, #3
 8001e62:	0092      	lsls	r2, r2, #2
 8001e64:	4093      	lsls	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e6c:	4937      	ldr	r1, [pc, #220]	; (8001f4c <HAL_GPIO_Init+0x334>)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	3302      	adds	r3, #2
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e7a:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <HAL_GPIO_Init+0x350>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e9e:	4a32      	ldr	r2, [pc, #200]	; (8001f68 <HAL_GPIO_Init+0x350>)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ea4:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <HAL_GPIO_Init+0x350>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ec8:	4a27      	ldr	r2, [pc, #156]	; (8001f68 <HAL_GPIO_Init+0x350>)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <HAL_GPIO_Init+0x350>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ef2:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <HAL_GPIO_Init+0x350>)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <HAL_GPIO_Init+0x350>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f1c:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <HAL_GPIO_Init+0x350>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3301      	adds	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f47f ae78 	bne.w	8001c28 <HAL_GPIO_Init+0x10>
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	48000400 	.word	0x48000400
 8001f54:	48000800 	.word	0x48000800
 8001f58:	48000c00 	.word	0x48000c00
 8001f5c:	48001000 	.word	0x48001000
 8001f60:	48001400 	.word	0x48001400
 8001f64:	48001800 	.word	0x48001800
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f7c:	787b      	ldrb	r3, [r7, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40007000 	.word	0x40007000

08001fb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc6:	d130      	bne.n	800202a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc8:	4b23      	ldr	r3, [pc, #140]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd4:	d038      	beq.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fde:	4a1e      	ldr	r2, [pc, #120]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2232      	movs	r2, #50	; 0x32
 8001fec:	fb02 f303 	mul.w	r3, r2, r3
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0c9b      	lsrs	r3, r3, #18
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffc:	e002      	b.n	8002004 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3b01      	subs	r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002010:	d102      	bne.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f2      	bne.n	8001ffe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002024:	d110      	bne.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e00f      	b.n	800204a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002036:	d007      	beq.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002040:	4a05      	ldr	r2, [pc, #20]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002046:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40007000 	.word	0x40007000
 800205c:	20000000 	.word	0x20000000
 8002060:	431bde83 	.word	0x431bde83

08002064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e3ca      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002076:	4b97      	ldr	r3, [pc, #604]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002080:	4b94      	ldr	r3, [pc, #592]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80e4 	beq.w	8002260 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <HAL_RCC_OscConfig+0x4a>
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	f040 808b 	bne.w	80021bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	f040 8087 	bne.w	80021bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ae:	4b89      	ldr	r3, [pc, #548]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x62>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e3a2      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	4b82      	ldr	r3, [pc, #520]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d004      	beq.n	80020e0 <HAL_RCC_OscConfig+0x7c>
 80020d6:	4b7f      	ldr	r3, [pc, #508]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020de:	e005      	b.n	80020ec <HAL_RCC_OscConfig+0x88>
 80020e0:	4b7c      	ldr	r3, [pc, #496]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80020e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d223      	bcs.n	8002138 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fd1d 	bl	8002b34 <RCC_SetFlashLatencyFromMSIRange>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e383      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002104:	4b73      	ldr	r3, [pc, #460]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a72      	ldr	r2, [pc, #456]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4b70      	ldr	r3, [pc, #448]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	496d      	ldr	r1, [pc, #436]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002122:	4b6c      	ldr	r3, [pc, #432]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	4968      	ldr	r1, [pc, #416]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
 8002136:	e025      	b.n	8002184 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002138:	4b66      	ldr	r3, [pc, #408]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a65      	ldr	r2, [pc, #404]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 800213e:	f043 0308 	orr.w	r3, r3, #8
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4960      	ldr	r1, [pc, #384]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002156:	4b5f      	ldr	r3, [pc, #380]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	495b      	ldr	r1, [pc, #364]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fcdd 	bl	8002b34 <RCC_SetFlashLatencyFromMSIRange>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e343      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002184:	f000 fc4a 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b52      	ldr	r3, [pc, #328]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	4950      	ldr	r1, [pc, #320]	; (80022d8 <HAL_RCC_OscConfig+0x274>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	4a4e      	ldr	r2, [pc, #312]	; (80022dc <HAL_RCC_OscConfig+0x278>)
 80021a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021a4:	4b4e      	ldr	r3, [pc, #312]	; (80022e0 <HAL_RCC_OscConfig+0x27c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fbcf 	bl	800194c <HAL_InitTick>
 80021ae:	4603      	mov	r3, r0
 80021b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d052      	beq.n	800225e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	e327      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d032      	beq.n	800222a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021c4:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a42      	ldr	r2, [pc, #264]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021d0:	f7ff fc0c 	bl	80019ec <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d8:	f7ff fc08 	bl	80019ec <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e310      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ea:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f6:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a36      	ldr	r2, [pc, #216]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b34      	ldr	r3, [pc, #208]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	4931      	ldr	r1, [pc, #196]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002214:	4b2f      	ldr	r3, [pc, #188]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	492c      	ldr	r1, [pc, #176]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
 8002228:	e01a      	b.n	8002260 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800222a:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a29      	ldr	r2, [pc, #164]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002236:	f7ff fbd9 	bl	80019ec <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800223e:	f7ff fbd5 	bl	80019ec <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e2dd      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002250:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x1da>
 800225c:	e000      	b.n	8002260 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800225e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d074      	beq.n	8002356 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b08      	cmp	r3, #8
 8002270:	d005      	beq.n	800227e <HAL_RCC_OscConfig+0x21a>
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b0c      	cmp	r3, #12
 8002276:	d10e      	bne.n	8002296 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d10b      	bne.n	8002296 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d064      	beq.n	8002354 <HAL_RCC_OscConfig+0x2f0>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d160      	bne.n	8002354 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e2ba      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x24a>
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80022a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	e026      	b.n	80022fc <HAL_RCC_OscConfig+0x298>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b6:	d115      	bne.n	80022e4 <HAL_RCC_OscConfig+0x280>
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80022be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a02      	ldr	r2, [pc, #8]	; (80022d4 <HAL_RCC_OscConfig+0x270>)
 80022ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	e014      	b.n	80022fc <HAL_RCC_OscConfig+0x298>
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	08003a88 	.word	0x08003a88
 80022dc:	20000000 	.word	0x20000000
 80022e0:	20000004 	.word	0x20000004
 80022e4:	4ba0      	ldr	r3, [pc, #640]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a9f      	ldr	r2, [pc, #636]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80022ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	4b9d      	ldr	r3, [pc, #628]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a9c      	ldr	r2, [pc, #624]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80022f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d013      	beq.n	800232c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7ff fb72 	bl	80019ec <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff fb6e 	bl	80019ec <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e276      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800231e:	4b92      	ldr	r3, [pc, #584]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x2a8>
 800232a:	e014      	b.n	8002356 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7ff fb5e 	bl	80019ec <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7ff fb5a 	bl	80019ec <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e262      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002346:	4b88      	ldr	r3, [pc, #544]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x2d0>
 8002352:	e000      	b.n	8002356 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d060      	beq.n	8002424 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	2b04      	cmp	r3, #4
 8002366:	d005      	beq.n	8002374 <HAL_RCC_OscConfig+0x310>
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d119      	bne.n	80023a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d116      	bne.n	80023a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002374:	4b7c      	ldr	r3, [pc, #496]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_OscConfig+0x328>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e23f      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	4b76      	ldr	r3, [pc, #472]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	061b      	lsls	r3, r3, #24
 800239a:	4973      	ldr	r1, [pc, #460]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a0:	e040      	b.n	8002424 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d023      	beq.n	80023f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023aa:	4b6f      	ldr	r3, [pc, #444]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6e      	ldr	r2, [pc, #440]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b6:	f7ff fb19 	bl	80019ec <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023be:	f7ff fb15 	bl	80019ec <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e21d      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d0:	4b65      	ldr	r3, [pc, #404]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023dc:	4b62      	ldr	r3, [pc, #392]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	495f      	ldr	r1, [pc, #380]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
 80023f0:	e018      	b.n	8002424 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f2:	4b5d      	ldr	r3, [pc, #372]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a5c      	ldr	r2, [pc, #368]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80023f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7ff faf5 	bl	80019ec <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002406:	f7ff faf1 	bl	80019ec <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e1f9      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d03c      	beq.n	80024aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01c      	beq.n	8002472 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002438:	4b4b      	ldr	r3, [pc, #300]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243e:	4a4a      	ldr	r2, [pc, #296]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002448:	f7ff fad0 	bl	80019ec <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7ff facc 	bl	80019ec <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e1d4      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002462:	4b41      	ldr	r3, [pc, #260]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 8002464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ef      	beq.n	8002450 <HAL_RCC_OscConfig+0x3ec>
 8002470:	e01b      	b.n	80024aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002472:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 8002474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002478:	4a3b      	ldr	r2, [pc, #236]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7ff fab3 	bl	80019ec <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248a:	f7ff faaf 	bl	80019ec <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1b7      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800249c:	4b32      	ldr	r3, [pc, #200]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1ef      	bne.n	800248a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80a6 	beq.w	8002604 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024bc:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10d      	bne.n	80024e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c8:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	4a26      	ldr	r2, [pc, #152]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80024ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d2:	6593      	str	r3, [r2, #88]	; 0x58
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e0:	2301      	movs	r3, #1
 80024e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e4:	4b21      	ldr	r3, [pc, #132]	; (800256c <HAL_RCC_OscConfig+0x508>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d118      	bne.n	8002522 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f0:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_RCC_OscConfig+0x508>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a1d      	ldr	r2, [pc, #116]	; (800256c <HAL_RCC_OscConfig+0x508>)
 80024f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fc:	f7ff fa76 	bl	80019ec <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7ff fa72 	bl	80019ec <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e17a      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_RCC_OscConfig+0x508>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d108      	bne.n	800253c <HAL_RCC_OscConfig+0x4d8>
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	4a0d      	ldr	r2, [pc, #52]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800253a:	e029      	b.n	8002590 <HAL_RCC_OscConfig+0x52c>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b05      	cmp	r3, #5
 8002542:	d115      	bne.n	8002570 <HAL_RCC_OscConfig+0x50c>
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	4a07      	ldr	r2, [pc, #28]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	4a03      	ldr	r2, [pc, #12]	; (8002568 <HAL_RCC_OscConfig+0x504>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002564:	e014      	b.n	8002590 <HAL_RCC_OscConfig+0x52c>
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	40007000 	.word	0x40007000
 8002570:	4b9c      	ldr	r3, [pc, #624]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	4a9b      	ldr	r2, [pc, #620]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002580:	4b98      	ldr	r3, [pc, #608]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	4a97      	ldr	r2, [pc, #604]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 8002588:	f023 0304 	bic.w	r3, r3, #4
 800258c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d016      	beq.n	80025c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7ff fa28 	bl	80019ec <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a0:	f7ff fa24 	bl	80019ec <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e12a      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b6:	4b8b      	ldr	r3, [pc, #556]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ed      	beq.n	80025a0 <HAL_RCC_OscConfig+0x53c>
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7ff fa11 	bl	80019ec <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7ff fa0d 	bl	80019ec <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e113      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e4:	4b7f      	ldr	r3, [pc, #508]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1ed      	bne.n	80025ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f2:	7ffb      	ldrb	r3, [r7, #31]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f8:	4b7a      	ldr	r3, [pc, #488]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	4a79      	ldr	r2, [pc, #484]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 80025fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002602:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80fe 	beq.w	800280a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	2b02      	cmp	r3, #2
 8002614:	f040 80d0 	bne.w	80027b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002618:	4b72      	ldr	r3, [pc, #456]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 0203 	and.w	r2, r3, #3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	429a      	cmp	r2, r3
 800262a:	d130      	bne.n	800268e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	3b01      	subs	r3, #1
 8002638:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d127      	bne.n	800268e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002648:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d11f      	bne.n	800268e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002658:	2a07      	cmp	r2, #7
 800265a:	bf14      	ite	ne
 800265c:	2201      	movne	r2, #1
 800265e:	2200      	moveq	r2, #0
 8002660:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002662:	4293      	cmp	r3, r2
 8002664:	d113      	bne.n	800268e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	3b01      	subs	r3, #1
 8002674:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d109      	bne.n	800268e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	3b01      	subs	r3, #1
 8002688:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d06e      	beq.n	800276c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2b0c      	cmp	r3, #12
 8002692:	d069      	beq.n	8002768 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002694:	4b53      	ldr	r3, [pc, #332]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026a0:	4b50      	ldr	r3, [pc, #320]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0ad      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026b0:	4b4c      	ldr	r3, [pc, #304]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a4b      	ldr	r2, [pc, #300]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 80026b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026bc:	f7ff f996 	bl	80019ec <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c4:	f7ff f992 	bl	80019ec <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e09a      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d6:	4b43      	ldr	r3, [pc, #268]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e2:	4b40      	ldr	r3, [pc, #256]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	4b40      	ldr	r3, [pc, #256]	; (80027e8 <HAL_RCC_OscConfig+0x784>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026f2:	3a01      	subs	r2, #1
 80026f4:	0112      	lsls	r2, r2, #4
 80026f6:	4311      	orrs	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026fc:	0212      	lsls	r2, r2, #8
 80026fe:	4311      	orrs	r1, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002704:	0852      	lsrs	r2, r2, #1
 8002706:	3a01      	subs	r2, #1
 8002708:	0552      	lsls	r2, r2, #21
 800270a:	4311      	orrs	r1, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002710:	0852      	lsrs	r2, r2, #1
 8002712:	3a01      	subs	r2, #1
 8002714:	0652      	lsls	r2, r2, #25
 8002716:	4311      	orrs	r1, r2
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800271c:	0912      	lsrs	r2, r2, #4
 800271e:	0452      	lsls	r2, r2, #17
 8002720:	430a      	orrs	r2, r1
 8002722:	4930      	ldr	r1, [pc, #192]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 8002724:	4313      	orrs	r3, r2
 8002726:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002728:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 800272e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002732:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002734:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a2a      	ldr	r2, [pc, #168]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 800273a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002740:	f7ff f954 	bl	80019ec <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002748:	f7ff f950 	bl	80019ec <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e058      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275a:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002766:	e050      	b.n	800280a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e04f      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d148      	bne.n	800280a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002778:	4b1a      	ldr	r3, [pc, #104]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 800277e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002782:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002784:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a16      	ldr	r2, [pc, #88]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 800278a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002790:	f7ff f92c 	bl	80019ec <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002798:	f7ff f928 	bl	80019ec <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e030      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x734>
 80027b6:	e028      	b.n	800280a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2b0c      	cmp	r3, #12
 80027bc:	d023      	beq.n	8002806 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <HAL_RCC_OscConfig+0x780>)
 80027c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ca:	f7ff f90f 	bl	80019ec <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d0:	e00c      	b.n	80027ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d2:	f7ff f90b 	bl	80019ec <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d905      	bls.n	80027ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e013      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
 80027e4:	40021000 	.word	0x40021000
 80027e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_RCC_OscConfig+0x7b0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ec      	bne.n	80027d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_RCC_OscConfig+0x7b0>)
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	4905      	ldr	r1, [pc, #20]	; (8002814 <HAL_RCC_OscConfig+0x7b0>)
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RCC_OscConfig+0x7b4>)
 8002800:	4013      	ands	r3, r2
 8002802:	60cb      	str	r3, [r1, #12]
 8002804:	e001      	b.n	800280a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3720      	adds	r7, #32
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40021000 	.word	0x40021000
 8002818:	feeefffc 	.word	0xfeeefffc

0800281c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0e7      	b.n	8002a00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b75      	ldr	r3, [pc, #468]	; (8002a08 <HAL_RCC_ClockConfig+0x1ec>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d910      	bls.n	8002860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b72      	ldr	r3, [pc, #456]	; (8002a08 <HAL_RCC_ClockConfig+0x1ec>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 0207 	bic.w	r2, r3, #7
 8002846:	4970      	ldr	r1, [pc, #448]	; (8002a08 <HAL_RCC_ClockConfig+0x1ec>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b6e      	ldr	r3, [pc, #440]	; (8002a08 <HAL_RCC_ClockConfig+0x1ec>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0cf      	b.n	8002a00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d010      	beq.n	800288e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	4b66      	ldr	r3, [pc, #408]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002878:	429a      	cmp	r2, r3
 800287a:	d908      	bls.n	800288e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800287c:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4960      	ldr	r1, [pc, #384]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d04c      	beq.n	8002934 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a2:	4b5a      	ldr	r3, [pc, #360]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d121      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0a6      	b.n	8002a00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ba:	4b54      	ldr	r3, [pc, #336]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d115      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e09a      	b.n	8002a00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028d2:	4b4e      	ldr	r3, [pc, #312]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e08e      	b.n	8002a00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e2:	4b4a      	ldr	r3, [pc, #296]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e086      	b.n	8002a00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028f2:	4b46      	ldr	r3, [pc, #280]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f023 0203 	bic.w	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4943      	ldr	r1, [pc, #268]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 8002900:	4313      	orrs	r3, r2
 8002902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002904:	f7ff f872 	bl	80019ec <HAL_GetTick>
 8002908:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	e00a      	b.n	8002922 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800290c:	f7ff f86e 	bl	80019ec <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	f241 3288 	movw	r2, #5000	; 0x1388
 800291a:	4293      	cmp	r3, r2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e06e      	b.n	8002a00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	4b3a      	ldr	r3, [pc, #232]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 020c 	and.w	r2, r3, #12
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	429a      	cmp	r2, r3
 8002932:	d1eb      	bne.n	800290c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d010      	beq.n	8002962 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	4b31      	ldr	r3, [pc, #196]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800294c:	429a      	cmp	r2, r3
 800294e:	d208      	bcs.n	8002962 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002950:	4b2e      	ldr	r3, [pc, #184]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	492b      	ldr	r1, [pc, #172]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002962:	4b29      	ldr	r3, [pc, #164]	; (8002a08 <HAL_RCC_ClockConfig+0x1ec>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	429a      	cmp	r2, r3
 800296e:	d210      	bcs.n	8002992 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002970:	4b25      	ldr	r3, [pc, #148]	; (8002a08 <HAL_RCC_ClockConfig+0x1ec>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 0207 	bic.w	r2, r3, #7
 8002978:	4923      	ldr	r1, [pc, #140]	; (8002a08 <HAL_RCC_ClockConfig+0x1ec>)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002980:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <HAL_RCC_ClockConfig+0x1ec>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e036      	b.n	8002a00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800299e:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	4918      	ldr	r1, [pc, #96]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4910      	ldr	r1, [pc, #64]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029d0:	f000 f824 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <HAL_RCC_ClockConfig+0x1f0>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	490b      	ldr	r1, [pc, #44]	; (8002a10 <HAL_RCC_ClockConfig+0x1f4>)
 80029e2:	5ccb      	ldrb	r3, [r1, r3]
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
 80029ec:	4a09      	ldr	r2, [pc, #36]	; (8002a14 <HAL_RCC_ClockConfig+0x1f8>)
 80029ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCC_ClockConfig+0x1fc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe ffa9 	bl	800194c <HAL_InitTick>
 80029fa:	4603      	mov	r3, r0
 80029fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80029fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40022000 	.word	0x40022000
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	08003a88 	.word	0x08003a88
 8002a14:	20000000 	.word	0x20000000
 8002a18:	20000004 	.word	0x20000004

08002a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	2300      	movs	r3, #0
 8002a28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2a:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a34:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x34>
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	d121      	bne.n	8002a8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d11e      	bne.n	8002a8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a50:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a5c:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	e005      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a6c:	4b2d      	ldr	r3, [pc, #180]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a78:	4a2b      	ldr	r2, [pc, #172]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10d      	bne.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d102      	bne.n	8002a9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a94:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	e004      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d101      	bne.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002aa0:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aa2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d134      	bne.n	8002b14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d003      	beq.n	8002ac2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d003      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ac0:	e005      	b.n	8002ace <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ac2:	4b1a      	ldr	r3, [pc, #104]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ac4:	617b      	str	r3, [r7, #20]
      break;
 8002ac6:	e005      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aca:	617b      	str	r3, [r7, #20]
      break;
 8002acc:	e002      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	617b      	str	r3, [r7, #20]
      break;
 8002ad2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ad4:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	3301      	adds	r3, #1
 8002ae0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	0a1b      	lsrs	r3, r3, #8
 8002ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	fb03 f202 	mul.w	r2, r3, r2
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	0e5b      	lsrs	r3, r3, #25
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	3301      	adds	r3, #1
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b14:	69bb      	ldr	r3, [r7, #24]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3724      	adds	r7, #36	; 0x24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	08003a98 	.word	0x08003a98
 8002b2c:	00f42400 	.word	0x00f42400
 8002b30:	007a1200 	.word	0x007a1200

08002b34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b40:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b4c:	f7ff fa26 	bl	8001f9c <HAL_PWREx_GetVoltageRange>
 8002b50:	6178      	str	r0, [r7, #20]
 8002b52:	e014      	b.n	8002b7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b54:	4b25      	ldr	r3, [pc, #148]	; (8002bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	4a24      	ldr	r2, [pc, #144]	; (8002bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b60:	4b22      	ldr	r3, [pc, #136]	; (8002bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b6c:	f7ff fa16 	bl	8001f9c <HAL_PWREx_GetVoltageRange>
 8002b70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b72:	4b1e      	ldr	r3, [pc, #120]	; (8002bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b84:	d10b      	bne.n	8002b9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b80      	cmp	r3, #128	; 0x80
 8002b8a:	d919      	bls.n	8002bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2ba0      	cmp	r3, #160	; 0xa0
 8002b90:	d902      	bls.n	8002b98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b92:	2302      	movs	r3, #2
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	e013      	b.n	8002bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b98:	2301      	movs	r3, #1
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	e010      	b.n	8002bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b80      	cmp	r3, #128	; 0x80
 8002ba2:	d902      	bls.n	8002baa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	e00a      	b.n	8002bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b80      	cmp	r3, #128	; 0x80
 8002bae:	d102      	bne.n	8002bb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	e004      	b.n	8002bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b70      	cmp	r3, #112	; 0x70
 8002bba:	d101      	bne.n	8002bc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 0207 	bic.w	r2, r3, #7
 8002bc8:	4909      	ldr	r1, [pc, #36]	; (8002bf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bd0:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d001      	beq.n	8002be2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40022000 	.word	0x40022000

08002bf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e095      	b.n	8002d32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d108      	bne.n	8002c20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c16:	d009      	beq.n	8002c2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
 8002c1e:	e005      	b.n	8002c2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fe fd92 	bl	8001770 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c6c:	d902      	bls.n	8002c74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	e002      	b.n	8002c7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c82:	d007      	beq.n	8002c94 <HAL_SPI_Init+0xa0>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c8c:	d002      	beq.n	8002c94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd6:	ea42 0103 	orr.w	r1, r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	0c1b      	lsrs	r3, r3, #16
 8002cf0:	f003 0204 	and.w	r2, r3, #4
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d10:	ea42 0103 	orr.w	r1, r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b088      	sub	sp, #32
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	603b      	str	r3, [r7, #0]
 8002d46:	4613      	mov	r3, r2
 8002d48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_SPI_Transmit+0x22>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e158      	b.n	800300e <HAL_SPI_Transmit+0x2d4>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d64:	f7fe fe42 	bl	80019ec <HAL_GetTick>
 8002d68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d002      	beq.n	8002d80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d7e:	e13d      	b.n	8002ffc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_SPI_Transmit+0x52>
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d90:	e134      	b.n	8002ffc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2203      	movs	r2, #3
 8002d96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	88fa      	ldrh	r2, [r7, #6]
 8002daa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	88fa      	ldrh	r2, [r7, #6]
 8002db0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ddc:	d10f      	bne.n	8002dfe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d007      	beq.n	8002e1c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e24:	d94b      	bls.n	8002ebe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <HAL_SPI_Transmit+0xfa>
 8002e2e:	8afb      	ldrh	r3, [r7, #22]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d13e      	bne.n	8002eb2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	881a      	ldrh	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	1c9a      	adds	r2, r3, #2
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e58:	e02b      	b.n	8002eb2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d112      	bne.n	8002e8e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6c:	881a      	ldrh	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	1c9a      	adds	r2, r3, #2
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e8c:	e011      	b.n	8002eb2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e8e:	f7fe fdad 	bl	80019ec <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d803      	bhi.n	8002ea6 <HAL_SPI_Transmit+0x16c>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d102      	bne.n	8002eac <HAL_SPI_Transmit+0x172>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002eb0:	e0a4      	b.n	8002ffc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1ce      	bne.n	8002e5a <HAL_SPI_Transmit+0x120>
 8002ebc:	e07c      	b.n	8002fb8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_SPI_Transmit+0x192>
 8002ec6:	8afb      	ldrh	r3, [r7, #22]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d170      	bne.n	8002fae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d912      	bls.n	8002efc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	881a      	ldrh	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	1c9a      	adds	r2, r3, #2
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b02      	subs	r3, #2
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002efa:	e058      	b.n	8002fae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	7812      	ldrb	r2, [r2, #0]
 8002f08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f22:	e044      	b.n	8002fae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d12b      	bne.n	8002f8a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d912      	bls.n	8002f62 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	881a      	ldrh	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	1c9a      	adds	r2, r3, #2
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b02      	subs	r3, #2
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f60:	e025      	b.n	8002fae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	330c      	adds	r3, #12
 8002f6c:	7812      	ldrb	r2, [r2, #0]
 8002f6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f88:	e011      	b.n	8002fae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f8a:	f7fe fd2f 	bl	80019ec <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d803      	bhi.n	8002fa2 <HAL_SPI_Transmit+0x268>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d102      	bne.n	8002fa8 <HAL_SPI_Transmit+0x26e>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fac:	e026      	b.n	8002ffc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1b5      	bne.n	8002f24 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	6839      	ldr	r1, [r7, #0]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fce3 	bl	8003988 <SPI_EndRxTxTransaction>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e000      	b.n	8002ffc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002ffa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800300c:	7ffb      	ldrb	r3, [r7, #31]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b088      	sub	sp, #32
 800301a:	af02      	add	r7, sp, #8
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	4613      	mov	r3, r2
 8003024:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003032:	d112      	bne.n	800305a <HAL_SPI_Receive+0x44>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10e      	bne.n	800305a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2204      	movs	r2, #4
 8003040:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003044:	88fa      	ldrh	r2, [r7, #6]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	4613      	mov	r3, r2
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f910 	bl	8003276 <HAL_SPI_TransmitReceive>
 8003056:	4603      	mov	r3, r0
 8003058:	e109      	b.n	800326e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_SPI_Receive+0x52>
 8003064:	2302      	movs	r3, #2
 8003066:	e102      	b.n	800326e <HAL_SPI_Receive+0x258>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003070:	f7fe fcbc 	bl	80019ec <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b01      	cmp	r3, #1
 8003080:	d002      	beq.n	8003088 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003082:	2302      	movs	r3, #2
 8003084:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003086:	e0e9      	b.n	800325c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_SPI_Receive+0x7e>
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d102      	bne.n	800309a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003098:	e0e0      	b.n	800325c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2204      	movs	r2, #4
 800309e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	88fa      	ldrh	r2, [r7, #6]
 80030b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	88fa      	ldrh	r2, [r7, #6]
 80030ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030e4:	d908      	bls.n	80030f8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	e007      	b.n	8003108 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003106:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003110:	d10f      	bne.n	8003132 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003120:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003130:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313c:	2b40      	cmp	r3, #64	; 0x40
 800313e:	d007      	beq.n	8003150 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800314e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003158:	d867      	bhi.n	800322a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800315a:	e030      	b.n	80031be <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d117      	bne.n	800319a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f103 020c 	add.w	r2, r3, #12
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	7812      	ldrb	r2, [r2, #0]
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003198:	e011      	b.n	80031be <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800319a:	f7fe fc27 	bl	80019ec <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d803      	bhi.n	80031b2 <HAL_SPI_Receive+0x19c>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d102      	bne.n	80031b8 <HAL_SPI_Receive+0x1a2>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d102      	bne.n	80031be <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031bc:	e04e      	b.n	800325c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1c8      	bne.n	800315c <HAL_SPI_Receive+0x146>
 80031ca:	e034      	b.n	8003236 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d115      	bne.n	8003206 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	b292      	uxth	r2, r2
 80031e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003204:	e011      	b.n	800322a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003206:	f7fe fbf1 	bl	80019ec <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d803      	bhi.n	800321e <HAL_SPI_Receive+0x208>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d102      	bne.n	8003224 <HAL_SPI_Receive+0x20e>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003228:	e018      	b.n	800325c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1ca      	bne.n	80031cc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	6839      	ldr	r1, [r7, #0]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fb4c 	bl	80038d8 <SPI_EndRxTransaction>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2220      	movs	r2, #32
 800324a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]
 8003258:	e000      	b.n	800325c <HAL_SPI_Receive+0x246>
  }

error :
 800325a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800326c:	7dfb      	ldrb	r3, [r7, #23]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b08a      	sub	sp, #40	; 0x28
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
 8003282:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003284:	2301      	movs	r3, #1
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_SPI_TransmitReceive+0x26>
 8003298:	2302      	movs	r3, #2
 800329a:	e1fb      	b.n	8003694 <HAL_SPI_TransmitReceive+0x41e>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032a4:	f7fe fba2 	bl	80019ec <HAL_GetTick>
 80032a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80032b8:	887b      	ldrh	r3, [r7, #2]
 80032ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032c0:	7efb      	ldrb	r3, [r7, #27]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d00e      	beq.n	80032e4 <HAL_SPI_TransmitReceive+0x6e>
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032cc:	d106      	bne.n	80032dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <HAL_SPI_TransmitReceive+0x66>
 80032d6:	7efb      	ldrb	r3, [r7, #27]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d003      	beq.n	80032e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
 80032de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80032e2:	e1cd      	b.n	8003680 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_SPI_TransmitReceive+0x80>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_SPI_TransmitReceive+0x80>
 80032f0:	887b      	ldrh	r3, [r7, #2]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80032fc:	e1c0      	b.n	8003680 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b04      	cmp	r3, #4
 8003308:	d003      	beq.n	8003312 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2205      	movs	r2, #5
 800330e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	887a      	ldrh	r2, [r7, #2]
 8003322:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	887a      	ldrh	r2, [r7, #2]
 800332a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	887a      	ldrh	r2, [r7, #2]
 8003338:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	887a      	ldrh	r2, [r7, #2]
 800333e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003354:	d802      	bhi.n	800335c <HAL_SPI_TransmitReceive+0xe6>
 8003356:	8a3b      	ldrh	r3, [r7, #16]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d908      	bls.n	800336e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800336a:	605a      	str	r2, [r3, #4]
 800336c:	e007      	b.n	800337e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800337c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d007      	beq.n	800339c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800339a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033a4:	d97c      	bls.n	80034a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_SPI_TransmitReceive+0x13e>
 80033ae:	8a7b      	ldrh	r3, [r7, #18]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d169      	bne.n	8003488 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	881a      	ldrh	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	1c9a      	adds	r2, r3, #2
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033d8:	e056      	b.n	8003488 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d11b      	bne.n	8003420 <HAL_SPI_TransmitReceive+0x1aa>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d016      	beq.n	8003420 <HAL_SPI_TransmitReceive+0x1aa>
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d113      	bne.n	8003420 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	881a      	ldrh	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	1c9a      	adds	r2, r3, #2
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d11c      	bne.n	8003468 <HAL_SPI_TransmitReceive+0x1f2>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d016      	beq.n	8003468 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	b292      	uxth	r2, r2
 8003446:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	1c9a      	adds	r2, r3, #2
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003464:	2301      	movs	r3, #1
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003468:	f7fe fac0 	bl	80019ec <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003474:	429a      	cmp	r2, r3
 8003476:	d807      	bhi.n	8003488 <HAL_SPI_TransmitReceive+0x212>
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d003      	beq.n	8003488 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003486:	e0fb      	b.n	8003680 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1a3      	bne.n	80033da <HAL_SPI_TransmitReceive+0x164>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d19d      	bne.n	80033da <HAL_SPI_TransmitReceive+0x164>
 800349e:	e0df      	b.n	8003660 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_SPI_TransmitReceive+0x23a>
 80034a8:	8a7b      	ldrh	r3, [r7, #18]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	f040 80cb 	bne.w	8003646 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d912      	bls.n	80034e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	881a      	ldrh	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	1c9a      	adds	r2, r3, #2
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b02      	subs	r3, #2
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034de:	e0b2      	b.n	8003646 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	330c      	adds	r3, #12
 80034ea:	7812      	ldrb	r2, [r2, #0]
 80034ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003506:	e09e      	b.n	8003646 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b02      	cmp	r3, #2
 8003514:	d134      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x30a>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d02f      	beq.n	8003580 <HAL_SPI_TransmitReceive+0x30a>
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	2b01      	cmp	r3, #1
 8003524:	d12c      	bne.n	8003580 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d912      	bls.n	8003556 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	881a      	ldrh	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	1c9a      	adds	r2, r3, #2
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b02      	subs	r3, #2
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003554:	e012      	b.n	800357c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b01      	cmp	r3, #1
 800358c:	d148      	bne.n	8003620 <HAL_SPI_TransmitReceive+0x3aa>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d042      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d923      	bls.n	80035ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	b292      	uxth	r2, r2
 80035b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	1c9a      	adds	r2, r3, #2
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b02      	subs	r3, #2
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d81f      	bhi.n	800361c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	e016      	b.n	800361c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f103 020c 	add.w	r2, r3, #12
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	7812      	ldrb	r2, [r2, #0]
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800361c:	2301      	movs	r3, #1
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003620:	f7fe f9e4 	bl	80019ec <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362c:	429a      	cmp	r2, r3
 800362e:	d803      	bhi.n	8003638 <HAL_SPI_TransmitReceive+0x3c2>
 8003630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	d102      	bne.n	800363e <HAL_SPI_TransmitReceive+0x3c8>
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003644:	e01c      	b.n	8003680 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	f47f af5b 	bne.w	8003508 <HAL_SPI_TransmitReceive+0x292>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	f47f af54 	bne.w	8003508 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f98f 	bl	8003988 <SPI_EndRxTxTransaction>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	661a      	str	r2, [r3, #96]	; 0x60
 800367c:	e000      	b.n	8003680 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800367e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003694:	4618      	mov	r0, r3
 8003696:	3728      	adds	r7, #40	; 0x28
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036ac:	f7fe f99e 	bl	80019ec <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	4413      	add	r3, r2
 80036ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036bc:	f7fe f996 	bl	80019ec <HAL_GetTick>
 80036c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036c2:	4b39      	ldr	r3, [pc, #228]	; (80037a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	015b      	lsls	r3, r3, #5
 80036c8:	0d1b      	lsrs	r3, r3, #20
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	fb02 f303 	mul.w	r3, r2, r3
 80036d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036d2:	e054      	b.n	800377e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036da:	d050      	beq.n	800377e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036dc:	f7fe f986 	bl	80019ec <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d902      	bls.n	80036f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d13d      	bne.n	800376e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003700:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800370a:	d111      	bne.n	8003730 <SPI_WaitFlagStateUntilTimeout+0x94>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003714:	d004      	beq.n	8003720 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800371e:	d107      	bne.n	8003730 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800372e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003738:	d10f      	bne.n	800375a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003758:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e017      	b.n	800379e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	3b01      	subs	r3, #1
 800377c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4013      	ands	r3, r2
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	429a      	cmp	r2, r3
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	429a      	cmp	r2, r3
 800379a:	d19b      	bne.n	80036d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3720      	adds	r7, #32
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000000 	.word	0x20000000

080037ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	; 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037be:	f7fe f915 	bl	80019ec <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	4413      	add	r3, r2
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80037ce:	f7fe f90d 	bl	80019ec <HAL_GetTick>
 80037d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	330c      	adds	r3, #12
 80037da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037dc:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	00da      	lsls	r2, r3, #3
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	0d1b      	lsrs	r3, r3, #20
 80037ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ee:	fb02 f303 	mul.w	r3, r2, r3
 80037f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80037f4:	e060      	b.n	80038b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037fc:	d107      	bne.n	800380e <SPI_WaitFifoStateUntilTimeout+0x62>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d104      	bne.n	800380e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800380c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d050      	beq.n	80038b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003816:	f7fe f8e9 	bl	80019ec <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003822:	429a      	cmp	r2, r3
 8003824:	d902      	bls.n	800382c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	2b00      	cmp	r3, #0
 800382a:	d13d      	bne.n	80038a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800383a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003844:	d111      	bne.n	800386a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384e:	d004      	beq.n	800385a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003858:	d107      	bne.n	800386a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003868:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003872:	d10f      	bne.n	8003894 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003892:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e010      	b.n	80038ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4013      	ands	r3, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d196      	bne.n	80037f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3728      	adds	r7, #40	; 0x28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000000 	.word	0x20000000

080038d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ec:	d111      	bne.n	8003912 <SPI_EndRxTransaction+0x3a>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f6:	d004      	beq.n	8003902 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003900:	d107      	bne.n	8003912 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003910:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2200      	movs	r2, #0
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff febd 	bl	800369c <SPI_WaitFlagStateUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e023      	b.n	8003980 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003940:	d11d      	bne.n	800397e <SPI_EndRxTransaction+0xa6>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394a:	d004      	beq.n	8003956 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003954:	d113      	bne.n	800397e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2200      	movs	r2, #0
 800395e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f7ff ff22 	bl	80037ac <SPI_WaitFifoStateUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003972:	f043 0220 	orr.w	r2, r3, #32
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e000      	b.n	8003980 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2200      	movs	r2, #0
 800399c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f7ff ff03 	bl	80037ac <SPI_WaitFifoStateUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e027      	b.n	8003a0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2200      	movs	r2, #0
 80039c4:	2180      	movs	r1, #128	; 0x80
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f7ff fe68 	bl	800369c <SPI_WaitFlagStateUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d6:	f043 0220 	orr.w	r2, r3, #32
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e014      	b.n	8003a0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff fedc 	bl	80037ac <SPI_WaitFifoStateUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039fe:	f043 0220 	orr.w	r2, r3, #32
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e000      	b.n	8003a0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <__libc_init_array>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	4d0d      	ldr	r5, [pc, #52]	; (8003a4c <__libc_init_array+0x38>)
 8003a18:	4c0d      	ldr	r4, [pc, #52]	; (8003a50 <__libc_init_array+0x3c>)
 8003a1a:	1b64      	subs	r4, r4, r5
 8003a1c:	10a4      	asrs	r4, r4, #2
 8003a1e:	2600      	movs	r6, #0
 8003a20:	42a6      	cmp	r6, r4
 8003a22:	d109      	bne.n	8003a38 <__libc_init_array+0x24>
 8003a24:	4d0b      	ldr	r5, [pc, #44]	; (8003a54 <__libc_init_array+0x40>)
 8003a26:	4c0c      	ldr	r4, [pc, #48]	; (8003a58 <__libc_init_array+0x44>)
 8003a28:	f000 f820 	bl	8003a6c <_init>
 8003a2c:	1b64      	subs	r4, r4, r5
 8003a2e:	10a4      	asrs	r4, r4, #2
 8003a30:	2600      	movs	r6, #0
 8003a32:	42a6      	cmp	r6, r4
 8003a34:	d105      	bne.n	8003a42 <__libc_init_array+0x2e>
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3c:	4798      	blx	r3
 8003a3e:	3601      	adds	r6, #1
 8003a40:	e7ee      	b.n	8003a20 <__libc_init_array+0xc>
 8003a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a46:	4798      	blx	r3
 8003a48:	3601      	adds	r6, #1
 8003a4a:	e7f2      	b.n	8003a32 <__libc_init_array+0x1e>
 8003a4c:	08003ac8 	.word	0x08003ac8
 8003a50:	08003ac8 	.word	0x08003ac8
 8003a54:	08003ac8 	.word	0x08003ac8
 8003a58:	08003acc 	.word	0x08003acc

08003a5c <memset>:
 8003a5c:	4402      	add	r2, r0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d100      	bne.n	8003a66 <memset+0xa>
 8003a64:	4770      	bx	lr
 8003a66:	f803 1b01 	strb.w	r1, [r3], #1
 8003a6a:	e7f9      	b.n	8003a60 <memset+0x4>

08003a6c <_init>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	bf00      	nop
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr

08003a78 <_fini>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	bf00      	nop
 8003a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7e:	bc08      	pop	{r3}
 8003a80:	469e      	mov	lr, r3
 8003a82:	4770      	bx	lr
