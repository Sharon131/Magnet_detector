
SPI_MAG_DET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa44  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800abf4  0800abf4  0001abf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad1c  0800ad1c  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad1c  0800ad1c  0001ad1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad24  0800ad24  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad24  0800ad24  0001ad24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad28  0800ad28  0001ad28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800ad2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          000021a8  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002308  20002308  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a97  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003860  00000000  00000000  00035c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00039488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001020  00000000  00000000  0003a630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027fcf  00000000  00000000  0003b650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000168b5  00000000  00000000  0006361f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da960  00000000  00000000  00079ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00154834  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005044  00000000  00000000  00154884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000160 	.word	0x20000160
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800abdc 	.word	0x0800abdc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000164 	.word	0x20000164
 80001ec:	0800abdc 	.word	0x0800abdc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b974 	b.w	8000bfc <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9d08      	ldr	r5, [sp, #32]
 8000932:	4604      	mov	r4, r0
 8000934:	468e      	mov	lr, r1
 8000936:	2b00      	cmp	r3, #0
 8000938:	d14d      	bne.n	80009d6 <__udivmoddi4+0xaa>
 800093a:	428a      	cmp	r2, r1
 800093c:	4694      	mov	ip, r2
 800093e:	d969      	bls.n	8000a14 <__udivmoddi4+0xe8>
 8000940:	fab2 f282 	clz	r2, r2
 8000944:	b152      	cbz	r2, 800095c <__udivmoddi4+0x30>
 8000946:	fa01 f302 	lsl.w	r3, r1, r2
 800094a:	f1c2 0120 	rsb	r1, r2, #32
 800094e:	fa20 f101 	lsr.w	r1, r0, r1
 8000952:	fa0c fc02 	lsl.w	ip, ip, r2
 8000956:	ea41 0e03 	orr.w	lr, r1, r3
 800095a:	4094      	lsls	r4, r2
 800095c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000960:	0c21      	lsrs	r1, r4, #16
 8000962:	fbbe f6f8 	udiv	r6, lr, r8
 8000966:	fa1f f78c 	uxth.w	r7, ip
 800096a:	fb08 e316 	mls	r3, r8, r6, lr
 800096e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000972:	fb06 f107 	mul.w	r1, r6, r7
 8000976:	4299      	cmp	r1, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x64>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000982:	f080 811f 	bcs.w	8000bc4 <__udivmoddi4+0x298>
 8000986:	4299      	cmp	r1, r3
 8000988:	f240 811c 	bls.w	8000bc4 <__udivmoddi4+0x298>
 800098c:	3e02      	subs	r6, #2
 800098e:	4463      	add	r3, ip
 8000990:	1a5b      	subs	r3, r3, r1
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb3 f0f8 	udiv	r0, r3, r8
 8000998:	fb08 3310 	mls	r3, r8, r0, r3
 800099c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009a0:	fb00 f707 	mul.w	r7, r0, r7
 80009a4:	42a7      	cmp	r7, r4
 80009a6:	d90a      	bls.n	80009be <__udivmoddi4+0x92>
 80009a8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80009b0:	f080 810a 	bcs.w	8000bc8 <__udivmoddi4+0x29c>
 80009b4:	42a7      	cmp	r7, r4
 80009b6:	f240 8107 	bls.w	8000bc8 <__udivmoddi4+0x29c>
 80009ba:	4464      	add	r4, ip
 80009bc:	3802      	subs	r0, #2
 80009be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009c2:	1be4      	subs	r4, r4, r7
 80009c4:	2600      	movs	r6, #0
 80009c6:	b11d      	cbz	r5, 80009d0 <__udivmoddi4+0xa4>
 80009c8:	40d4      	lsrs	r4, r2
 80009ca:	2300      	movs	r3, #0
 80009cc:	e9c5 4300 	strd	r4, r3, [r5]
 80009d0:	4631      	mov	r1, r6
 80009d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d6:	428b      	cmp	r3, r1
 80009d8:	d909      	bls.n	80009ee <__udivmoddi4+0xc2>
 80009da:	2d00      	cmp	r5, #0
 80009dc:	f000 80ef 	beq.w	8000bbe <__udivmoddi4+0x292>
 80009e0:	2600      	movs	r6, #0
 80009e2:	e9c5 0100 	strd	r0, r1, [r5]
 80009e6:	4630      	mov	r0, r6
 80009e8:	4631      	mov	r1, r6
 80009ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ee:	fab3 f683 	clz	r6, r3
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	d14a      	bne.n	8000a8c <__udivmoddi4+0x160>
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d302      	bcc.n	8000a00 <__udivmoddi4+0xd4>
 80009fa:	4282      	cmp	r2, r0
 80009fc:	f200 80f9 	bhi.w	8000bf2 <__udivmoddi4+0x2c6>
 8000a00:	1a84      	subs	r4, r0, r2
 8000a02:	eb61 0303 	sbc.w	r3, r1, r3
 8000a06:	2001      	movs	r0, #1
 8000a08:	469e      	mov	lr, r3
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	d0e0      	beq.n	80009d0 <__udivmoddi4+0xa4>
 8000a0e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a12:	e7dd      	b.n	80009d0 <__udivmoddi4+0xa4>
 8000a14:	b902      	cbnz	r2, 8000a18 <__udivmoddi4+0xec>
 8000a16:	deff      	udf	#255	; 0xff
 8000a18:	fab2 f282 	clz	r2, r2
 8000a1c:	2a00      	cmp	r2, #0
 8000a1e:	f040 8092 	bne.w	8000b46 <__udivmoddi4+0x21a>
 8000a22:	eba1 010c 	sub.w	r1, r1, ip
 8000a26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a2a:	fa1f fe8c 	uxth.w	lr, ip
 8000a2e:	2601      	movs	r6, #1
 8000a30:	0c20      	lsrs	r0, r4, #16
 8000a32:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a36:	fb07 1113 	mls	r1, r7, r3, r1
 8000a3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a3e:	fb0e f003 	mul.w	r0, lr, r3
 8000a42:	4288      	cmp	r0, r1
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x12c>
 8000a46:	eb1c 0101 	adds.w	r1, ip, r1
 8000a4a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a4e:	d202      	bcs.n	8000a56 <__udivmoddi4+0x12a>
 8000a50:	4288      	cmp	r0, r1
 8000a52:	f200 80cb 	bhi.w	8000bec <__udivmoddi4+0x2c0>
 8000a56:	4643      	mov	r3, r8
 8000a58:	1a09      	subs	r1, r1, r0
 8000a5a:	b2a4      	uxth	r4, r4
 8000a5c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a60:	fb07 1110 	mls	r1, r7, r0, r1
 8000a64:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a68:	fb0e fe00 	mul.w	lr, lr, r0
 8000a6c:	45a6      	cmp	lr, r4
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x156>
 8000a70:	eb1c 0404 	adds.w	r4, ip, r4
 8000a74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a78:	d202      	bcs.n	8000a80 <__udivmoddi4+0x154>
 8000a7a:	45a6      	cmp	lr, r4
 8000a7c:	f200 80bb 	bhi.w	8000bf6 <__udivmoddi4+0x2ca>
 8000a80:	4608      	mov	r0, r1
 8000a82:	eba4 040e 	sub.w	r4, r4, lr
 8000a86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a8a:	e79c      	b.n	80009c6 <__udivmoddi4+0x9a>
 8000a8c:	f1c6 0720 	rsb	r7, r6, #32
 8000a90:	40b3      	lsls	r3, r6
 8000a92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a9a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000aa2:	431c      	orrs	r4, r3
 8000aa4:	40f9      	lsrs	r1, r7
 8000aa6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aaa:	fa00 f306 	lsl.w	r3, r0, r6
 8000aae:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ab2:	0c20      	lsrs	r0, r4, #16
 8000ab4:	fa1f fe8c 	uxth.w	lr, ip
 8000ab8:	fb09 1118 	mls	r1, r9, r8, r1
 8000abc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ac0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ac4:	4288      	cmp	r0, r1
 8000ac6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aca:	d90b      	bls.n	8000ae4 <__udivmoddi4+0x1b8>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ad4:	f080 8088 	bcs.w	8000be8 <__udivmoddi4+0x2bc>
 8000ad8:	4288      	cmp	r0, r1
 8000ada:	f240 8085 	bls.w	8000be8 <__udivmoddi4+0x2bc>
 8000ade:	f1a8 0802 	sub.w	r8, r8, #2
 8000ae2:	4461      	add	r1, ip
 8000ae4:	1a09      	subs	r1, r1, r0
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000aec:	fb09 1110 	mls	r1, r9, r0, r1
 8000af0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000af4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000af8:	458e      	cmp	lr, r1
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x1e2>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b04:	d26c      	bcs.n	8000be0 <__udivmoddi4+0x2b4>
 8000b06:	458e      	cmp	lr, r1
 8000b08:	d96a      	bls.n	8000be0 <__udivmoddi4+0x2b4>
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	4461      	add	r1, ip
 8000b0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b12:	fba0 9402 	umull	r9, r4, r0, r2
 8000b16:	eba1 010e 	sub.w	r1, r1, lr
 8000b1a:	42a1      	cmp	r1, r4
 8000b1c:	46c8      	mov	r8, r9
 8000b1e:	46a6      	mov	lr, r4
 8000b20:	d356      	bcc.n	8000bd0 <__udivmoddi4+0x2a4>
 8000b22:	d053      	beq.n	8000bcc <__udivmoddi4+0x2a0>
 8000b24:	b15d      	cbz	r5, 8000b3e <__udivmoddi4+0x212>
 8000b26:	ebb3 0208 	subs.w	r2, r3, r8
 8000b2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b32:	fa22 f306 	lsr.w	r3, r2, r6
 8000b36:	40f1      	lsrs	r1, r6
 8000b38:	431f      	orrs	r7, r3
 8000b3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b3e:	2600      	movs	r6, #0
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	f1c2 0320 	rsb	r3, r2, #32
 8000b4a:	40d8      	lsrs	r0, r3
 8000b4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b50:	fa21 f303 	lsr.w	r3, r1, r3
 8000b54:	4091      	lsls	r1, r2
 8000b56:	4301      	orrs	r1, r0
 8000b58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b64:	fb07 3610 	mls	r6, r7, r0, r3
 8000b68:	0c0b      	lsrs	r3, r1, #16
 8000b6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b72:	429e      	cmp	r6, r3
 8000b74:	fa04 f402 	lsl.w	r4, r4, r2
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x260>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b82:	d22f      	bcs.n	8000be4 <__udivmoddi4+0x2b8>
 8000b84:	429e      	cmp	r6, r3
 8000b86:	d92d      	bls.n	8000be4 <__udivmoddi4+0x2b8>
 8000b88:	3802      	subs	r0, #2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	1b9b      	subs	r3, r3, r6
 8000b8e:	b289      	uxth	r1, r1
 8000b90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b94:	fb07 3316 	mls	r3, r7, r6, r3
 8000b98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x28a>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bac:	d216      	bcs.n	8000bdc <__udivmoddi4+0x2b0>
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d914      	bls.n	8000bdc <__udivmoddi4+0x2b0>
 8000bb2:	3e02      	subs	r6, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	1ac9      	subs	r1, r1, r3
 8000bb8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bbc:	e738      	b.n	8000a30 <__udivmoddi4+0x104>
 8000bbe:	462e      	mov	r6, r5
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	e705      	b.n	80009d0 <__udivmoddi4+0xa4>
 8000bc4:	4606      	mov	r6, r0
 8000bc6:	e6e3      	b.n	8000990 <__udivmoddi4+0x64>
 8000bc8:	4618      	mov	r0, r3
 8000bca:	e6f8      	b.n	80009be <__udivmoddi4+0x92>
 8000bcc:	454b      	cmp	r3, r9
 8000bce:	d2a9      	bcs.n	8000b24 <__udivmoddi4+0x1f8>
 8000bd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bd4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bd8:	3801      	subs	r0, #1
 8000bda:	e7a3      	b.n	8000b24 <__udivmoddi4+0x1f8>
 8000bdc:	4646      	mov	r6, r8
 8000bde:	e7ea      	b.n	8000bb6 <__udivmoddi4+0x28a>
 8000be0:	4620      	mov	r0, r4
 8000be2:	e794      	b.n	8000b0e <__udivmoddi4+0x1e2>
 8000be4:	4640      	mov	r0, r8
 8000be6:	e7d1      	b.n	8000b8c <__udivmoddi4+0x260>
 8000be8:	46d0      	mov	r8, sl
 8000bea:	e77b      	b.n	8000ae4 <__udivmoddi4+0x1b8>
 8000bec:	3b02      	subs	r3, #2
 8000bee:	4461      	add	r1, ip
 8000bf0:	e732      	b.n	8000a58 <__udivmoddi4+0x12c>
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	e709      	b.n	8000a0a <__udivmoddi4+0xde>
 8000bf6:	4464      	add	r4, ip
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	e742      	b.n	8000a82 <__udivmoddi4+0x156>

08000bfc <__aeabi_idiv0>:
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <MX_GPIO_Init>:
     PB9   ------> LTDC_B7
     PE0   ------> FMC_NBL0
     PE1   ------> FMC_NBL1
*/
void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	; 0x38
 8000c04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
 8000c1a:	4bb2      	ldr	r3, [pc, #712]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4ab1      	ldr	r2, [pc, #708]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4baf      	ldr	r3, [pc, #700]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	623b      	str	r3, [r7, #32]
 8000c30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
 8000c36:	4bab      	ldr	r3, [pc, #684]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4aaa      	ldr	r2, [pc, #680]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c3c:	f043 0320 	orr.w	r3, r3, #32
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4ba8      	ldr	r3, [pc, #672]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0320 	and.w	r3, r3, #32
 8000c4a:	61fb      	str	r3, [r7, #28]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
 8000c52:	4ba4      	ldr	r3, [pc, #656]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4aa3      	ldr	r2, [pc, #652]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4ba1      	ldr	r3, [pc, #644]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c66:	61bb      	str	r3, [r7, #24]
 8000c68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	4b9d      	ldr	r3, [pc, #628]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a9c      	ldr	r2, [pc, #624]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b9a      	ldr	r3, [pc, #616]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b96      	ldr	r3, [pc, #600]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a95      	ldr	r2, [pc, #596]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b93      	ldr	r3, [pc, #588]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b8f      	ldr	r3, [pc, #572]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a8e      	ldr	r2, [pc, #568]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b8c      	ldr	r3, [pc, #560]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	4b88      	ldr	r3, [pc, #544]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a87      	ldr	r2, [pc, #540]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000cc8:	f043 0310 	orr.w	r3, r3, #16
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b85      	ldr	r3, [pc, #532]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0310 	and.w	r3, r3, #16
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b81      	ldr	r3, [pc, #516]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a80      	ldr	r2, [pc, #512]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b7e      	ldr	r3, [pc, #504]	; (8000ee4 <MX_GPIO_Init+0x2e4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2116      	movs	r1, #22
 8000cfa:	487b      	ldr	r0, [pc, #492]	; (8000ee8 <MX_GPIO_Init+0x2e8>)
 8000cfc:	f001 fedc 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	4879      	ldr	r0, [pc, #484]	; (8000eec <MX_GPIO_Init+0x2ec>)
 8000d06:	f001 fed7 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d10:	4877      	ldr	r0, [pc, #476]	; (8000ef0 <MX_GPIO_Init+0x2f0>)
 8000d12:	f001 fed1 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2104      	movs	r1, #4
 8000d1a:	4875      	ldr	r0, [pc, #468]	; (8000ef0 <MX_GPIO_Init+0x2f0>)
 8000d1c:	f001 fecc 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d26:	4873      	ldr	r0, [pc, #460]	; (8000ef4 <MX_GPIO_Init+0x2f4>)
 8000d28:	f001 fec6 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000d2c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3e:	230c      	movs	r3, #12
 8000d40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	486b      	ldr	r0, [pc, #428]	; (8000ef8 <MX_GPIO_Init+0x2f8>)
 8000d4a:	f001 fd09 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000d4e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000d60:	2305      	movs	r3, #5
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4863      	ldr	r0, [pc, #396]	; (8000ef8 <MX_GPIO_Init+0x2f8>)
 8000d6c:	f001 fcf8 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d82:	230e      	movs	r3, #14
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	485a      	ldr	r0, [pc, #360]	; (8000ef8 <MX_GPIO_Init+0x2f8>)
 8000d8e:	f001 fce7 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000d92:	2301      	movs	r3, #1
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000da2:	230c      	movs	r3, #12
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	484e      	ldr	r0, [pc, #312]	; (8000ee8 <MX_GPIO_Init+0x2e8>)
 8000dae:	f001 fcd7 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000db2:	2316      	movs	r3, #22
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4847      	ldr	r0, [pc, #284]	; (8000ee8 <MX_GPIO_Init+0x2e8>)
 8000dca:	f001 fcc9 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000dce:	f248 0307 	movw	r3, #32775	; 0x8007
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dd4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	4841      	ldr	r0, [pc, #260]	; (8000eec <MX_GPIO_Init+0x2ec>)
 8000de6:	f001 fcbb 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin;
 8000dea:	2318      	movs	r3, #24
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dfa:	230e      	movs	r3, #14
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4839      	ldr	r0, [pc, #228]	; (8000eec <MX_GPIO_Init+0x2ec>)
 8000e06:	f001 fcab 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e0a:	2340      	movs	r3, #64	; 0x40
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e1a:	2305      	movs	r3, #5
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4831      	ldr	r0, [pc, #196]	; (8000eec <MX_GPIO_Init+0x2ec>)
 8000e26:	f001 fc9b 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	482a      	ldr	r0, [pc, #168]	; (8000eec <MX_GPIO_Init+0x2ec>)
 8000e42:	f001 fc8d 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e46:	2320      	movs	r3, #32
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e4a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4823      	ldr	r0, [pc, #140]	; (8000ee8 <MX_GPIO_Init+0x2e8>)
 8000e5c:	f001 fc80 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000e60:	2303      	movs	r3, #3
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e70:	2309      	movs	r3, #9
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4820      	ldr	r0, [pc, #128]	; (8000efc <MX_GPIO_Init+0x2fc>)
 8000e7c:	f001 fc70 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e80:	2304      	movs	r3, #4
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	481a      	ldr	r0, [pc, #104]	; (8000efc <MX_GPIO_Init+0x2fc>)
 8000e94:	f001 fc64 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000e98:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eaa:	230c      	movs	r3, #12
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <MX_GPIO_Init+0x2f4>)
 8000eb6:	f001 fc53 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000eba:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ecc:	230c      	movs	r3, #12
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	480a      	ldr	r0, [pc, #40]	; (8000f00 <MX_GPIO_Init+0x300>)
 8000ed8:	f001 fc42 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000edc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ee0:	e010      	b.n	8000f04 <MX_GPIO_Init+0x304>
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020800 	.word	0x40020800
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	40020c00 	.word	0x40020c00
 8000ef4:	40021800 	.word	0x40021800
 8000ef8:	40021400 	.word	0x40021400
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40021000 	.word	0x40021000
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f12:	230e      	movs	r3, #14
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4871      	ldr	r0, [pc, #452]	; (80010e4 <MX_GPIO_Init+0x4e4>)
 8000f1e:	f001 fc1f 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000f22:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000f34:	230c      	movs	r3, #12
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4869      	ldr	r0, [pc, #420]	; (80010e4 <MX_GPIO_Init+0x4e4>)
 8000f40:	f001 fc0e 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000f44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	4862      	ldr	r0, [pc, #392]	; (80010e4 <MX_GPIO_Init+0x4e4>)
 8000f5a:	f001 fc01 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000f5e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f70:	230c      	movs	r3, #12
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	485b      	ldr	r0, [pc, #364]	; (80010e8 <MX_GPIO_Init+0x4e8>)
 8000f7c:	f001 fbf0 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000f80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f92:	4619      	mov	r1, r3
 8000f94:	4854      	ldr	r0, [pc, #336]	; (80010e8 <MX_GPIO_Init+0x4e8>)
 8000f96:	f001 fbe3 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000f9a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	484d      	ldr	r0, [pc, #308]	; (80010e8 <MX_GPIO_Init+0x4e8>)
 8000fb4:	f001 fbd4 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000fb8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fca:	230e      	movs	r3, #14
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4845      	ldr	r0, [pc, #276]	; (80010ec <MX_GPIO_Init+0x4ec>)
 8000fd6:	f001 fbc3 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8000fda:	23c0      	movs	r3, #192	; 0xc0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fea:	230e      	movs	r3, #14
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	483e      	ldr	r0, [pc, #248]	; (80010f0 <MX_GPIO_Init+0x4f0>)
 8000ff6:	f001 fbb3 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001000:	2312      	movs	r3, #18
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800100c:	2304      	movs	r3, #4
 800100e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	4619      	mov	r1, r3
 8001016:	4836      	ldr	r0, [pc, #216]	; (80010f0 <MX_GPIO_Init+0x4f0>)
 8001018:	f001 fba2 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800101c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001022:	2312      	movs	r3, #18
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800102e:	2304      	movs	r3, #4
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	482e      	ldr	r0, [pc, #184]	; (80010f4 <MX_GPIO_Init+0x4f4>)
 800103a:	f001 fb91 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800103e:	2304      	movs	r3, #4
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104a:	2302      	movs	r3, #2
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4824      	ldr	r0, [pc, #144]	; (80010e8 <MX_GPIO_Init+0x4e8>)
 8001056:	f001 fb83 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = G7_Pin;
 800105a:	2308      	movs	r3, #8
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800106a:	230e      	movs	r3, #14
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	481c      	ldr	r0, [pc, #112]	; (80010e8 <MX_GPIO_Init+0x4e8>)
 8001076:	f001 fb73 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800107a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800108c:	2309      	movs	r3, #9
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	4815      	ldr	r0, [pc, #84]	; (80010ec <MX_GPIO_Init+0x4ec>)
 8001098:	f001 fb62 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800109c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_GPIO_Init+0x4ec>)
 80010b6:	f001 fb53 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80010ba:	2360      	movs	r3, #96	; 0x60
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010ca:	230c      	movs	r3, #12
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	4619      	mov	r1, r3
 80010d4:	4803      	ldr	r0, [pc, #12]	; (80010e4 <MX_GPIO_Init+0x4e4>)
 80010d6:	f001 fb43 	bl	8002760 <HAL_GPIO_Init>

}
 80010da:	bf00      	nop
 80010dc:	3738      	adds	r7, #56	; 0x38
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40020c00 	.word	0x40020c00
 80010ec:	40021800 	.word	0x40021800
 80010f0:	40020800 	.word	0x40020800
 80010f4:	40020000 	.word	0x40020000

080010f8 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 80010fc:	bf00      	nop
 80010fe:	f000 f97f 	bl	8001400 <icm20948_who_am_i>
 8001102:	4603      	mov	r3, r0
 8001104:	f083 0301 	eor.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f7      	bne.n	80010fe <icm20948_init+0x6>

	icm20948_device_reset();
 800110e:	f000 f99c 	bl	800144a <icm20948_device_reset>
	icm20948_wakeup();
 8001112:	f000 f9b1 	bl	8001478 <icm20948_wakeup>

	icm20948_clock_source(1);
 8001116:	2001      	movs	r0, #1
 8001118:	f000 fa29 	bl	800156e <icm20948_clock_source>
	icm20948_odr_align_enable();
 800111c:	f000 fa40 	bl	80015a0 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 8001120:	f000 f9c4 	bl	80014ac <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8001124:	2000      	movs	r0, #0
 8001126:	f000 fa44 	bl	80015b2 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 800112a:	2000      	movs	r0, #0
 800112c:	f000 fa5e 	bl	80015ec <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8001130:	2000      	movs	r0, #0
 8001132:	f000 fa78 	bl	8001626 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8001136:	2000      	movs	r0, #0
 8001138:	f000 fa84 	bl	8001644 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 800113c:	f000 fab2 	bl	80016a4 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8001140:	f000 fb4c 	bl	80017dc <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 fc57 	bl	80019f8 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 800114a:	2003      	movs	r0, #3
 800114c:	f000 fc9e 	bl	8001a8c <icm20948_accel_full_scale_select>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <ak09916_init>:

void ak09916_init()
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8001158:	f000 f9bf 	bl	80014da <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 800115c:	f000 f9d4 	bl	8001508 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8001160:	2007      	movs	r0, #7
 8001162:	f000 f9eb 	bl	800153c <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8001166:	bf00      	nop
 8001168:	f000 f95d 	bl	8001426 <ak09916_who_am_i>
 800116c:	4603      	mov	r3, r0
 800116e:	f083 0301 	eor.w	r3, r3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f7      	bne.n	8001168 <ak09916_init+0x14>

	ak09916_soft_reset();
 8001178:	f000 f973 	bl	8001462 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 800117c:	2008      	movs	r0, #8
 800117e:	f000 fa7f 	bl	8001680 <ak09916_operation_mode_setting>
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}

08001186 <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 800118e:	2206      	movs	r2, #6
 8001190:	2133      	movs	r1, #51	; 0x33
 8001192:	2000      	movs	r0, #0
 8001194:	f000 fd42 	bl	8001c1c <read_multiple_icm20948_reg>
 8001198:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3301      	adds	r3, #1
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3302      	adds	r3, #2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3303      	adds	r3, #3
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	ee07 3a90 	vmov	s15, r3
 80011d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3304      	adds	r3, #4
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3305      	adds	r3, #5
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8001214:	2206      	movs	r2, #6
 8001216:	212d      	movs	r1, #45	; 0x2d
 8001218:	2000      	movs	r0, #0
 800121a:	f000 fcff 	bl	8001c1c <read_multiple_icm20948_reg>
 800121e:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3301      	adds	r3, #1
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b21b      	sxth	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b21b      	sxth	r3, r3
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3302      	adds	r3, #2
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b21a      	sxth	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3303      	adds	r3, #3
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21b      	sxth	r3, r3
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor; 
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3304      	adds	r3, #4
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3305      	adds	r3, #5
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21b      	sxth	r3, r3
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <icm20948_accel_read+0x90>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	edc3 7a02 	vstr	s15, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000180 	.word	0x20000180

080012a0 <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 80012a8:	2010      	movs	r0, #16
 80012aa:	f000 fd13 	bl	8001cd4 <read_single_ak09916_reg>
 80012ae:	4603      	mov	r3, r0
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	75fb      	strb	r3, [r7, #23]
	if(!drdy)	return false;
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <ak09916_mag_read+0x20>
 80012bc:	2300      	movs	r3, #0
 80012be:	e046      	b.n	800134e <ak09916_mag_read+0xae>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 80012c0:	2106      	movs	r1, #6
 80012c2:	2011      	movs	r0, #17
 80012c4:	f000 fd49 	bl	8001d5a <read_multiple_ak09916_reg>
 80012c8:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 80012ca:	2018      	movs	r0, #24
 80012cc:	f000 fd02 	bl	8001cd4 <read_single_ak09916_reg>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	73fb      	strb	r3, [r7, #15]
	if(hofl)	return false;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <ak09916_mag_read+0x42>
 80012de:	2300      	movs	r3, #0
 80012e0:	e035      	b.n	800134e <ak09916_mag_read+0xae>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	3301      	adds	r3, #1
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	3303      	adds	r3, #3
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21a      	sxth	r2, r3
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	3302      	adds	r3, #2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	3305      	adds	r3, #5
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b21a      	sxth	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	3304      	adds	r3, #4
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a02 	vstr	s15, [r3, #8]

	return true;
 800134c:	2301      	movs	r3, #1
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <ak09916_mag_read_uT>:
	data->y /= accel_scale_factor;
	data->z /= accel_scale_factor;
}

bool ak09916_mag_read_uT(axises* data)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	axises temp;
	bool new_data = ak09916_mag_read(&temp);
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff9b 	bl	80012a0 <ak09916_mag_read>
 800136a:	4603      	mov	r3, r0
 800136c:	75fb      	strb	r3, [r7, #23]
	if(!new_data)	return false;
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	f083 0301 	eor.w	r3, r3, #1
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <ak09916_mag_read_uT+0x26>
 800137a:	2300      	movs	r3, #0
 800137c:	e036      	b.n	80013ec <ak09916_mag_read_uT+0x94>

	data->x = (float)(temp.x * 0.15);
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff fa13 	bl	80007ac <__aeabi_f2d>
 8001386:	a31c      	add	r3, pc, #112	; (adr r3, 80013f8 <ak09916_mag_read_uT+0xa0>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7fe ff80 	bl	8000290 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fa60 	bl	800085c <__aeabi_d2f>
 800139c:	4602      	mov	r2, r0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	601a      	str	r2, [r3, #0]
	data->y = (float)(temp.y * 0.15);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fa01 	bl	80007ac <__aeabi_f2d>
 80013aa:	a313      	add	r3, pc, #76	; (adr r3, 80013f8 <ak09916_mag_read_uT+0xa0>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7fe ff6e 	bl	8000290 <__aeabi_dmul>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fa4e 	bl	800085c <__aeabi_d2f>
 80013c0:	4602      	mov	r2, r0
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	605a      	str	r2, [r3, #4]
	data->z = (float)(temp.z * 0.15);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f9ef 	bl	80007ac <__aeabi_f2d>
 80013ce:	a30a      	add	r3, pc, #40	; (adr r3, 80013f8 <ak09916_mag_read_uT+0xa0>)
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	f7fe ff5c 	bl	8000290 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fa3c 	bl	800085c <__aeabi_d2f>
 80013e4:	4602      	mov	r2, r0
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	609a      	str	r2, [r3, #8]

	return true;
 80013ea:	2301      	movs	r3, #1
}	
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	f3af 8000 	nop.w
 80013f8:	33333333 	.word	0x33333333
 80013fc:	3fc33333 	.word	0x3fc33333

08001400 <icm20948_who_am_i>:


/* Sub Functions */
bool icm20948_who_am_i()
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8001406:	2100      	movs	r1, #0
 8001408:	2000      	movs	r0, #0
 800140a:	f000 fbb7 	bl	8001b7c <read_single_icm20948_reg>
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2bea      	cmp	r3, #234	; 0xea
 8001416:	d101      	bne.n	800141c <icm20948_who_am_i+0x1c>
		return true;
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <icm20948_who_am_i+0x1e>
	else
		return false;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 800142c:	2001      	movs	r0, #1
 800142e:	f000 fc51 	bl	8001cd4 <read_single_ak09916_reg>
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b09      	cmp	r3, #9
 800143a:	d101      	bne.n	8001440 <ak09916_who_am_i+0x1a>
		return true;
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <ak09916_who_am_i+0x1c>
	else
		return false;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <icm20948_device_reset>:

void icm20948_device_reset()
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 800144e:	22c1      	movs	r2, #193	; 0xc1
 8001450:	2106      	movs	r1, #6
 8001452:	2000      	movs	r0, #0
 8001454:	f000 fbbe 	bl	8001bd4 <write_single_icm20948_reg>
	HAL_Delay(100);
 8001458:	2064      	movs	r0, #100	; 0x64
 800145a:	f001 f84b 	bl	80024f4 <HAL_Delay>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}

08001462 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8001466:	2101      	movs	r1, #1
 8001468:	2032      	movs	r0, #50	; 0x32
 800146a:	f000 fc54 	bl	8001d16 <write_single_ak09916_reg>
	HAL_Delay(100);
 800146e:	2064      	movs	r0, #100	; 0x64
 8001470:	f001 f840 	bl	80024f4 <HAL_Delay>
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 800147e:	2106      	movs	r1, #6
 8001480:	2000      	movs	r0, #0
 8001482:	f000 fb7b 	bl	8001b7c <read_single_icm20948_reg>
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001490:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	461a      	mov	r2, r3
 8001496:	2106      	movs	r1, #6
 8001498:	2000      	movs	r0, #0
 800149a:	f000 fb9b 	bl	8001bd4 <write_single_icm20948_reg>
	HAL_Delay(100);
 800149e:	2064      	movs	r0, #100	; 0x64
 80014a0:	f001 f828 	bl	80024f4 <HAL_Delay>
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80014b2:	2103      	movs	r1, #3
 80014b4:	2000      	movs	r0, #0
 80014b6:	f000 fb61 	bl	8001b7c <read_single_icm20948_reg>
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f043 0310 	orr.w	r3, r3, #16
 80014c4:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	461a      	mov	r2, r3
 80014ca:	2103      	movs	r1, #3
 80014cc:	2000      	movs	r0, #0
 80014ce:	f000 fb81 	bl	8001bd4 <write_single_icm20948_reg>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 80014e0:	2103      	movs	r1, #3
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 fb4a 	bl	8001b7c <read_single_icm20948_reg>
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f043 0302 	orr.w	r3, r3, #2
 80014f2:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	461a      	mov	r2, r3
 80014f8:	2103      	movs	r1, #3
 80014fa:	2000      	movs	r0, #0
 80014fc:	f000 fb6a 	bl	8001bd4 <write_single_icm20948_reg>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 800150e:	2103      	movs	r1, #3
 8001510:	2000      	movs	r0, #0
 8001512:	f000 fb33 	bl	8001b7c <read_single_icm20948_reg>
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f043 0320 	orr.w	r3, r3, #32
 8001520:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	461a      	mov	r2, r3
 8001526:	2103      	movs	r1, #3
 8001528:	2000      	movs	r0, #0
 800152a:	f000 fb53 	bl	8001bd4 <write_single_icm20948_reg>
	HAL_Delay(100);
 800152e:	2064      	movs	r0, #100	; 0x64
 8001530:	f000 ffe0 	bl	80024f4 <HAL_Delay>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8001546:	2101      	movs	r1, #1
 8001548:	2030      	movs	r0, #48	; 0x30
 800154a:	f000 fb17 	bl	8001b7c <read_single_icm20948_reg>
 800154e:	4603      	mov	r3, r0
 8001550:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	4313      	orrs	r3, r2
 8001558:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	461a      	mov	r2, r3
 800155e:	2101      	movs	r1, #1
 8001560:	2030      	movs	r0, #48	; 0x30
 8001562:	f000 fb37 	bl	8001bd4 <write_single_icm20948_reg>
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8001578:	2106      	movs	r1, #6
 800157a:	2000      	movs	r0, #0
 800157c:	f000 fafe 	bl	8001b7c <read_single_icm20948_reg>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	4313      	orrs	r3, r2
 800158a:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	461a      	mov	r2, r3
 8001590:	2106      	movs	r1, #6
 8001592:	2000      	movs	r0, #0
 8001594:	f000 fb1e 	bl	8001bd4 <write_single_icm20948_reg>
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2109      	movs	r1, #9
 80015a8:	2020      	movs	r0, #32
 80015aa:	f000 fb13 	bl	8001bd4 <write_single_icm20948_reg>
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 80015bc:	2101      	movs	r1, #1
 80015be:	2020      	movs	r0, #32
 80015c0:	f000 fadc 	bl	8001b7c <read_single_icm20948_reg>
 80015c4:	4603      	mov	r3, r0
 80015c6:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	b25a      	sxtb	r2, r3
 80015ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	461a      	mov	r2, r3
 80015dc:	2101      	movs	r1, #1
 80015de:	2020      	movs	r0, #32
 80015e0:	f000 faf8 	bl	8001bd4 <write_single_icm20948_reg>
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80015f6:	2114      	movs	r1, #20
 80015f8:	2020      	movs	r0, #32
 80015fa:	f000 fabf 	bl	8001b7c <read_single_icm20948_reg>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	b25a      	sxtb	r2, r3
 8001608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160c:	4313      	orrs	r3, r2
 800160e:	b25b      	sxtb	r3, r3
 8001610:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	461a      	mov	r2, r3
 8001616:	2101      	movs	r1, #1
 8001618:	2020      	movs	r0, #32
 800161a:	f000 fadb 	bl	8001bd4 <write_single_icm20948_reg>
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	461a      	mov	r2, r3
 8001634:	2100      	movs	r1, #0
 8001636:	2020      	movs	r0, #32
 8001638:	f000 facc 	bl	8001bd4 <write_single_icm20948_reg>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	b29b      	uxth	r3, r3
 8001654:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	461a      	mov	r2, r3
 8001664:	2110      	movs	r1, #16
 8001666:	2020      	movs	r0, #32
 8001668:	f000 fab4 	bl	8001bd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 800166c:	7bbb      	ldrb	r3, [r7, #14]
 800166e:	461a      	mov	r2, r3
 8001670:	2111      	movs	r1, #17
 8001672:	2020      	movs	r0, #32
 8001674:	f000 faae 	bl	8001bd4 <write_single_icm20948_reg>
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	4619      	mov	r1, r3
 800168e:	2031      	movs	r0, #49	; 0x31
 8001690:	f000 fb41 	bl	8001d16 <write_single_ak09916_reg>
	HAL_Delay(100);
 8001694:	2064      	movs	r0, #100	; 0x64
 8001696:	f000 ff2d 	bl	80024f4 <HAL_Delay>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	2300      	movs	r3, #0
 80016bc:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
 80016c2:	e031      	b.n	8001728 <icm20948_gyro_calibration+0x84>
	{
		icm20948_gyro_read(&temp);
 80016c4:	f107 0318 	add.w	r3, r7, #24
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fd5c 	bl	8001186 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80016dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016e4:	ee17 3a90 	vmov	r3, s15
 80016e8:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80016f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001700:	ee17 3a90 	vmov	r3, s15
 8001704:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	ee07 3a90 	vmov	s15, r3
 800170c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001710:	edd7 7a08 	vldr	s15, [r7, #32]
 8001714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800171c:	ee17 3a90 	vmov	r3, s15
 8001720:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 100; i++)
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	3301      	adds	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	2b63      	cmp	r3, #99	; 0x63
 800172c:	ddca      	ble.n	80016c4 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4a29      	ldr	r2, [pc, #164]	; (80017d8 <icm20948_gyro_calibration+0x134>)
 8001732:	fb82 1203 	smull	r1, r2, r2, r3
 8001736:	1152      	asrs	r2, r2, #5
 8001738:	17db      	asrs	r3, r3, #31
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 100;
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4a25      	ldr	r2, [pc, #148]	; (80017d8 <icm20948_gyro_calibration+0x134>)
 8001742:	fb82 1203 	smull	r1, r2, r2, r3
 8001746:	1152      	asrs	r2, r2, #5
 8001748:	17db      	asrs	r3, r3, #31
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 100;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <icm20948_gyro_calibration+0x134>)
 8001752:	fb82 1203 	smull	r1, r2, r2, r3
 8001756:	1152      	asrs	r2, r2, #5
 8001758:	17db      	asrs	r3, r3, #31
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	425b      	negs	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	da00      	bge.n	8001768 <icm20948_gyro_calibration+0xc4>
 8001766:	3303      	adds	r3, #3
 8001768:	109b      	asrs	r3, r3, #2
 800176a:	121b      	asrs	r3, r3, #8
 800176c:	b2db      	uxtb	r3, r3
 800176e:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	425b      	negs	r3, r3
 8001774:	2b00      	cmp	r3, #0
 8001776:	da00      	bge.n	800177a <icm20948_gyro_calibration+0xd6>
 8001778:	3303      	adds	r3, #3
 800177a:	109b      	asrs	r3, r3, #2
 800177c:	b2db      	uxtb	r3, r3
 800177e:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	425b      	negs	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	da00      	bge.n	800178a <icm20948_gyro_calibration+0xe6>
 8001788:	3303      	adds	r3, #3
 800178a:	109b      	asrs	r3, r3, #2
 800178c:	121b      	asrs	r3, r3, #8
 800178e:	b2db      	uxtb	r3, r3
 8001790:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	425b      	negs	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	da00      	bge.n	800179c <icm20948_gyro_calibration+0xf8>
 800179a:	3303      	adds	r3, #3
 800179c:	109b      	asrs	r3, r3, #2
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	425b      	negs	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da00      	bge.n	80017ac <icm20948_gyro_calibration+0x108>
 80017aa:	3303      	adds	r3, #3
 80017ac:	109b      	asrs	r3, r3, #2
 80017ae:	121b      	asrs	r3, r3, #8
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	425b      	negs	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	da00      	bge.n	80017be <icm20948_gyro_calibration+0x11a>
 80017bc:	3303      	adds	r3, #3
 80017be:	109b      	asrs	r3, r3, #2
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 80017c4:	1d3a      	adds	r2, r7, #4
 80017c6:	2306      	movs	r3, #6
 80017c8:	2103      	movs	r1, #3
 80017ca:	2020      	movs	r0, #32
 80017cc:	f000 fa56 	bl	8001c7c <write_multiple_icm20948_reg>
}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	51eb851f 	.word	0x51eb851f

080017dc <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 80017e2:	f107 0318 	add.w	r3, r7, #24
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	2300      	movs	r3, #0
 8001800:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8001802:	2300      	movs	r3, #0
 8001804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001806:	e031      	b.n	800186c <icm20948_accel_calibration+0x90>
	{
		icm20948_accel_read(&temp);
 8001808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fcfd 	bl	800120c <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001824:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001828:	ee17 3a90 	vmov	r3, s15
 800182c:	61bb      	str	r3, [r7, #24]
		accel_bias[1] += temp.y;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	ee07 3a90 	vmov	s15, r3
 8001834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001838:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800183c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001844:	ee17 3a90 	vmov	r3, s15
 8001848:	61fb      	str	r3, [r7, #28]
		accel_bias[2] += temp.z;
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001854:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001860:	ee17 3a90 	vmov	r3, s15
 8001864:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 100; i++)
 8001866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001868:	3301      	adds	r3, #1
 800186a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800186c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800186e:	2b63      	cmp	r3, #99	; 0x63
 8001870:	ddca      	ble.n	8001808 <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4a5e      	ldr	r2, [pc, #376]	; (80019f0 <icm20948_accel_calibration+0x214>)
 8001876:	fb82 1203 	smull	r1, r2, r2, r3
 800187a:	1152      	asrs	r2, r2, #5
 800187c:	17db      	asrs	r3, r3, #31
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	61bb      	str	r3, [r7, #24]
	accel_bias[1] /= 100;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	4a5a      	ldr	r2, [pc, #360]	; (80019f0 <icm20948_accel_calibration+0x214>)
 8001886:	fb82 1203 	smull	r1, r2, r2, r3
 800188a:	1152      	asrs	r2, r2, #5
 800188c:	17db      	asrs	r3, r3, #31
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	61fb      	str	r3, [r7, #28]
	accel_bias[2] /= 100;
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	4a56      	ldr	r2, [pc, #344]	; (80019f0 <icm20948_accel_calibration+0x214>)
 8001896:	fb82 1203 	smull	r1, r2, r2, r3
 800189a:	1152      	asrs	r2, r2, #5
 800189c:	17db      	asrs	r3, r3, #31
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	623b      	str	r3, [r7, #32]

	uint8_t mask_bit[3] = {0, 0, 0};
 80018a2:	4a54      	ldr	r2, [pc, #336]	; (80019f4 <icm20948_accel_calibration+0x218>)
 80018a4:	463b      	mov	r3, r7
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	4611      	mov	r1, r2
 80018aa:	8019      	strh	r1, [r3, #0]
 80018ac:	3302      	adds	r3, #2
 80018ae:	0c12      	lsrs	r2, r2, #16
 80018b0:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 80018b2:	2202      	movs	r2, #2
 80018b4:	2114      	movs	r1, #20
 80018b6:	2010      	movs	r0, #16
 80018b8:	f000 f9b0 	bl	8001c1c <read_multiple_icm20948_reg>
 80018bc:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 80018be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018c6:	3201      	adds	r2, #1
 80018c8:	7812      	ldrb	r2, [r2, #0]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
	mask_bit[0] = temp2[1] & 0x01;
 80018ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d0:	3301      	adds	r3, #1
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	703b      	strb	r3, [r7, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 80018dc:	2202      	movs	r2, #2
 80018de:	2117      	movs	r1, #23
 80018e0:	2010      	movs	r0, #16
 80018e2:	f000 f99b 	bl	8001c1c <read_multiple_icm20948_reg>
 80018e6:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 80018e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018f0:	3201      	adds	r2, #1
 80018f2:	7812      	ldrb	r2, [r2, #0]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
	mask_bit[1] = temp3[1] & 0x01;
 80018f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fa:	3301      	adds	r3, #1
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	b2db      	uxtb	r3, r3
 8001904:	707b      	strb	r3, [r7, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8001906:	2202      	movs	r2, #2
 8001908:	211a      	movs	r1, #26
 800190a:	2010      	movs	r0, #16
 800190c:	f000 f986 	bl	8001c1c <read_multiple_icm20948_reg>
 8001910:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8001912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800191a:	3201      	adds	r2, #1
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	4313      	orrs	r3, r2
 8001920:	617b      	str	r3, [r7, #20]
	mask_bit[2] = temp4[1] & 0x01;
 8001922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001924:	3301      	adds	r3, #1
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	70bb      	strb	r3, [r7, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	da00      	bge.n	800193a <icm20948_accel_calibration+0x15e>
 8001938:	3307      	adds	r3, #7
 800193a:	10db      	asrs	r3, r3, #3
 800193c:	425b      	negs	r3, r3
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	2b00      	cmp	r3, #0
 8001948:	da00      	bge.n	800194c <icm20948_accel_calibration+0x170>
 800194a:	3307      	adds	r3, #7
 800194c:	10db      	asrs	r3, r3, #3
 800194e:	425b      	negs	r3, r3
 8001950:	4413      	add	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	2b00      	cmp	r3, #0
 800195a:	da00      	bge.n	800195e <icm20948_accel_calibration+0x182>
 800195c:	3307      	adds	r3, #7
 800195e:	10db      	asrs	r3, r3, #3
 8001960:	425b      	negs	r3, r3
 8001962:	4413      	add	r3, r2
 8001964:	617b      	str	r3, [r7, #20]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	121b      	asrs	r3, r3, #8
 800196a:	b2db      	uxtb	r3, r3
 800196c:	713b      	strb	r3, [r7, #4]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	b2db      	uxtb	r3, r3
 8001978:	717b      	strb	r3, [r7, #5]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 800197a:	797a      	ldrb	r2, [r7, #5]
 800197c:	783b      	ldrb	r3, [r7, #0]
 800197e:	4313      	orrs	r3, r2
 8001980:	b2db      	uxtb	r3, r3
 8001982:	717b      	strb	r3, [r7, #5]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	121b      	asrs	r3, r3, #8
 8001988:	b2db      	uxtb	r3, r3
 800198a:	71bb      	strb	r3, [r7, #6]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	b2db      	uxtb	r3, r3
 8001996:	71fb      	strb	r3, [r7, #7]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8001998:	79fa      	ldrb	r2, [r7, #7]
 800199a:	787b      	ldrb	r3, [r7, #1]
 800199c:	4313      	orrs	r3, r2
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	71fb      	strb	r3, [r7, #7]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	121b      	asrs	r3, r3, #8
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	723b      	strb	r3, [r7, #8]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	727b      	strb	r3, [r7, #9]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 80019b6:	7a7a      	ldrb	r2, [r7, #9]
 80019b8:	78bb      	ldrb	r3, [r7, #2]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 80019c0:	1d3a      	adds	r2, r7, #4
 80019c2:	2302      	movs	r3, #2
 80019c4:	2114      	movs	r1, #20
 80019c6:	2010      	movs	r0, #16
 80019c8:	f000 f958 	bl	8001c7c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	1c9a      	adds	r2, r3, #2
 80019d0:	2302      	movs	r3, #2
 80019d2:	2117      	movs	r1, #23
 80019d4:	2010      	movs	r0, #16
 80019d6:	f000 f951 	bl	8001c7c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	1d1a      	adds	r2, r3, #4
 80019de:	2302      	movs	r3, #2
 80019e0:	211a      	movs	r1, #26
 80019e2:	2010      	movs	r0, #16
 80019e4:	f000 f94a 	bl	8001c7c <write_multiple_icm20948_reg>
}
 80019e8:	bf00      	nop
 80019ea:	3740      	adds	r7, #64	; 0x40
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	51eb851f 	.word	0x51eb851f
 80019f4:	0800abf4 	.word	0x0800abf4

080019f8 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001a02:	2101      	movs	r1, #1
 8001a04:	2020      	movs	r0, #32
 8001a06:	f000 f8b9 	bl	8001b7c <read_single_icm20948_reg>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d827      	bhi.n	8001a64 <icm20948_gyro_full_scale_select+0x6c>
 8001a14:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <icm20948_gyro_full_scale_select+0x24>)
 8001a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1a:	bf00      	nop
 8001a1c:	08001a2d 	.word	0x08001a2d
 8001a20:	08001a35 	.word	0x08001a35
 8001a24:	08001a45 	.word	0x08001a45
 8001a28:	08001a55 	.word	0x08001a55
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <icm20948_gyro_full_scale_select+0x80>)
 8001a2e:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <icm20948_gyro_full_scale_select+0x84>)
 8001a30:	601a      	str	r2, [r3, #0]
			break;
 8001a32:	e017      	b.n	8001a64 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <icm20948_gyro_full_scale_select+0x80>)
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <icm20948_gyro_full_scale_select+0x88>)
 8001a40:	601a      	str	r2, [r3, #0]
			break;
 8001a42:	e00f      	b.n	8001a64 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <icm20948_gyro_full_scale_select+0x80>)
 8001a4e:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <icm20948_gyro_full_scale_select+0x8c>)
 8001a50:	601a      	str	r2, [r3, #0]
			break;
 8001a52:	e007      	b.n	8001a64 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	f043 0306 	orr.w	r3, r3, #6
 8001a5a:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <icm20948_gyro_full_scale_select+0x80>)
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <icm20948_gyro_full_scale_select+0x90>)
 8001a60:	601a      	str	r2, [r3, #0]
			break;
 8001a62:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	461a      	mov	r2, r3
 8001a68:	2101      	movs	r1, #1
 8001a6a:	2020      	movs	r0, #32
 8001a6c:	f000 f8b2 	bl	8001bd4 <write_single_icm20948_reg>
}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000017c 	.word	0x2000017c
 8001a7c:	43030000 	.word	0x43030000
 8001a80:	42830000 	.word	0x42830000
 8001a84:	42033333 	.word	0x42033333
 8001a88:	41833333 	.word	0x41833333

08001a8c <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8001a96:	2114      	movs	r1, #20
 8001a98:	2020      	movs	r0, #32
 8001a9a:	f000 f86f 	bl	8001b7c <read_single_icm20948_reg>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d82b      	bhi.n	8001b00 <icm20948_accel_full_scale_select+0x74>
 8001aa8:	a201      	add	r2, pc, #4	; (adr r2, 8001ab0 <icm20948_accel_full_scale_select+0x24>)
 8001aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aae:	bf00      	nop
 8001ab0:	08001ac1 	.word	0x08001ac1
 8001ab4:	08001acb 	.word	0x08001acb
 8001ab8:	08001add 	.word	0x08001add
 8001abc:	08001aef 	.word	0x08001aef
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <icm20948_accel_full_scale_select+0x88>)
 8001ac2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001ac6:	601a      	str	r2, [r3, #0]
			break;
 8001ac8:	e01a      	b.n	8001b00 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <icm20948_accel_full_scale_select+0x88>)
 8001ad4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001ad8:	601a      	str	r2, [r3, #0]
			break;
 8001ada:	e011      	b.n	8001b00 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <icm20948_accel_full_scale_select+0x88>)
 8001ae6:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001aea:	601a      	str	r2, [r3, #0]
			break;
 8001aec:	e008      	b.n	8001b00 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	f043 0306 	orr.w	r3, r3, #6
 8001af4:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <icm20948_accel_full_scale_select+0x88>)
 8001af8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001afc:	601a      	str	r2, [r3, #0]
			break;
 8001afe:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	461a      	mov	r2, r3
 8001b04:	2114      	movs	r1, #20
 8001b06:	2020      	movs	r0, #32
 8001b08:	f000 f864 	bl	8001bd4 <write_single_icm20948_reg>
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000180 	.word	0x20000180

08001b18 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2104      	movs	r1, #4
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <cs_high+0x14>)
 8001b22:	f000 ffc9 	bl	8002ab8 <HAL_GPIO_WritePin>
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40020c00 	.word	0x40020c00

08001b30 <cs_low>:

static void cs_low()
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2104      	movs	r1, #4
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <cs_low+0x14>)
 8001b3a:	f000 ffbd 	bl	8002ab8 <HAL_GPIO_WritePin>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40020c00 	.word	0x40020c00

08001b48 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001b52:	237f      	movs	r3, #127	; 0x7f
 8001b54:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	737b      	strb	r3, [r7, #13]

	cs_low();
 8001b5a:	f7ff ffe9 	bl	8001b30 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8001b5e:	f107 010c 	add.w	r1, r7, #12
 8001b62:	230a      	movs	r3, #10
 8001b64:	2202      	movs	r2, #2
 8001b66:	4804      	ldr	r0, [pc, #16]	; (8001b78 <select_user_bank+0x30>)
 8001b68:	f002 ff5d 	bl	8004a26 <HAL_SPI_Transmit>
	cs_high();
 8001b6c:	f7ff ffd4 	bl	8001b18 <cs_high>
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000648 	.word	0x20000648

08001b7c <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	460a      	mov	r2, r1
 8001b86:	71fb      	strb	r3, [r7, #7]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8001b8c:	79bb      	ldrb	r3, [r7, #6]
 8001b8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ffd5 	bl	8001b48 <select_user_bank>

	cs_low();
 8001b9e:	f7ff ffc7 	bl	8001b30 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001ba2:	f107 010f 	add.w	r1, r7, #15
 8001ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001baa:	2201      	movs	r2, #1
 8001bac:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <read_single_icm20948_reg+0x54>)
 8001bae:	f002 ff3a 	bl	8004a26 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8001bb2:	f107 010e 	add.w	r1, r7, #14
 8001bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bba:	2201      	movs	r2, #1
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <read_single_icm20948_reg+0x54>)
 8001bbe:	f003 f86e 	bl	8004c9e <HAL_SPI_Receive>
	cs_high();
 8001bc2:	f7ff ffa9 	bl	8001b18 <cs_high>

	return reg_val;
 8001bc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000648 	.word	0x20000648

08001bd4 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
 8001bde:	460b      	mov	r3, r1
 8001be0:	71bb      	strb	r3, [r7, #6]
 8001be2:	4613      	mov	r3, r2
 8001be4:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8001be6:	79bb      	ldrb	r3, [r7, #6]
 8001be8:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8001bea:	797b      	ldrb	r3, [r7, #5]
 8001bec:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ffa9 	bl	8001b48 <select_user_bank>

	cs_low();
 8001bf6:	f7ff ff9b 	bl	8001b30 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8001bfa:	f107 010c 	add.w	r1, r7, #12
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	2202      	movs	r2, #2
 8001c04:	4804      	ldr	r0, [pc, #16]	; (8001c18 <write_single_icm20948_reg+0x44>)
 8001c06:	f002 ff0e 	bl	8004a26 <HAL_SPI_Transmit>
	cs_high();
 8001c0a:	f7ff ff85 	bl	8001b18 <cs_high>
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000648 	.word	0x20000648

08001c1c <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
 8001c26:	460b      	mov	r3, r1
 8001c28:	71bb      	strb	r3, [r7, #6]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 8001c2e:	79bb      	ldrb	r3, [r7, #6]
 8001c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff84 	bl	8001b48 <select_user_bank>

	cs_low();
 8001c40:	f7ff ff76 	bl	8001b30 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001c44:	f107 010f 	add.w	r1, r7, #15
 8001c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	4809      	ldr	r0, [pc, #36]	; (8001c74 <read_multiple_icm20948_reg+0x58>)
 8001c50:	f002 fee9 	bl	8004a26 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8001c54:	797b      	ldrb	r3, [r7, #5]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5c:	4906      	ldr	r1, [pc, #24]	; (8001c78 <read_multiple_icm20948_reg+0x5c>)
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <read_multiple_icm20948_reg+0x58>)
 8001c60:	f003 f81d 	bl	8004c9e <HAL_SPI_Receive>
	cs_high();
 8001c64:	f7ff ff58 	bl	8001b18 <cs_high>

	return reg_val;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <read_multiple_icm20948_reg+0x5c>)
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000648 	.word	0x20000648
 8001c78:	20000184 	.word	0x20000184

08001c7c <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	603a      	str	r2, [r7, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	71bb      	strb	r3, [r7, #6]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 8001c92:	79bb      	ldrb	r3, [r7, #6]
 8001c94:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff55 	bl	8001b48 <select_user_bank>

	cs_low();
 8001c9e:	f7ff ff47 	bl	8001b30 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8001ca2:	f107 010f 	add.w	r1, r7, #15
 8001ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001caa:	2201      	movs	r2, #1
 8001cac:	4808      	ldr	r0, [pc, #32]	; (8001cd0 <write_multiple_icm20948_reg+0x54>)
 8001cae:	f002 feba 	bl	8004a26 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8001cb2:	797b      	ldrb	r3, [r7, #5]
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cba:	6839      	ldr	r1, [r7, #0]
 8001cbc:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <write_multiple_icm20948_reg+0x54>)
 8001cbe:	f002 feb2 	bl	8004a26 <HAL_SPI_Transmit>
	cs_high();
 8001cc2:	f7ff ff29 	bl	8001b18 <cs_high>
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000648 	.word	0x20000648

08001cd4 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8001cde:	228c      	movs	r2, #140	; 0x8c
 8001ce0:	2103      	movs	r1, #3
 8001ce2:	2030      	movs	r0, #48	; 0x30
 8001ce4:	f7ff ff76 	bl	8001bd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	461a      	mov	r2, r3
 8001cec:	2104      	movs	r1, #4
 8001cee:	2030      	movs	r0, #48	; 0x30
 8001cf0:	f7ff ff70 	bl	8001bd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001cf4:	2281      	movs	r2, #129	; 0x81
 8001cf6:	2105      	movs	r1, #5
 8001cf8:	2030      	movs	r0, #48	; 0x30
 8001cfa:	f7ff ff6b 	bl	8001bd4 <write_single_icm20948_reg>

	HAL_Delay(1);
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f000 fbf8 	bl	80024f4 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8001d04:	213b      	movs	r1, #59	; 0x3b
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff ff38 	bl	8001b7c <read_single_icm20948_reg>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	460a      	mov	r2, r1
 8001d20:	71fb      	strb	r3, [r7, #7]
 8001d22:	4613      	mov	r3, r2
 8001d24:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8001d26:	220c      	movs	r2, #12
 8001d28:	2103      	movs	r1, #3
 8001d2a:	2030      	movs	r0, #48	; 0x30
 8001d2c:	f7ff ff52 	bl	8001bd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	461a      	mov	r2, r3
 8001d34:	2104      	movs	r1, #4
 8001d36:	2030      	movs	r0, #48	; 0x30
 8001d38:	f7ff ff4c 	bl	8001bd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8001d3c:	79bb      	ldrb	r3, [r7, #6]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2106      	movs	r1, #6
 8001d42:	2030      	movs	r0, #48	; 0x30
 8001d44:	f7ff ff46 	bl	8001bd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001d48:	2281      	movs	r2, #129	; 0x81
 8001d4a:	2105      	movs	r1, #5
 8001d4c:	2030      	movs	r0, #48	; 0x30
 8001d4e:	f7ff ff41 	bl	8001bd4 <write_single_icm20948_reg>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	460a      	mov	r2, r1
 8001d64:	71fb      	strb	r3, [r7, #7]
 8001d66:	4613      	mov	r3, r2
 8001d68:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8001d6a:	228c      	movs	r2, #140	; 0x8c
 8001d6c:	2103      	movs	r1, #3
 8001d6e:	2030      	movs	r0, #48	; 0x30
 8001d70:	f7ff ff30 	bl	8001bd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	461a      	mov	r2, r3
 8001d78:	2104      	movs	r1, #4
 8001d7a:	2030      	movs	r0, #48	; 0x30
 8001d7c:	f7ff ff2a 	bl	8001bd4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8001d80:	79bb      	ldrb	r3, [r7, #6]
 8001d82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	2105      	movs	r1, #5
 8001d8c:	2030      	movs	r0, #48	; 0x30
 8001d8e:	f7ff ff21 	bl	8001bd4 <write_single_icm20948_reg>

	HAL_Delay(1);
 8001d92:	2001      	movs	r0, #1
 8001d94:	f000 fbae 	bl	80024f4 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 8001d98:	79bb      	ldrb	r3, [r7, #6]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	213b      	movs	r1, #59	; 0x3b
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f7ff ff3c 	bl	8001c1c <read_multiple_icm20948_reg>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db8:	f000 fb2a 	bl	8002410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbc:	f000 f86c 	bl	8001e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc0:	f7fe ff1e 	bl	8000c00 <MX_GPIO_Init>
  MX_SPI3_Init();
 8001dc4:	f000 f8d8 	bl	8001f78 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001dc8:	f000 fa86 	bl	80022d8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001dcc:	f007 f9dc 	bl	8009188 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  icm20948_init();
 8001dd0:	f7ff f992 	bl	80010f8 <icm20948_init>
  ak09916_init();
 8001dd4:	f7ff f9be 	bl	8001154 <ak09916_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  ak09916_mag_read_uT(&my_mag);
 8001ddc:	482a      	ldr	r0, [pc, #168]	; (8001e88 <main+0xd8>)
 8001dde:	f7ff fabb 	bl	8001358 <ak09916_mag_read_uT>

	  if(i < 100)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b63      	cmp	r3, #99	; 0x63
 8001de6:	dc0b      	bgt.n	8001e00 <main+0x50>
	  {
		  buffer[i] = my_mag;
 8001de8:	4928      	ldr	r1, [pc, #160]	; (8001e8c <main+0xdc>)
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	4a24      	ldr	r2, [pc, #144]	; (8001e88 <main+0xd8>)
 8001df8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001dfe:	e006      	b.n	8001e0e <main+0x5e>
	  }
	  else
	  {
		  i = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	607b      	str	r3, [r7, #4]
		  buffer[0] = my_mag;
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <main+0xdc>)
 8001e06:	4a20      	ldr	r2, [pc, #128]	; (8001e88 <main+0xd8>)
 8001e08:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  }

	  if (my_mag.x != 0 || my_mag.y != 0 || my_mag.z != 0)
 8001e0e:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <main+0xd8>)
 8001e10:	edd3 7a00 	vldr	s15, [r3]
 8001e14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	d10f      	bne.n	8001e3e <main+0x8e>
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <main+0xd8>)
 8001e20:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	d107      	bne.n	8001e3e <main+0x8e>
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <main+0xd8>)
 8001e30:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3c:	d020      	beq.n	8001e80 <main+0xd0>
      {
		  printf("Non-zero value detected\n");
 8001e3e:	4814      	ldr	r0, [pc, #80]	; (8001e90 <main+0xe0>)
 8001e40:	f007 ff4e 	bl	8009ce0 <puts>
		  printf("x: %f\ny: %f\nz: %f\n", my_mag.x, my_mag.y, my_mag.z);
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <main+0xd8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fcaf 	bl	80007ac <__aeabi_f2d>
 8001e4e:	4680      	mov	r8, r0
 8001e50:	4689      	mov	r9, r1
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <main+0xd8>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fca8 	bl	80007ac <__aeabi_f2d>
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	460d      	mov	r5, r1
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <main+0xd8>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fca1 	bl	80007ac <__aeabi_f2d>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e72:	e9cd 4500 	strd	r4, r5, [sp]
 8001e76:	4642      	mov	r2, r8
 8001e78:	464b      	mov	r3, r9
 8001e7a:	4806      	ldr	r0, [pc, #24]	; (8001e94 <main+0xe4>)
 8001e7c:	f007 feaa 	bl	8009bd4 <iprintf>
      }

	  i++;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3301      	adds	r3, #1
 8001e84:	607b      	str	r3, [r7, #4]
	  ak09916_mag_read_uT(&my_mag);
 8001e86:	e7a9      	b.n	8001ddc <main+0x2c>
 8001e88:	2000018c 	.word	0x2000018c
 8001e8c:	20000198 	.word	0x20000198
 8001e90:	0800abf8 	.word	0x0800abf8
 8001e94:	0800ac10 	.word	0x0800ac10

08001e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b094      	sub	sp, #80	; 0x50
 8001e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e9e:	f107 0320 	add.w	r3, r7, #32
 8001ea2:	2230      	movs	r2, #48	; 0x30
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f007 fe8c 	bl	8009bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <SystemClock_Config+0xcc>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	4a27      	ldr	r2, [pc, #156]	; (8001f64 <SystemClock_Config+0xcc>)
 8001ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eca:	6413      	str	r3, [r2, #64]	; 0x40
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <SystemClock_Config+0xcc>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <SystemClock_Config+0xd0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ee4:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <SystemClock_Config+0xd0>)
 8001ee6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <SystemClock_Config+0xd0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001efc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f02:	2302      	movs	r3, #2
 8001f04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001f10:	2348      	movs	r3, #72	; 0x48
 8001f12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f14:	2302      	movs	r3, #2
 8001f16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f1c:	f107 0320 	add.w	r3, r7, #32
 8001f20:	4618      	mov	r0, r3
 8001f22:	f002 f85f 	bl	8003fe4 <HAL_RCC_OscConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f2c:	f000 f81e 	bl	8001f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f30:	230f      	movs	r3, #15
 8001f32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f34:	2302      	movs	r3, #2
 8001f36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 fac1 	bl	80044d4 <HAL_RCC_ClockConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f58:	f000 f808 	bl	8001f6c <Error_Handler>
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3750      	adds	r7, #80	; 0x50
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40007000 	.word	0x40007000

08001f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f70:	b672      	cpsid	i
}
 8001f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <Error_Handler+0x8>
	...

08001f78 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <MX_SPI3_Init+0x64>)
 8001f7e:	4a18      	ldr	r2, [pc, #96]	; (8001fe0 <MX_SPI3_Init+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <MX_SPI3_Init+0x64>)
 8001f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f88:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <MX_SPI3_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <MX_SPI3_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_SPI3_Init+0x64>)
 8001f98:	2202      	movs	r2, #2
 8001f9a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <MX_SPI3_Init+0x64>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <MX_SPI3_Init+0x64>)
 8001fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <MX_SPI3_Init+0x64>)
 8001fac:	2220      	movs	r2, #32
 8001fae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <MX_SPI3_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <MX_SPI3_Init+0x64>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <MX_SPI3_Init+0x64>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_SPI3_Init+0x64>)
 8001fc4:	220a      	movs	r2, #10
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <MX_SPI3_Init+0x64>)
 8001fca:	f002 fca3 	bl	8004914 <HAL_SPI_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001fd4:	f7ff ffca 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000648 	.word	0x20000648
 8001fe0:	40003c00 	.word	0x40003c00

08001fe4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <HAL_SPI_MspInit+0xc0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d14a      	bne.n	800209c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 8002010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 8002048:	f043 0308 	orr.w	r3, r3, #8
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PD6     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800205a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800205e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800206c:	2306      	movs	r3, #6
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4619      	mov	r1, r3
 8002076:	480d      	ldr	r0, [pc, #52]	; (80020ac <HAL_SPI_MspInit+0xc8>)
 8002078:	f000 fb72 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800207c:	2340      	movs	r3, #64	; 0x40
 800207e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800208c:	2305      	movs	r3, #5
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4619      	mov	r1, r3
 8002096:	4806      	ldr	r0, [pc, #24]	; (80020b0 <HAL_SPI_MspInit+0xcc>)
 8002098:	f000 fb62 	bl	8002760 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800209c:	bf00      	nop
 800209e:	3728      	adds	r7, #40	; 0x28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40003c00 	.word	0x40003c00
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020800 	.word	0x40020800
 80020b0:	40020c00 	.word	0x40020c00

080020b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_MspInit+0x4c>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <HAL_MspInit+0x4c>)
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_MspInit+0x4c>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_MspInit+0x4c>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <HAL_MspInit+0x4c>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_MspInit+0x4c>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020f2:	2007      	movs	r0, #7
 80020f4:	f000 faf2 	bl	80026dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800

08002104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <NMI_Handler+0x4>

0800210a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <HardFault_Handler+0x4>

08002110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <MemManage_Handler+0x4>

08002116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800211a:	e7fe      	b.n	800211a <BusFault_Handler+0x4>

0800211c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <UsageFault_Handler+0x4>

08002122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002150:	f000 f9b0 	bl	80024b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}

08002158 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <OTG_FS_IRQHandler+0x10>)
 800215e:	f000 fe14 	bl	8002d8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20001bcc 	.word	0x20001bcc

0800216c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	e00a      	b.n	8002194 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800217e:	f3af 8000 	nop.w
 8002182:	4601      	mov	r1, r0
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	60ba      	str	r2, [r7, #8]
 800218a:	b2ca      	uxtb	r2, r1
 800218c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	dbf0      	blt.n	800217e <_read+0x12>
	}

return len;
 800219c:	687b      	ldr	r3, [r7, #4]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e009      	b.n	80021cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	60ba      	str	r2, [r7, #8]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697a      	ldr	r2, [r7, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dbf1      	blt.n	80021b8 <_write+0x12>
	}
	return len;
 80021d4:	687b      	ldr	r3, [r7, #4]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_close>:

int _close(int file)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	return -1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002206:	605a      	str	r2, [r3, #4]
	return 0;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <_isatty>:

int _isatty(int file)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
	return 1;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
	return 0;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002250:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <_sbrk+0x5c>)
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <_sbrk+0x60>)
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <_sbrk+0x64>)
 8002266:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <_sbrk+0x68>)
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <_sbrk+0x64>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	429a      	cmp	r2, r3
 8002276:	d207      	bcs.n	8002288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002278:	f007 fc7a 	bl	8009b70 <__errno>
 800227c:	4603      	mov	r3, r0
 800227e:	220c      	movs	r2, #12
 8002280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
 8002286:	e009      	b.n	800229c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <_sbrk+0x64>)
 8002298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20030000 	.word	0x20030000
 80022a8:	00000400 	.word	0x00000400
 80022ac:	200006a0 	.word	0x200006a0
 80022b0:	20002308 	.word	0x20002308

080022b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <SystemInit+0x20>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <SystemInit+0x20>)
 80022c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_USART1_UART_Init+0x4c>)
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <MX_USART1_UART_Init+0x50>)
 80022e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <MX_USART1_UART_Init+0x4c>)
 80022e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_USART1_UART_Init+0x4c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_USART1_UART_Init+0x4c>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <MX_USART1_UART_Init+0x4c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_USART1_UART_Init+0x4c>)
 80022fe:	220c      	movs	r2, #12
 8002300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <MX_USART1_UART_Init+0x4c>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_USART1_UART_Init+0x4c>)
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_USART1_UART_Init+0x4c>)
 8002310:	f003 f8a8 	bl	8005464 <HAL_UART_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800231a:	f7ff fe27 	bl	8001f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200006a4 	.word	0x200006a4
 8002328:	40011000 	.word	0x40011000

0800232c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a19      	ldr	r2, [pc, #100]	; (80023b0 <HAL_UART_MspInit+0x84>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d12c      	bne.n	80023a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <HAL_UART_MspInit+0x88>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	4a17      	ldr	r2, [pc, #92]	; (80023b4 <HAL_UART_MspInit+0x88>)
 8002358:	f043 0310 	orr.w	r3, r3, #16
 800235c:	6453      	str	r3, [r2, #68]	; 0x44
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_UART_MspInit+0x88>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_UART_MspInit+0x88>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <HAL_UART_MspInit+0x88>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <HAL_UART_MspInit+0x88>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002386:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800238a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002398:	2307      	movs	r3, #7
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	4619      	mov	r1, r3
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <HAL_UART_MspInit+0x8c>)
 80023a4:	f000 f9dc 	bl	8002760 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023a8:	bf00      	nop
 80023aa:	3728      	adds	r7, #40	; 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40011000 	.word	0x40011000
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020000 	.word	0x40020000

080023bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80023bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023c0:	480d      	ldr	r0, [pc, #52]	; (80023f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023c2:	490e      	ldr	r1, [pc, #56]	; (80023fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023c4:	4a0e      	ldr	r2, [pc, #56]	; (8002400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c8:	e002      	b.n	80023d0 <LoopCopyDataInit>

080023ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ce:	3304      	adds	r3, #4

080023d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d4:	d3f9      	bcc.n	80023ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d6:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023d8:	4c0b      	ldr	r4, [pc, #44]	; (8002408 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023dc:	e001      	b.n	80023e2 <LoopFillZerobss>

080023de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e0:	3204      	adds	r2, #4

080023e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e4:	d3fb      	bcc.n	80023de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023e6:	f7ff ff65 	bl	80022b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ea:	f007 fbc7 	bl	8009b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ee:	f7ff fcdf 	bl	8001db0 <main>
  bx  lr    
 80023f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80023f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80023f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023fc:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8002400:	0800ad2c 	.word	0x0800ad2c
  ldr r2, =_sbss
 8002404:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8002408:	20002308 	.word	0x20002308

0800240c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800240c:	e7fe      	b.n	800240c <ADC_IRQHandler>
	...

08002410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <HAL_Init+0x40>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <HAL_Init+0x40>)
 800241a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_Init+0x40>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <HAL_Init+0x40>)
 8002426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_Init+0x40>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <HAL_Init+0x40>)
 8002432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002438:	2003      	movs	r0, #3
 800243a:	f000 f94f 	bl	80026dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243e:	2000      	movs	r0, #0
 8002440:	f000 f808 	bl	8002454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002444:	f7ff fe36 	bl	80020b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023c00 	.word	0x40023c00

08002454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_InitTick+0x54>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_InitTick+0x58>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	4619      	mov	r1, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246a:	fbb3 f3f1 	udiv	r3, r3, r1
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f967 	bl	8002746 <HAL_SYSTICK_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00e      	b.n	80024a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0f      	cmp	r3, #15
 8002486:	d80a      	bhi.n	800249e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f000 f92f 	bl	80026f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002494:	4a06      	ldr	r2, [pc, #24]	; (80024b0 <HAL_InitTick+0x5c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e000      	b.n	80024a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000008 	.word	0x20000008
 80024b0:	20000004 	.word	0x20000004

080024b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x20>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x24>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_IncTick+0x24>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000008 	.word	0x20000008
 80024d8:	200006e8 	.word	0x200006e8

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_GetTick+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	200006e8 	.word	0x200006e8

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffee 	bl	80024dc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_Delay+0x44>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffde 	bl	80024dc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000008 	.word	0x20000008

0800253c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <__NVIC_GetPriorityGrouping+0x18>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 0307 	and.w	r3, r3, #7
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	db0b      	blt.n	80025ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4907      	ldr	r1, [pc, #28]	; (80025d8 <__NVIC_EnableIRQ+0x38>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2001      	movs	r0, #1
 80025c2:	fa00 f202 	lsl.w	r2, r0, r2
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000e100 	.word	0xe000e100

080025dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	db0a      	blt.n	8002606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	490c      	ldr	r1, [pc, #48]	; (8002628 <__NVIC_SetPriority+0x4c>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	440b      	add	r3, r1
 8002600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002604:	e00a      	b.n	800261c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4908      	ldr	r1, [pc, #32]	; (800262c <__NVIC_SetPriority+0x50>)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	3b04      	subs	r3, #4
 8002614:	0112      	lsls	r2, r2, #4
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	440b      	add	r3, r1
 800261a:	761a      	strb	r2, [r3, #24]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000e100 	.word	0xe000e100
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f1c3 0307 	rsb	r3, r3, #7
 800264a:	2b04      	cmp	r3, #4
 800264c:	bf28      	it	cs
 800264e:	2304      	movcs	r3, #4
 8002650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3304      	adds	r3, #4
 8002656:	2b06      	cmp	r3, #6
 8002658:	d902      	bls.n	8002660 <NVIC_EncodePriority+0x30>
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3b03      	subs	r3, #3
 800265e:	e000      	b.n	8002662 <NVIC_EncodePriority+0x32>
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	f04f 32ff 	mov.w	r2, #4294967295
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	401a      	ands	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002678:	f04f 31ff 	mov.w	r1, #4294967295
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	43d9      	mvns	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	4313      	orrs	r3, r2
         );
}
 800268a:	4618      	mov	r0, r3
 800268c:	3724      	adds	r7, #36	; 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a8:	d301      	bcc.n	80026ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00f      	b.n	80026ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <SysTick_Config+0x40>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b6:	210f      	movs	r1, #15
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	f7ff ff8e 	bl	80025dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <SysTick_Config+0x40>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c6:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <SysTick_Config+0x40>)
 80026c8:	2207      	movs	r2, #7
 80026ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	e000e010 	.word	0xe000e010

080026dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ff29 	bl	800253c <__NVIC_SetPriorityGrouping>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002704:	f7ff ff3e 	bl	8002584 <__NVIC_GetPriorityGrouping>
 8002708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	6978      	ldr	r0, [r7, #20]
 8002710:	f7ff ff8e 	bl	8002630 <NVIC_EncodePriority>
 8002714:	4602      	mov	r2, r0
 8002716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff5d 	bl	80025dc <__NVIC_SetPriority>
}
 8002722:	bf00      	nop
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff31 	bl	80025a0 <__NVIC_EnableIRQ>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ffa2 	bl	8002698 <SysTick_Config>
 8002754:	4603      	mov	r3, r0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	e177      	b.n	8002a6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800277c:	2201      	movs	r2, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	429a      	cmp	r2, r3
 8002796:	f040 8166 	bne.w	8002a66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d005      	beq.n	80027b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d130      	bne.n	8002814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	2203      	movs	r2, #3
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	f003 0201 	and.w	r2, r3, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b03      	cmp	r3, #3
 800281e:	d017      	beq.n	8002850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d123      	bne.n	80028a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	08da      	lsrs	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3208      	adds	r2, #8
 8002864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	220f      	movs	r2, #15
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	08da      	lsrs	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3208      	adds	r2, #8
 800289e:	69b9      	ldr	r1, [r7, #24]
 80028a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0203 	and.w	r2, r3, #3
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80c0 	beq.w	8002a66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	4b66      	ldr	r3, [pc, #408]	; (8002a84 <HAL_GPIO_Init+0x324>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	4a65      	ldr	r2, [pc, #404]	; (8002a84 <HAL_GPIO_Init+0x324>)
 80028f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f4:	6453      	str	r3, [r2, #68]	; 0x44
 80028f6:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_GPIO_Init+0x324>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002902:	4a61      	ldr	r2, [pc, #388]	; (8002a88 <HAL_GPIO_Init+0x328>)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3302      	adds	r3, #2
 800290a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	220f      	movs	r2, #15
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a58      	ldr	r2, [pc, #352]	; (8002a8c <HAL_GPIO_Init+0x32c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d037      	beq.n	800299e <HAL_GPIO_Init+0x23e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a57      	ldr	r2, [pc, #348]	; (8002a90 <HAL_GPIO_Init+0x330>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d031      	beq.n	800299a <HAL_GPIO_Init+0x23a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a56      	ldr	r2, [pc, #344]	; (8002a94 <HAL_GPIO_Init+0x334>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d02b      	beq.n	8002996 <HAL_GPIO_Init+0x236>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a55      	ldr	r2, [pc, #340]	; (8002a98 <HAL_GPIO_Init+0x338>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d025      	beq.n	8002992 <HAL_GPIO_Init+0x232>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a54      	ldr	r2, [pc, #336]	; (8002a9c <HAL_GPIO_Init+0x33c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01f      	beq.n	800298e <HAL_GPIO_Init+0x22e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a53      	ldr	r2, [pc, #332]	; (8002aa0 <HAL_GPIO_Init+0x340>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d019      	beq.n	800298a <HAL_GPIO_Init+0x22a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <HAL_GPIO_Init+0x344>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <HAL_GPIO_Init+0x226>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a51      	ldr	r2, [pc, #324]	; (8002aa8 <HAL_GPIO_Init+0x348>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00d      	beq.n	8002982 <HAL_GPIO_Init+0x222>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a50      	ldr	r2, [pc, #320]	; (8002aac <HAL_GPIO_Init+0x34c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d007      	beq.n	800297e <HAL_GPIO_Init+0x21e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4f      	ldr	r2, [pc, #316]	; (8002ab0 <HAL_GPIO_Init+0x350>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <HAL_GPIO_Init+0x21a>
 8002976:	2309      	movs	r3, #9
 8002978:	e012      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800297a:	230a      	movs	r3, #10
 800297c:	e010      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800297e:	2308      	movs	r3, #8
 8002980:	e00e      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 8002982:	2307      	movs	r3, #7
 8002984:	e00c      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 8002986:	2306      	movs	r3, #6
 8002988:	e00a      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800298a:	2305      	movs	r3, #5
 800298c:	e008      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800298e:	2304      	movs	r3, #4
 8002990:	e006      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 8002992:	2303      	movs	r3, #3
 8002994:	e004      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 8002996:	2302      	movs	r3, #2
 8002998:	e002      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800299e:	2300      	movs	r3, #0
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	f002 0203 	and.w	r2, r2, #3
 80029a6:	0092      	lsls	r2, r2, #2
 80029a8:	4093      	lsls	r3, r2
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b0:	4935      	ldr	r1, [pc, #212]	; (8002a88 <HAL_GPIO_Init+0x328>)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	3302      	adds	r3, #2
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029be:	4b3d      	ldr	r3, [pc, #244]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e2:	4a34      	ldr	r2, [pc, #208]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e8:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a0c:	4a29      	ldr	r2, [pc, #164]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a12:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a36:	4a1f      	ldr	r2, [pc, #124]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a60:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <HAL_GPIO_Init+0x354>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2b0f      	cmp	r3, #15
 8002a70:	f67f ae84 	bls.w	800277c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3724      	adds	r7, #36	; 0x24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40013800 	.word	0x40013800
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	40020400 	.word	0x40020400
 8002a94:	40020800 	.word	0x40020800
 8002a98:	40020c00 	.word	0x40020c00
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40021400 	.word	0x40021400
 8002aa4:	40021800 	.word	0x40021800
 8002aa8:	40021c00 	.word	0x40021c00
 8002aac:	40022000 	.word	0x40022000
 8002ab0:	40022400 	.word	0x40022400
 8002ab4:	40013c00 	.word	0x40013c00

08002ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	807b      	strh	r3, [r7, #2]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac8:	787b      	ldrb	r3, [r7, #1]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ad4:	e003      	b.n	8002ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ad6:	887b      	ldrh	r3, [r7, #2]
 8002ad8:	041a      	lsls	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	619a      	str	r2, [r3, #24]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aec:	b08f      	sub	sp, #60	; 0x3c
 8002aee:	af0a      	add	r7, sp, #40	; 0x28
 8002af0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e10f      	b.n	8002d1c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f006 fd16 	bl	8009548 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2203      	movs	r2, #3
 8002b20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 f869 	bl	8005c12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	603b      	str	r3, [r7, #0]
 8002b46:	687e      	ldr	r6, [r7, #4]
 8002b48:	466d      	mov	r5, sp
 8002b4a:	f106 0410 	add.w	r4, r6, #16
 8002b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b5e:	1d33      	adds	r3, r6, #4
 8002b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b62:	6838      	ldr	r0, [r7, #0]
 8002b64:	f002 ff40 	bl	80059e8 <USB_CoreInit>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0d0      	b.n	8002d1c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f003 f857 	bl	8005c34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	73fb      	strb	r3, [r7, #15]
 8002b8a:	e04a      	b.n	8002c22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	333d      	adds	r3, #61	; 0x3d
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	333c      	adds	r3, #60	; 0x3c
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	b298      	uxth	r0, r3
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3344      	adds	r3, #68	; 0x44
 8002bc8:	4602      	mov	r2, r0
 8002bca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	3340      	adds	r3, #64	; 0x40
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	3348      	adds	r3, #72	; 0x48
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	334c      	adds	r3, #76	; 0x4c
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3354      	adds	r3, #84	; 0x54
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d3af      	bcc.n	8002b8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	e044      	b.n	8002cbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c48:	7bfa      	ldrb	r2, [r7, #15]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c74:	7bfa      	ldrb	r2, [r7, #15]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c8a:	7bfa      	ldrb	r2, [r7, #15]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ca0:	7bfa      	ldrb	r2, [r7, #15]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d3b5      	bcc.n	8002c32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	687e      	ldr	r6, [r7, #4]
 8002cce:	466d      	mov	r5, sp
 8002cd0:	f106 0410 	add.w	r4, r6, #16
 8002cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ce0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ce4:	1d33      	adds	r3, r6, #4
 8002ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce8:	6838      	ldr	r0, [r7, #0]
 8002cea:	f002 ffef 	bl	8005ccc <USB_DevInit>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e00d      	b.n	8002d1c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 f93e 	bl	8006f96 <USB_DevDisconnect>

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_PCD_Start+0x1c>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e020      	b.n	8002d82 <HAL_PCD_Start+0x5e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d109      	bne.n	8002d64 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d005      	beq.n	8002d64 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f002 ff41 	bl	8005bf0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f004 f8ee 	bl	8006f54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d8a:	b590      	push	{r4, r7, lr}
 8002d8c:	b08d      	sub	sp, #52	; 0x34
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f004 f9ac 	bl	80070fe <USB_GetMode>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f040 848a 	bne.w	80036c2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f004 f910 	bl	8006fd8 <USB_ReadInterrupts>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8480 	beq.w	80036c0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	0a1b      	lsrs	r3, r3, #8
 8002dca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f004 f8fd 	bl	8006fd8 <USB_ReadInterrupts>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d107      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f002 0202 	and.w	r2, r2, #2
 8002df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f004 f8eb 	bl	8006fd8 <USB_ReadInterrupts>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d161      	bne.n	8002ed0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0210 	bic.w	r2, r2, #16
 8002e1a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f003 020f 	and.w	r2, r3, #15
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	4413      	add	r3, r2
 8002e38:	3304      	adds	r3, #4
 8002e3a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	0c5b      	lsrs	r3, r3, #17
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d124      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d035      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	091b      	lsrs	r3, r3, #4
 8002e5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	6a38      	ldr	r0, [r7, #32]
 8002e68:	f003 ff22 	bl	8006cb0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e78:	441a      	add	r2, r3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e8a:	441a      	add	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	621a      	str	r2, [r3, #32]
 8002e90:	e016      	b.n	8002ec0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	0c5b      	lsrs	r3, r3, #17
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d110      	bne.n	8002ec0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6a38      	ldr	r0, [r7, #32]
 8002eaa:	f003 ff01 	bl	8006cb0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	6a1a      	ldr	r2, [r3, #32]
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eba:	441a      	add	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0210 	orr.w	r2, r2, #16
 8002ece:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f004 f87f 	bl	8006fd8 <USB_ReadInterrupts>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ee4:	f040 80a7 	bne.w	8003036 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f004 f884 	bl	8006ffe <USB_ReadDevAllOutEpInterrupt>
 8002ef6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ef8:	e099      	b.n	800302e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 808e 	beq.w	8003022 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f004 f8a8 	bl	8007066 <USB_ReadDevOutEPInterrupt>
 8002f16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2301      	movs	r3, #1
 8002f32:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fec2 	bl	8003cc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00c      	beq.n	8002f60 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f52:	461a      	mov	r2, r3
 8002f54:	2308      	movs	r3, #8
 8002f56:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 ff98 	bl	8003e90 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f76:	461a      	mov	r2, r3
 8002f78:	2310      	movs	r3, #16
 8002f7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d030      	beq.n	8002fe8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8e:	2b80      	cmp	r3, #128	; 0x80
 8002f90:	d109      	bne.n	8002fa6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3304      	adds	r3, #4
 8002fba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	78db      	ldrb	r3, [r3, #3]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d108      	bne.n	8002fd6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	4619      	mov	r1, r3
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f006 fbbf 	bl	8009754 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffe:	461a      	mov	r2, r3
 8003000:	2320      	movs	r3, #32
 8003002:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301a:	461a      	mov	r2, r3
 800301c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003020:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	3301      	adds	r3, #1
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	2b00      	cmp	r3, #0
 8003032:	f47f af62 	bne.w	8002efa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f003 ffcc 	bl	8006fd8 <USB_ReadInterrupts>
 8003040:	4603      	mov	r3, r0
 8003042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003046:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800304a:	f040 80db 	bne.w	8003204 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f003 ffed 	bl	8007032 <USB_ReadDevAllInEpInterrupt>
 8003058:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800305e:	e0cd      	b.n	80031fc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80c2 	beq.w	80031f0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f004 f813 	bl	80070a2 <USB_ReadDevInEPInterrupt>
 800307c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d057      	beq.n	8003138 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	2201      	movs	r2, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69f9      	ldr	r1, [r7, #28]
 80030a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030a8:	4013      	ands	r3, r2
 80030aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b8:	461a      	mov	r2, r3
 80030ba:	2301      	movs	r3, #1
 80030bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d132      	bne.n	800312c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	334c      	adds	r3, #76	; 0x4c
 80030d6:	6819      	ldr	r1, [r3, #0]
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4403      	add	r3, r0
 80030e6:	3348      	adds	r3, #72	; 0x48
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4419      	add	r1, r3
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4403      	add	r3, r0
 80030fa:	334c      	adds	r3, #76	; 0x4c
 80030fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	2b00      	cmp	r3, #0
 8003102:	d113      	bne.n	800312c <HAL_PCD_IRQHandler+0x3a2>
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	3354      	adds	r3, #84	; 0x54
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d108      	bne.n	800312c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003124:	461a      	mov	r2, r3
 8003126:	2101      	movs	r1, #1
 8003128:	f004 f81a 	bl	8007160 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	b2db      	uxtb	r3, r3
 8003130:	4619      	mov	r1, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f006 fa89 	bl	800964a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314e:	461a      	mov	r2, r3
 8003150:	2308      	movs	r3, #8
 8003152:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316a:	461a      	mov	r2, r3
 800316c:	2310      	movs	r3, #16
 800316e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003186:	461a      	mov	r2, r3
 8003188:	2340      	movs	r3, #64	; 0x40
 800318a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d023      	beq.n	80031de <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003198:	6a38      	ldr	r0, [r7, #32]
 800319a:	f002 fefb 	bl	8005f94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800319e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	3338      	adds	r3, #56	; 0x38
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	3304      	adds	r3, #4
 80031b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	78db      	ldrb	r3, [r3, #3]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d108      	bne.n	80031cc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	4619      	mov	r1, r3
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f006 fad6 	bl	8009778 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d8:	461a      	mov	r2, r3
 80031da:	2302      	movs	r3, #2
 80031dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fcdb 	bl	8003ba6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	3301      	adds	r3, #1
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	085b      	lsrs	r3, r3, #1
 80031fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f47f af2e 	bne.w	8003060 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f003 fee5 	bl	8006fd8 <USB_ReadInterrupts>
 800320e:	4603      	mov	r3, r0
 8003210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003218:	d122      	bne.n	8003260 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003234:	2b01      	cmp	r3, #1
 8003236:	d108      	bne.n	800324a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003240:	2100      	movs	r1, #0
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fec2 	bl	8003fcc <HAL_PCDEx_LPM_Callback>
 8003248:	e002      	b.n	8003250 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f006 fa74 	bl	8009738 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800325e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f003 feb7 	bl	8006fd8 <USB_ReadInterrupts>
 800326a:	4603      	mov	r3, r0
 800326c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003274:	d112      	bne.n	800329c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d102      	bne.n	800328c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f006 fa30 	bl	80096ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800329a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f003 fe99 	bl	8006fd8 <USB_ReadInterrupts>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b0:	f040 80b7 	bne.w	8003422 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2110      	movs	r1, #16
 80032ce:	4618      	mov	r0, r3
 80032d0:	f002 fe60 	bl	8005f94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d4:	2300      	movs	r3, #0
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032d8:	e046      	b.n	8003368 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e6:	461a      	mov	r2, r3
 80032e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fe:	0151      	lsls	r1, r2, #5
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	440a      	add	r2, r1
 8003304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003308:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800330c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331a:	461a      	mov	r2, r3
 800331c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003320:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	4413      	add	r3, r2
 800332a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003332:	0151      	lsls	r1, r2, #5
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	440a      	add	r2, r1
 8003338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800333c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003340:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003352:	0151      	lsls	r1, r2, #5
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	440a      	add	r2, r1
 8003358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800335c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003360:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	3301      	adds	r3, #1
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336e:	429a      	cmp	r2, r3
 8003370:	d3b3      	bcc.n	80032da <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003380:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003384:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	2b00      	cmp	r3, #0
 800338c:	d016      	beq.n	80033bc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800339e:	f043 030b 	orr.w	r3, r3, #11
 80033a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033b4:	f043 030b 	orr.w	r3, r3, #11
 80033b8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ba:	e015      	b.n	80033e8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033ce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80033d2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033e2:	f043 030b 	orr.w	r3, r3, #11
 80033e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80033fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800340c:	461a      	mov	r2, r3
 800340e:	f003 fea7 	bl	8007160 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003420:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f003 fdd6 	bl	8006fd8 <USB_ReadInterrupts>
 800342c:	4603      	mov	r3, r0
 800342e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003436:	d124      	bne.n	8003482 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f003 fe6c 	bl	800711a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f002 fe21 	bl	800608e <USB_GetDevSpeed>
 800344c:	4603      	mov	r3, r0
 800344e:	461a      	mov	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681c      	ldr	r4, [r3, #0]
 8003458:	f001 fa28 	bl	80048ac <HAL_RCC_GetHCLKFreq>
 800345c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	4620      	mov	r0, r4
 8003468:	f002 fb20 	bl	8005aac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f006 f914 	bl	800969a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003480:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f003 fda6 	bl	8006fd8 <USB_ReadInterrupts>
 800348c:	4603      	mov	r3, r0
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b08      	cmp	r3, #8
 8003494:	d10a      	bne.n	80034ac <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f006 f8f1 	bl	800967e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f002 0208 	and.w	r2, r2, #8
 80034aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 fd91 	bl	8006fd8 <USB_ReadInterrupts>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b80      	cmp	r3, #128	; 0x80
 80034be:	d122      	bne.n	8003506 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034cc:	2301      	movs	r3, #1
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
 80034d0:	e014      	b.n	80034fc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d105      	bne.n	80034f6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fb27 	bl	8003b44 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	3301      	adds	r3, #1
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003502:	429a      	cmp	r2, r3
 8003504:	d3e5      	bcc.n	80034d2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f003 fd64 	bl	8006fd8 <USB_ReadInterrupts>
 8003510:	4603      	mov	r3, r0
 8003512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351a:	d13b      	bne.n	8003594 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800351c:	2301      	movs	r3, #1
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
 8003520:	e02b      	b.n	800357a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3340      	adds	r3, #64	; 0x40
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d115      	bne.n	8003574 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003548:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800354a:	2b00      	cmp	r3, #0
 800354c:	da12      	bge.n	8003574 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	333f      	adds	r3, #63	; 0x3f
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800356a:	b2db      	uxtb	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fae8 	bl	8003b44 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	3301      	adds	r3, #1
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003580:	429a      	cmp	r2, r3
 8003582:	d3ce      	bcc.n	8003522 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f003 fd1d 	bl	8006fd8 <USB_ReadInterrupts>
 800359e:	4603      	mov	r3, r0
 80035a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035a8:	d155      	bne.n	8003656 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035aa:	2301      	movs	r3, #1
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
 80035ae:	e045      	b.n	800363c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d12e      	bne.n	8003636 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035da:	2b00      	cmp	r3, #0
 80035dc:	da2b      	bge.n	8003636 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80035ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d121      	bne.n	8003636 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003604:	2201      	movs	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800362e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003632:	6053      	str	r3, [r2, #4]
            break;
 8003634:	e007      	b.n	8003646 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	3301      	adds	r3, #1
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003642:	429a      	cmp	r2, r3
 8003644:	d3b4      	bcc.n	80035b0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003654:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f003 fcbc 	bl	8006fd8 <USB_ReadInterrupts>
 8003660:	4603      	mov	r3, r0
 8003662:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366a:	d10a      	bne.n	8003682 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f006 f895 	bl	800979c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f003 fca6 	bl	8006fd8 <USB_ReadInterrupts>
 800368c:	4603      	mov	r3, r0
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b04      	cmp	r3, #4
 8003694:	d115      	bne.n	80036c2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f006 f885 	bl	80097b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	e000      	b.n	80036c2 <HAL_PCD_IRQHandler+0x938>
      return;
 80036c0:	bf00      	nop
    }
  }
}
 80036c2:	3734      	adds	r7, #52	; 0x34
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd90      	pop	{r4, r7, pc}

080036c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_PCD_SetAddress+0x1a>
 80036de:	2302      	movs	r3, #2
 80036e0:	e013      	b.n	800370a <HAL_PCD_SetAddress+0x42>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	4611      	mov	r1, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f003 fc04 	bl	8006f08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	4608      	mov	r0, r1
 800371c:	4611      	mov	r1, r2
 800371e:	461a      	mov	r2, r3
 8003720:	4603      	mov	r3, r0
 8003722:	70fb      	strb	r3, [r7, #3]
 8003724:	460b      	mov	r3, r1
 8003726:	803b      	strh	r3, [r7, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003734:	2b00      	cmp	r3, #0
 8003736:	da0f      	bge.n	8003758 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	f003 020f 	and.w	r2, r3, #15
 800373e:	4613      	mov	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	3338      	adds	r3, #56	; 0x38
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	4413      	add	r3, r2
 800374c:	3304      	adds	r3, #4
 800374e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	705a      	strb	r2, [r3, #1]
 8003756:	e00f      	b.n	8003778 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	f003 020f 	and.w	r2, r3, #15
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	3304      	adds	r3, #4
 8003770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	b2da      	uxtb	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003784:	883a      	ldrh	r2, [r7, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	78ba      	ldrb	r2, [r7, #2]
 800378e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	785b      	ldrb	r3, [r3, #1]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037a2:	78bb      	ldrb	r3, [r7, #2]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d102      	bne.n	80037ae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_PCD_EP_Open+0xaa>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e00e      	b.n	80037da <HAL_PCD_EP_Open+0xc8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68f9      	ldr	r1, [r7, #12]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f002 fc84 	bl	80060d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80037d8:	7afb      	ldrb	r3, [r7, #11]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	460b      	mov	r3, r1
 80037ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	da0f      	bge.n	8003816 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	f003 020f 	and.w	r2, r3, #15
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	3338      	adds	r3, #56	; 0x38
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	3304      	adds	r3, #4
 800380c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	705a      	strb	r2, [r3, #1]
 8003814:	e00f      	b.n	8003836 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	f003 020f 	and.w	r2, r3, #15
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	4413      	add	r3, r2
 800382c:	3304      	adds	r3, #4
 800382e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	b2da      	uxtb	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_PCD_EP_Close+0x6e>
 800384c:	2302      	movs	r3, #2
 800384e:	e00e      	b.n	800386e <HAL_PCD_EP_Close+0x8c>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68f9      	ldr	r1, [r7, #12]
 800385e:	4618      	mov	r0, r3
 8003860:	f002 fcc2 	bl	80061e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
 8003882:	460b      	mov	r3, r1
 8003884:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003886:	7afb      	ldrb	r3, [r7, #11]
 8003888:	f003 020f 	and.w	r2, r3, #15
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	3304      	adds	r3, #4
 800389e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2200      	movs	r2, #0
 80038b0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2200      	movs	r2, #0
 80038b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038b8:	7afb      	ldrb	r3, [r7, #11]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d102      	bne.n	80038d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038d2:	7afb      	ldrb	r3, [r7, #11]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	6979      	ldr	r1, [r7, #20]
 80038ea:	f002 ffa1 	bl	8006830 <USB_EP0StartXfer>
 80038ee:	e008      	b.n	8003902 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	6979      	ldr	r1, [r7, #20]
 80038fe:	f002 fd4f 	bl	80063a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	f003 020f 	and.w	r2, r3, #15
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	460b      	mov	r3, r1
 800394a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800394c:	7afb      	ldrb	r3, [r7, #11]
 800394e:	f003 020f 	and.w	r2, r3, #15
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	3338      	adds	r3, #56	; 0x38
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	3304      	adds	r3, #4
 8003962:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2200      	movs	r2, #0
 8003974:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2201      	movs	r2, #1
 800397a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800397c:	7afb      	ldrb	r3, [r7, #11]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	b2da      	uxtb	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d102      	bne.n	8003996 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003996:	7afb      	ldrb	r3, [r7, #11]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	2b00      	cmp	r3, #0
 800399e:	d109      	bne.n	80039b4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	6979      	ldr	r1, [r7, #20]
 80039ae:	f002 ff3f 	bl	8006830 <USB_EP0StartXfer>
 80039b2:	e008      	b.n	80039c6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	6979      	ldr	r1, [r7, #20]
 80039c2:	f002 fced 	bl	80063a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 020f 	and.w	r2, r3, #15
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d901      	bls.n	80039ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e050      	b.n	8003a90 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	da0f      	bge.n	8003a16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 020f 	and.w	r2, r3, #15
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	3338      	adds	r3, #56	; 0x38
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	705a      	strb	r2, [r3, #1]
 8003a14:	e00d      	b.n	8003a32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	4413      	add	r3, r2
 8003a28:	3304      	adds	r3, #4
 8003a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_PCD_EP_SetStall+0x82>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e01e      	b.n	8003a90 <HAL_PCD_EP_SetStall+0xc0>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68f9      	ldr	r1, [r7, #12]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f003 f97d 	bl	8006d60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	b2d9      	uxtb	r1, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a80:	461a      	mov	r2, r3
 8003a82:	f003 fb6d 	bl	8007160 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	f003 020f 	and.w	r2, r3, #15
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d901      	bls.n	8003ab6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e042      	b.n	8003b3c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	da0f      	bge.n	8003ade <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	f003 020f 	and.w	r2, r3, #15
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	3338      	adds	r3, #56	; 0x38
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	705a      	strb	r2, [r3, #1]
 8003adc:	e00f      	b.n	8003afe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	f003 020f 	and.w	r2, r3, #15
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	3304      	adds	r3, #4
 8003af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_PCD_EP_ClrStall+0x86>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e00e      	b.n	8003b3c <HAL_PCD_EP_ClrStall+0xa4>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68f9      	ldr	r1, [r7, #12]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f003 f985 	bl	8006e3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	da0c      	bge.n	8003b72 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	f003 020f 	and.w	r2, r3, #15
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	3338      	adds	r3, #56	; 0x38
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e00c      	b.n	8003b8c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	f003 020f 	and.w	r2, r3, #15
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	3304      	adds	r3, #4
 8003b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68f9      	ldr	r1, [r7, #12]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f002 ffa4 	bl	8006ae0 <USB_EPStopXfer>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b9c:	7afb      	ldrb	r3, [r7, #11]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b08a      	sub	sp, #40	; 0x28
 8003baa:	af02      	add	r7, sp, #8
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	3338      	adds	r3, #56	; 0x38
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	4413      	add	r3, r2
 8003bca:	3304      	adds	r3, #4
 8003bcc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a1a      	ldr	r2, [r3, #32]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d901      	bls.n	8003bde <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e06c      	b.n	8003cb8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	69fa      	ldr	r2, [r7, #28]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d902      	bls.n	8003bfa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3303      	adds	r3, #3
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c02:	e02b      	b.n	8003c5c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	699a      	ldr	r2, [r3, #24]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d902      	bls.n	8003c20 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	3303      	adds	r3, #3
 8003c24:	089b      	lsrs	r3, r3, #2
 8003c26:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6919      	ldr	r1, [r3, #16]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	6978      	ldr	r0, [r7, #20]
 8003c40:	f002 fff8 	bl	8006c34 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	441a      	add	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a1a      	ldr	r2, [r3, #32]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	441a      	add	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d809      	bhi.n	8003c86 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1a      	ldr	r2, [r3, #32]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d203      	bcs.n	8003c86 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1be      	bne.n	8003c04 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d811      	bhi.n	8003cb6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	2201      	movs	r2, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	43db      	mvns	r3, r3
 8003cac:	6939      	ldr	r1, [r7, #16]
 8003cae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	333c      	adds	r3, #60	; 0x3c
 8003cd8:	3304      	adds	r3, #4
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d17b      	bne.n	8003dee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d015      	beq.n	8003d2c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	4a61      	ldr	r2, [pc, #388]	; (8003e88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	f240 80b9 	bls.w	8003e7c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80b3 	beq.w	8003e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d22:	461a      	mov	r2, r3
 8003d24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d28:	6093      	str	r3, [r2, #8]
 8003d2a:	e0a7      	b.n	8003e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d42:	461a      	mov	r2, r3
 8003d44:	2320      	movs	r3, #32
 8003d46:	6093      	str	r3, [r2, #8]
 8003d48:	e098      	b.n	8003e7c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f040 8093 	bne.w	8003e7c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	4a4b      	ldr	r2, [pc, #300]	; (8003e88 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d90f      	bls.n	8003d7e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d74:	461a      	mov	r2, r3
 8003d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d7a:	6093      	str	r3, [r2, #8]
 8003d7c:	e07e      	b.n	8003e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	3304      	adds	r3, #4
 8003d92:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	0159      	lsls	r1, r3, #5
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	440b      	add	r3, r1
 8003da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003daa:	1ad2      	subs	r2, r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d114      	bne.n	8003de0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dc8:	461a      	mov	r2, r3
 8003dca:	2101      	movs	r1, #1
 8003dcc:	f003 f9c8 	bl	8007160 <USB_EP0_OutStart>
 8003dd0:	e006      	b.n	8003de0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	441a      	add	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	4619      	mov	r1, r3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f005 fc14 	bl	8009614 <HAL_PCD_DataOutStageCallback>
 8003dec:	e046      	b.n	8003e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	4a26      	ldr	r2, [pc, #152]	; (8003e8c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d124      	bne.n	8003e40 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e12:	6093      	str	r3, [r2, #8]
 8003e14:	e032      	b.n	8003e7c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2320      	movs	r3, #32
 8003e30:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f005 fbeb 	bl	8009614 <HAL_PCD_DataOutStageCallback>
 8003e3e:	e01d      	b.n	8003e7c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d114      	bne.n	8003e70 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d108      	bne.n	8003e70 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	f003 f978 	bl	8007160 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f005 fbcc 	bl	8009614 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	4f54300a 	.word	0x4f54300a
 8003e8c:	4f54310a 	.word	0x4f54310a

08003e90 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	333c      	adds	r3, #60	; 0x3c
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4a15      	ldr	r2, [pc, #84]	; (8003f18 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d90e      	bls.n	8003ee4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d009      	beq.n	8003ee4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	461a      	mov	r2, r3
 8003ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f005 fb83 	bl	80095f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <PCD_EP_OutSetupPacket_int+0x88>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d90c      	bls.n	8003f0c <PCD_EP_OutSetupPacket_int+0x7c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d108      	bne.n	8003f0c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f04:	461a      	mov	r2, r3
 8003f06:	2101      	movs	r1, #1
 8003f08:	f003 f92a 	bl	8007160 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	4f54300a 	.word	0x4f54300a

08003f1c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	70fb      	strb	r3, [r7, #3]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d107      	bne.n	8003f4a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f3a:	883b      	ldrh	r3, [r7, #0]
 8003f3c:	0419      	lsls	r1, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
 8003f48:	e028      	b.n	8003f9c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	4413      	add	r3, r2
 8003f56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	73fb      	strb	r3, [r7, #15]
 8003f5c:	e00d      	b.n	8003f7a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	3340      	adds	r3, #64	; 0x40
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	4413      	add	r3, r2
 8003f72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	3301      	adds	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d3ec      	bcc.n	8003f5e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f84:	883b      	ldrh	r3, [r7, #0]
 8003f86:	0418      	lsls	r0, r3, #16
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6819      	ldr	r1, [r3, #0]
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	4302      	orrs	r2, r0
 8003f94:	3340      	adds	r3, #64	; 0x40
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e267      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d075      	beq.n	80040ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004002:	4b88      	ldr	r3, [pc, #544]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
 800400a:	2b04      	cmp	r3, #4
 800400c:	d00c      	beq.n	8004028 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800400e:	4b85      	ldr	r3, [pc, #532]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004016:	2b08      	cmp	r3, #8
 8004018:	d112      	bne.n	8004040 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800401a:	4b82      	ldr	r3, [pc, #520]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004026:	d10b      	bne.n	8004040 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004028:	4b7e      	ldr	r3, [pc, #504]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d05b      	beq.n	80040ec <HAL_RCC_OscConfig+0x108>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d157      	bne.n	80040ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e242      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004048:	d106      	bne.n	8004058 <HAL_RCC_OscConfig+0x74>
 800404a:	4b76      	ldr	r3, [pc, #472]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a75      	ldr	r2, [pc, #468]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e01d      	b.n	8004094 <HAL_RCC_OscConfig+0xb0>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004060:	d10c      	bne.n	800407c <HAL_RCC_OscConfig+0x98>
 8004062:	4b70      	ldr	r3, [pc, #448]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a6f      	ldr	r2, [pc, #444]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	4b6d      	ldr	r3, [pc, #436]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a6c      	ldr	r2, [pc, #432]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	e00b      	b.n	8004094 <HAL_RCC_OscConfig+0xb0>
 800407c:	4b69      	ldr	r3, [pc, #420]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a68      	ldr	r2, [pc, #416]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4b66      	ldr	r3, [pc, #408]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a65      	ldr	r2, [pc, #404]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 800408e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d013      	beq.n	80040c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409c:	f7fe fa1e 	bl	80024dc <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a4:	f7fe fa1a 	bl	80024dc <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e207      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	4b5b      	ldr	r3, [pc, #364]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0xc0>
 80040c2:	e014      	b.n	80040ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fe fa0a 	bl	80024dc <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fe fa06 	bl	80024dc <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	; 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e1f3      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040de:	4b51      	ldr	r3, [pc, #324]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0xe8>
 80040ea:	e000      	b.n	80040ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d063      	beq.n	80041c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040fa:	4b4a      	ldr	r3, [pc, #296]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004106:	4b47      	ldr	r3, [pc, #284]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800410e:	2b08      	cmp	r3, #8
 8004110:	d11c      	bne.n	800414c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004112:	4b44      	ldr	r3, [pc, #272]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d116      	bne.n	800414c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411e:	4b41      	ldr	r3, [pc, #260]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d005      	beq.n	8004136 <HAL_RCC_OscConfig+0x152>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d001      	beq.n	8004136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e1c7      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004136:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4937      	ldr	r1, [pc, #220]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414a:	e03a      	b.n	80041c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d020      	beq.n	8004196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004154:	4b34      	ldr	r3, [pc, #208]	; (8004228 <HAL_RCC_OscConfig+0x244>)
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415a:	f7fe f9bf 	bl	80024dc <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004162:	f7fe f9bb 	bl	80024dc <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e1a8      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004174:	4b2b      	ldr	r3, [pc, #172]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004180:	4b28      	ldr	r3, [pc, #160]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4925      	ldr	r1, [pc, #148]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 8004190:	4313      	orrs	r3, r2
 8004192:	600b      	str	r3, [r1, #0]
 8004194:	e015      	b.n	80041c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004196:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_RCC_OscConfig+0x244>)
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fe f99e 	bl	80024dc <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041a4:	f7fe f99a 	bl	80024dc <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e187      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b6:	4b1b      	ldr	r3, [pc, #108]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f0      	bne.n	80041a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d036      	beq.n	800423c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d016      	beq.n	8004204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041d6:	4b15      	ldr	r3, [pc, #84]	; (800422c <HAL_RCC_OscConfig+0x248>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041dc:	f7fe f97e 	bl	80024dc <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041e4:	f7fe f97a 	bl	80024dc <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e167      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f6:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_OscConfig+0x240>)
 80041f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x200>
 8004202:	e01b      	b.n	800423c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004204:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_RCC_OscConfig+0x248>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800420a:	f7fe f967 	bl	80024dc <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004210:	e00e      	b.n	8004230 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004212:	f7fe f963 	bl	80024dc <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d907      	bls.n	8004230 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e150      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
 8004224:	40023800 	.word	0x40023800
 8004228:	42470000 	.word	0x42470000
 800422c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004230:	4b88      	ldr	r3, [pc, #544]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 8004232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1ea      	bne.n	8004212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8097 	beq.w	8004378 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800424a:	2300      	movs	r3, #0
 800424c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800424e:	4b81      	ldr	r3, [pc, #516]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10f      	bne.n	800427a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	4b7d      	ldr	r3, [pc, #500]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	4a7c      	ldr	r2, [pc, #496]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 8004264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004268:	6413      	str	r3, [r2, #64]	; 0x40
 800426a:	4b7a      	ldr	r3, [pc, #488]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004276:	2301      	movs	r3, #1
 8004278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427a:	4b77      	ldr	r3, [pc, #476]	; (8004458 <HAL_RCC_OscConfig+0x474>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d118      	bne.n	80042b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004286:	4b74      	ldr	r3, [pc, #464]	; (8004458 <HAL_RCC_OscConfig+0x474>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a73      	ldr	r2, [pc, #460]	; (8004458 <HAL_RCC_OscConfig+0x474>)
 800428c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004292:	f7fe f923 	bl	80024dc <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800429a:	f7fe f91f 	bl	80024dc <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e10c      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ac:	4b6a      	ldr	r3, [pc, #424]	; (8004458 <HAL_RCC_OscConfig+0x474>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f0      	beq.n	800429a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d106      	bne.n	80042ce <HAL_RCC_OscConfig+0x2ea>
 80042c0:	4b64      	ldr	r3, [pc, #400]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 80042c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c4:	4a63      	ldr	r2, [pc, #396]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	6713      	str	r3, [r2, #112]	; 0x70
 80042cc:	e01c      	b.n	8004308 <HAL_RCC_OscConfig+0x324>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b05      	cmp	r3, #5
 80042d4:	d10c      	bne.n	80042f0 <HAL_RCC_OscConfig+0x30c>
 80042d6:	4b5f      	ldr	r3, [pc, #380]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	4a5e      	ldr	r2, [pc, #376]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 80042dc:	f043 0304 	orr.w	r3, r3, #4
 80042e0:	6713      	str	r3, [r2, #112]	; 0x70
 80042e2:	4b5c      	ldr	r3, [pc, #368]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 80042e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e6:	4a5b      	ldr	r2, [pc, #364]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	6713      	str	r3, [r2, #112]	; 0x70
 80042ee:	e00b      	b.n	8004308 <HAL_RCC_OscConfig+0x324>
 80042f0:	4b58      	ldr	r3, [pc, #352]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	4a57      	ldr	r2, [pc, #348]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 80042f6:	f023 0301 	bic.w	r3, r3, #1
 80042fa:	6713      	str	r3, [r2, #112]	; 0x70
 80042fc:	4b55      	ldr	r3, [pc, #340]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	4a54      	ldr	r2, [pc, #336]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 8004302:	f023 0304 	bic.w	r3, r3, #4
 8004306:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d015      	beq.n	800433c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004310:	f7fe f8e4 	bl	80024dc <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004316:	e00a      	b.n	800432e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004318:	f7fe f8e0 	bl	80024dc <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f241 3288 	movw	r2, #5000	; 0x1388
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e0cb      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432e:	4b49      	ldr	r3, [pc, #292]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0ee      	beq.n	8004318 <HAL_RCC_OscConfig+0x334>
 800433a:	e014      	b.n	8004366 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433c:	f7fe f8ce 	bl	80024dc <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004342:	e00a      	b.n	800435a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004344:	f7fe f8ca 	bl	80024dc <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e0b5      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800435a:	4b3e      	ldr	r3, [pc, #248]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1ee      	bne.n	8004344 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004366:	7dfb      	ldrb	r3, [r7, #23]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d105      	bne.n	8004378 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436c:	4b39      	ldr	r3, [pc, #228]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	4a38      	ldr	r2, [pc, #224]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 8004372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004376:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80a1 	beq.w	80044c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004382:	4b34      	ldr	r3, [pc, #208]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	2b08      	cmp	r3, #8
 800438c:	d05c      	beq.n	8004448 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d141      	bne.n	800441a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004396:	4b31      	ldr	r3, [pc, #196]	; (800445c <HAL_RCC_OscConfig+0x478>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fe f89e 	bl	80024dc <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a4:	f7fe f89a 	bl	80024dc <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e087      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b6:	4b27      	ldr	r3, [pc, #156]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	019b      	lsls	r3, r3, #6
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	3b01      	subs	r3, #1
 80043dc:	041b      	lsls	r3, r3, #16
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	061b      	lsls	r3, r3, #24
 80043e6:	491b      	ldr	r1, [pc, #108]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <HAL_RCC_OscConfig+0x478>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fe f873 	bl	80024dc <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fe f86f 	bl	80024dc <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e05c      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCC_OscConfig+0x416>
 8004418:	e054      	b.n	80044c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441a:	4b10      	ldr	r3, [pc, #64]	; (800445c <HAL_RCC_OscConfig+0x478>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fe f85c 	bl	80024dc <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004428:	f7fe f858 	bl	80024dc <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e045      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <HAL_RCC_OscConfig+0x470>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x444>
 8004446:	e03d      	b.n	80044c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d107      	bne.n	8004460 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e038      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
 8004454:	40023800 	.word	0x40023800
 8004458:	40007000 	.word	0x40007000
 800445c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004460:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <HAL_RCC_OscConfig+0x4ec>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d028      	beq.n	80044c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d121      	bne.n	80044c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d11a      	bne.n	80044c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004490:	4013      	ands	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004496:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004498:	4293      	cmp	r3, r2
 800449a:	d111      	bne.n	80044c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	3b01      	subs	r3, #1
 80044aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d001      	beq.n	80044c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800

080044d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0cc      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044e8:	4b68      	ldr	r3, [pc, #416]	; (800468c <HAL_RCC_ClockConfig+0x1b8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d90c      	bls.n	8004510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b65      	ldr	r3, [pc, #404]	; (800468c <HAL_RCC_ClockConfig+0x1b8>)
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b63      	ldr	r3, [pc, #396]	; (800468c <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d001      	beq.n	8004510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0b8      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d020      	beq.n	800455e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004528:	4b59      	ldr	r3, [pc, #356]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4a58      	ldr	r2, [pc, #352]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004540:	4b53      	ldr	r3, [pc, #332]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	4a52      	ldr	r2, [pc, #328]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800454a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800454c:	4b50      	ldr	r3, [pc, #320]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	494d      	ldr	r1, [pc, #308]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d044      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d107      	bne.n	8004582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004572:	4b47      	ldr	r3, [pc, #284]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d119      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e07f      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d003      	beq.n	8004592 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800458e:	2b03      	cmp	r3, #3
 8004590:	d107      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004592:	4b3f      	ldr	r3, [pc, #252]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e06f      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a2:	4b3b      	ldr	r3, [pc, #236]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e067      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045b2:	4b37      	ldr	r3, [pc, #220]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f023 0203 	bic.w	r2, r3, #3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	4934      	ldr	r1, [pc, #208]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045c4:	f7fd ff8a 	bl	80024dc <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	e00a      	b.n	80045e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045cc:	f7fd ff86 	bl	80024dc <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045da:	4293      	cmp	r3, r2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e04f      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e2:	4b2b      	ldr	r3, [pc, #172]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 020c 	and.w	r2, r3, #12
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d1eb      	bne.n	80045cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045f4:	4b25      	ldr	r3, [pc, #148]	; (800468c <HAL_RCC_ClockConfig+0x1b8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d20c      	bcs.n	800461c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004602:	4b22      	ldr	r3, [pc, #136]	; (800468c <HAL_RCC_ClockConfig+0x1b8>)
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b20      	ldr	r3, [pc, #128]	; (800468c <HAL_RCC_ClockConfig+0x1b8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e032      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004628:	4b19      	ldr	r3, [pc, #100]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4916      	ldr	r1, [pc, #88]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004646:	4b12      	ldr	r3, [pc, #72]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	490e      	ldr	r1, [pc, #56]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800465a:	f000 f821 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 800465e:	4602      	mov	r2, r0
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	490a      	ldr	r1, [pc, #40]	; (8004694 <HAL_RCC_ClockConfig+0x1c0>)
 800466c:	5ccb      	ldrb	r3, [r1, r3]
 800466e:	fa22 f303 	lsr.w	r3, r2, r3
 8004672:	4a09      	ldr	r2, [pc, #36]	; (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f7fd feea 	bl	8002454 <HAL_InitTick>

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40023c00 	.word	0x40023c00
 8004690:	40023800 	.word	0x40023800
 8004694:	0800ac6c 	.word	0x0800ac6c
 8004698:	20000000 	.word	0x20000000
 800469c:	20000004 	.word	0x20000004

080046a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a4:	b094      	sub	sp, #80	; 0x50
 80046a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	647b      	str	r3, [r7, #68]	; 0x44
 80046ac:	2300      	movs	r3, #0
 80046ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b0:	2300      	movs	r3, #0
 80046b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046b8:	4b79      	ldr	r3, [pc, #484]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 030c 	and.w	r3, r3, #12
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d00d      	beq.n	80046e0 <HAL_RCC_GetSysClockFreq+0x40>
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	f200 80e1 	bhi.w	800488c <HAL_RCC_GetSysClockFreq+0x1ec>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_RCC_GetSysClockFreq+0x34>
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d003      	beq.n	80046da <HAL_RCC_GetSysClockFreq+0x3a>
 80046d2:	e0db      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046d4:	4b73      	ldr	r3, [pc, #460]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80046d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80046d8:	e0db      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046da:	4b73      	ldr	r3, [pc, #460]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80046dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046de:	e0d8      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046e0:	4b6f      	ldr	r3, [pc, #444]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ea:	4b6d      	ldr	r3, [pc, #436]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d063      	beq.n	80047be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f6:	4b6a      	ldr	r3, [pc, #424]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	099b      	lsrs	r3, r3, #6
 80046fc:	2200      	movs	r2, #0
 80046fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004700:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004708:	633b      	str	r3, [r7, #48]	; 0x30
 800470a:	2300      	movs	r3, #0
 800470c:	637b      	str	r3, [r7, #52]	; 0x34
 800470e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004712:	4622      	mov	r2, r4
 8004714:	462b      	mov	r3, r5
 8004716:	f04f 0000 	mov.w	r0, #0
 800471a:	f04f 0100 	mov.w	r1, #0
 800471e:	0159      	lsls	r1, r3, #5
 8004720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004724:	0150      	lsls	r0, r2, #5
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4621      	mov	r1, r4
 800472c:	1a51      	subs	r1, r2, r1
 800472e:	6139      	str	r1, [r7, #16]
 8004730:	4629      	mov	r1, r5
 8004732:	eb63 0301 	sbc.w	r3, r3, r1
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004744:	4659      	mov	r1, fp
 8004746:	018b      	lsls	r3, r1, #6
 8004748:	4651      	mov	r1, sl
 800474a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800474e:	4651      	mov	r1, sl
 8004750:	018a      	lsls	r2, r1, #6
 8004752:	4651      	mov	r1, sl
 8004754:	ebb2 0801 	subs.w	r8, r2, r1
 8004758:	4659      	mov	r1, fp
 800475a:	eb63 0901 	sbc.w	r9, r3, r1
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800476a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800476e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004772:	4690      	mov	r8, r2
 8004774:	4699      	mov	r9, r3
 8004776:	4623      	mov	r3, r4
 8004778:	eb18 0303 	adds.w	r3, r8, r3
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	462b      	mov	r3, r5
 8004780:	eb49 0303 	adc.w	r3, r9, r3
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004792:	4629      	mov	r1, r5
 8004794:	024b      	lsls	r3, r1, #9
 8004796:	4621      	mov	r1, r4
 8004798:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800479c:	4621      	mov	r1, r4
 800479e:	024a      	lsls	r2, r1, #9
 80047a0:	4610      	mov	r0, r2
 80047a2:	4619      	mov	r1, r3
 80047a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047a6:	2200      	movs	r2, #0
 80047a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047b0:	f7fc f8a4 	bl	80008fc <__aeabi_uldivmod>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4613      	mov	r3, r2
 80047ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047bc:	e058      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047be:	4b38      	ldr	r3, [pc, #224]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	099b      	lsrs	r3, r3, #6
 80047c4:	2200      	movs	r2, #0
 80047c6:	4618      	mov	r0, r3
 80047c8:	4611      	mov	r1, r2
 80047ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047ce:	623b      	str	r3, [r7, #32]
 80047d0:	2300      	movs	r3, #0
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
 80047d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047d8:	4642      	mov	r2, r8
 80047da:	464b      	mov	r3, r9
 80047dc:	f04f 0000 	mov.w	r0, #0
 80047e0:	f04f 0100 	mov.w	r1, #0
 80047e4:	0159      	lsls	r1, r3, #5
 80047e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ea:	0150      	lsls	r0, r2, #5
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4641      	mov	r1, r8
 80047f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80047f6:	4649      	mov	r1, r9
 80047f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004808:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800480c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004810:	ebb2 040a 	subs.w	r4, r2, sl
 8004814:	eb63 050b 	sbc.w	r5, r3, fp
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	00eb      	lsls	r3, r5, #3
 8004822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004826:	00e2      	lsls	r2, r4, #3
 8004828:	4614      	mov	r4, r2
 800482a:	461d      	mov	r5, r3
 800482c:	4643      	mov	r3, r8
 800482e:	18e3      	adds	r3, r4, r3
 8004830:	603b      	str	r3, [r7, #0]
 8004832:	464b      	mov	r3, r9
 8004834:	eb45 0303 	adc.w	r3, r5, r3
 8004838:	607b      	str	r3, [r7, #4]
 800483a:	f04f 0200 	mov.w	r2, #0
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004846:	4629      	mov	r1, r5
 8004848:	028b      	lsls	r3, r1, #10
 800484a:	4621      	mov	r1, r4
 800484c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004850:	4621      	mov	r1, r4
 8004852:	028a      	lsls	r2, r1, #10
 8004854:	4610      	mov	r0, r2
 8004856:	4619      	mov	r1, r3
 8004858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800485a:	2200      	movs	r2, #0
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	61fa      	str	r2, [r7, #28]
 8004860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004864:	f7fc f84a 	bl	80008fc <__aeabi_uldivmod>
 8004868:	4602      	mov	r2, r0
 800486a:	460b      	mov	r3, r1
 800486c:	4613      	mov	r3, r2
 800486e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	3301      	adds	r3, #1
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004884:	fbb2 f3f3 	udiv	r3, r2, r3
 8004888:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800488a:	e002      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800488e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004894:	4618      	mov	r0, r3
 8004896:	3750      	adds	r7, #80	; 0x50
 8004898:	46bd      	mov	sp, r7
 800489a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800489e:	bf00      	nop
 80048a0:	40023800 	.word	0x40023800
 80048a4:	00f42400 	.word	0x00f42400
 80048a8:	007a1200 	.word	0x007a1200

080048ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048b2:	681b      	ldr	r3, [r3, #0]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20000000 	.word	0x20000000

080048c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048c8:	f7ff fff0 	bl	80048ac <HAL_RCC_GetHCLKFreq>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	0a9b      	lsrs	r3, r3, #10
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	4903      	ldr	r1, [pc, #12]	; (80048e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048da:	5ccb      	ldrb	r3, [r1, r3]
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40023800 	.word	0x40023800
 80048e8:	0800ac7c 	.word	0x0800ac7c

080048ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048f0:	f7ff ffdc 	bl	80048ac <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RCC_GetPCLK2Freq+0x20>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0b5b      	lsrs	r3, r3, #13
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4903      	ldr	r1, [pc, #12]	; (8004910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40023800 	.word	0x40023800
 8004910:	0800ac7c 	.word	0x0800ac7c

08004914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e07b      	b.n	8004a1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	2b00      	cmp	r3, #0
 800492c:	d108      	bne.n	8004940 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004936:	d009      	beq.n	800494c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	61da      	str	r2, [r3, #28]
 800493e:	e005      	b.n	800494c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d106      	bne.n	800496c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fd fb3c 	bl	8001fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004982:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d0:	ea42 0103 	orr.w	r1, r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	f003 0104 	and.w	r1, r3, #4
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	f003 0210 	and.w	r2, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b088      	sub	sp, #32
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_SPI_Transmit+0x22>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e126      	b.n	8004c96 <HAL_SPI_Transmit+0x270>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a50:	f7fd fd44 	bl	80024dc <HAL_GetTick>
 8004a54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d002      	beq.n	8004a6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
 8004a68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a6a:	e10b      	b.n	8004c84 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_SPI_Transmit+0x52>
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a7c:	e102      	b.n	8004c84 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2203      	movs	r2, #3
 8004a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	88fa      	ldrh	r2, [r7, #6]
 8004a96:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	88fa      	ldrh	r2, [r7, #6]
 8004a9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac4:	d10f      	bne.n	8004ae6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ae4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af0:	2b40      	cmp	r3, #64	; 0x40
 8004af2:	d007      	beq.n	8004b04 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0c:	d14b      	bne.n	8004ba6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_SPI_Transmit+0xf6>
 8004b16:	8afb      	ldrh	r3, [r7, #22]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d13e      	bne.n	8004b9a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	881a      	ldrh	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	1c9a      	adds	r2, r3, #2
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b40:	e02b      	b.n	8004b9a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d112      	bne.n	8004b76 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	881a      	ldrh	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	1c9a      	adds	r2, r3, #2
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b74:	e011      	b.n	8004b9a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b76:	f7fd fcb1 	bl	80024dc <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d803      	bhi.n	8004b8e <HAL_SPI_Transmit+0x168>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d102      	bne.n	8004b94 <HAL_SPI_Transmit+0x16e>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b98:	e074      	b.n	8004c84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1ce      	bne.n	8004b42 <HAL_SPI_Transmit+0x11c>
 8004ba4:	e04c      	b.n	8004c40 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_SPI_Transmit+0x18e>
 8004bae:	8afb      	ldrh	r3, [r7, #22]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d140      	bne.n	8004c36 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	7812      	ldrb	r2, [r2, #0]
 8004bc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004bda:	e02c      	b.n	8004c36 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d113      	bne.n	8004c12 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	7812      	ldrb	r2, [r2, #0]
 8004bf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c10:	e011      	b.n	8004c36 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c12:	f7fd fc63 	bl	80024dc <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d803      	bhi.n	8004c2a <HAL_SPI_Transmit+0x204>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d102      	bne.n	8004c30 <HAL_SPI_Transmit+0x20a>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d102      	bne.n	8004c36 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c34:	e026      	b.n	8004c84 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1cd      	bne.n	8004bdc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	6839      	ldr	r1, [r7, #0]
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fbcb 	bl	80053e0 <SPI_EndRxTxTransaction>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10a      	bne.n	8004c74 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	77fb      	strb	r3, [r7, #31]
 8004c80:	e000      	b.n	8004c84 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c94:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b088      	sub	sp, #32
 8004ca2:	af02      	add	r7, sp, #8
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cba:	d112      	bne.n	8004ce2 <HAL_SPI_Receive+0x44>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10e      	bne.n	8004ce2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ccc:	88fa      	ldrh	r2, [r7, #6]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f8f1 	bl	8004ec0 <HAL_SPI_TransmitReceive>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	e0ea      	b.n	8004eb8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_SPI_Receive+0x52>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e0e3      	b.n	8004eb8 <HAL_SPI_Receive+0x21a>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cf8:	f7fd fbf0 	bl	80024dc <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d002      	beq.n	8004d10 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d0e:	e0ca      	b.n	8004ea6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Receive+0x7e>
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d20:	e0c1      	b.n	8004ea6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2204      	movs	r2, #4
 8004d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	88fa      	ldrh	r2, [r7, #6]
 8004d3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d68:	d10f      	bne.n	8004d8a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d88:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b40      	cmp	r3, #64	; 0x40
 8004d96:	d007      	beq.n	8004da8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d162      	bne.n	8004e76 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004db0:	e02e      	b.n	8004e10 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d115      	bne.n	8004dec <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f103 020c 	add.w	r2, r3, #12
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	7812      	ldrb	r2, [r2, #0]
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	3b01      	subs	r3, #1
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dea:	e011      	b.n	8004e10 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dec:	f7fd fb76 	bl	80024dc <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d803      	bhi.n	8004e04 <HAL_SPI_Receive+0x166>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e02:	d102      	bne.n	8004e0a <HAL_SPI_Receive+0x16c>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d102      	bne.n	8004e10 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e0e:	e04a      	b.n	8004ea6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1cb      	bne.n	8004db2 <HAL_SPI_Receive+0x114>
 8004e1a:	e031      	b.n	8004e80 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d113      	bne.n	8004e52 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68da      	ldr	r2, [r3, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	b292      	uxth	r2, r2
 8004e36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3c:	1c9a      	adds	r2, r3, #2
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e50:	e011      	b.n	8004e76 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e52:	f7fd fb43 	bl	80024dc <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d803      	bhi.n	8004e6a <HAL_SPI_Receive+0x1cc>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d102      	bne.n	8004e70 <HAL_SPI_Receive+0x1d2>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e74:	e017      	b.n	8004ea6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1cd      	bne.n	8004e1c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	6839      	ldr	r1, [r7, #0]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 fa45 	bl	8005314 <SPI_EndRxTransaction>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	75fb      	strb	r3, [r7, #23]
 8004ea2:	e000      	b.n	8004ea6 <HAL_SPI_Receive+0x208>
  }

error :
 8004ea4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08c      	sub	sp, #48	; 0x30
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_SPI_TransmitReceive+0x26>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e18a      	b.n	80051fc <HAL_SPI_TransmitReceive+0x33c>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eee:	f7fd faf5 	bl	80024dc <HAL_GetTick>
 8004ef2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f04:	887b      	ldrh	r3, [r7, #2]
 8004f06:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d00f      	beq.n	8004f30 <HAL_SPI_TransmitReceive+0x70>
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f16:	d107      	bne.n	8004f28 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d103      	bne.n	8004f28 <HAL_SPI_TransmitReceive+0x68>
 8004f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d003      	beq.n	8004f30 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f28:	2302      	movs	r3, #2
 8004f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f2e:	e15b      	b.n	80051e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x82>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x82>
 8004f3c:	887b      	ldrh	r3, [r7, #2]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d103      	bne.n	8004f4a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f48:	e14e      	b.n	80051e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d003      	beq.n	8004f5e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2205      	movs	r2, #5
 8004f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	887a      	ldrh	r2, [r7, #2]
 8004f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	887a      	ldrh	r2, [r7, #2]
 8004f74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	887a      	ldrh	r2, [r7, #2]
 8004f80:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	887a      	ldrh	r2, [r7, #2]
 8004f86:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d007      	beq.n	8004fb2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fba:	d178      	bne.n	80050ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <HAL_SPI_TransmitReceive+0x10a>
 8004fc4:	8b7b      	ldrh	r3, [r7, #26]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d166      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	881a      	ldrh	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	1c9a      	adds	r2, r3, #2
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fee:	e053      	b.n	8005098 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d11b      	bne.n	8005036 <HAL_SPI_TransmitReceive+0x176>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d016      	beq.n	8005036 <HAL_SPI_TransmitReceive+0x176>
 8005008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d113      	bne.n	8005036 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	881a      	ldrh	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	1c9a      	adds	r2, r3, #2
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b01      	cmp	r3, #1
 8005042:	d119      	bne.n	8005078 <HAL_SPI_TransmitReceive+0x1b8>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d014      	beq.n	8005078 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	b292      	uxth	r2, r2
 800505a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	1c9a      	adds	r2, r3, #2
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005074:	2301      	movs	r3, #1
 8005076:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005078:	f7fd fa30 	bl	80024dc <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005084:	429a      	cmp	r2, r3
 8005086:	d807      	bhi.n	8005098 <HAL_SPI_TransmitReceive+0x1d8>
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d003      	beq.n	8005098 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005096:	e0a7      	b.n	80051e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1a6      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x130>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1a1      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x130>
 80050ac:	e07c      	b.n	80051a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <HAL_SPI_TransmitReceive+0x1fc>
 80050b6:	8b7b      	ldrh	r3, [r7, #26]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d16b      	bne.n	8005194 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	330c      	adds	r3, #12
 80050c6:	7812      	ldrb	r2, [r2, #0]
 80050c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050e2:	e057      	b.n	8005194 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d11c      	bne.n	800512c <HAL_SPI_TransmitReceive+0x26c>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d017      	beq.n	800512c <HAL_SPI_TransmitReceive+0x26c>
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d114      	bne.n	800512c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	7812      	ldrb	r2, [r2, #0]
 800510e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b01      	cmp	r3, #1
 8005138:	d119      	bne.n	800516e <HAL_SPI_TransmitReceive+0x2ae>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d014      	beq.n	800516e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800516a:	2301      	movs	r3, #1
 800516c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800516e:	f7fd f9b5 	bl	80024dc <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800517a:	429a      	cmp	r2, r3
 800517c:	d803      	bhi.n	8005186 <HAL_SPI_TransmitReceive+0x2c6>
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005184:	d102      	bne.n	800518c <HAL_SPI_TransmitReceive+0x2cc>
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	2b00      	cmp	r3, #0
 800518a:	d103      	bne.n	8005194 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005192:	e029      	b.n	80051e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1a2      	bne.n	80050e4 <HAL_SPI_TransmitReceive+0x224>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d19d      	bne.n	80050e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f917 	bl	80053e0 <SPI_EndRxTxTransaction>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d006      	beq.n	80051c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2220      	movs	r2, #32
 80051c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80051c4:	e010      	b.n	80051e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10b      	bne.n	80051e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	e000      	b.n	80051e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80051e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3730      	adds	r7, #48	; 0x30
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	4613      	mov	r3, r2
 8005212:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005214:	f7fd f962 	bl	80024dc <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521c:	1a9b      	subs	r3, r3, r2
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	4413      	add	r3, r2
 8005222:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005224:	f7fd f95a 	bl	80024dc <HAL_GetTick>
 8005228:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800522a:	4b39      	ldr	r3, [pc, #228]	; (8005310 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	015b      	lsls	r3, r3, #5
 8005230:	0d1b      	lsrs	r3, r3, #20
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	fb02 f303 	mul.w	r3, r2, r3
 8005238:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800523a:	e054      	b.n	80052e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	d050      	beq.n	80052e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005244:	f7fd f94a 	bl	80024dc <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	429a      	cmp	r2, r3
 8005252:	d902      	bls.n	800525a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d13d      	bne.n	80052d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005272:	d111      	bne.n	8005298 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800527c:	d004      	beq.n	8005288 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005286:	d107      	bne.n	8005298 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005296:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a0:	d10f      	bne.n	80052c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e017      	b.n	8005306 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	3b01      	subs	r3, #1
 80052e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4013      	ands	r3, r2
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	bf0c      	ite	eq
 80052f6:	2301      	moveq	r3, #1
 80052f8:	2300      	movne	r3, #0
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	429a      	cmp	r2, r3
 8005302:	d19b      	bne.n	800523c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	20000000 	.word	0x20000000

08005314 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af02      	add	r7, sp, #8
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005328:	d111      	bne.n	800534e <SPI_EndRxTransaction+0x3a>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005332:	d004      	beq.n	800533e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533c:	d107      	bne.n	800534e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800534c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005356:	d12a      	bne.n	80053ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005360:	d012      	beq.n	8005388 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2200      	movs	r2, #0
 800536a:	2180      	movs	r1, #128	; 0x80
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff ff49 	bl	8005204 <SPI_WaitFlagStateUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d02d      	beq.n	80053d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537c:	f043 0220 	orr.w	r2, r3, #32
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e026      	b.n	80053d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2200      	movs	r2, #0
 8005390:	2101      	movs	r1, #1
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7ff ff36 	bl	8005204 <SPI_WaitFlagStateUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01a      	beq.n	80053d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	f043 0220 	orr.w	r2, r3, #32
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e013      	b.n	80053d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2200      	movs	r2, #0
 80053b6:	2101      	movs	r1, #1
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f7ff ff23 	bl	8005204 <SPI_WaitFlagStateUntilTimeout>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d007      	beq.n	80053d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c8:	f043 0220 	orr.w	r2, r3, #32
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e000      	b.n	80053d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053ec:	4b1b      	ldr	r3, [pc, #108]	; (800545c <SPI_EndRxTxTransaction+0x7c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1b      	ldr	r2, [pc, #108]	; (8005460 <SPI_EndRxTxTransaction+0x80>)
 80053f2:	fba2 2303 	umull	r2, r3, r2, r3
 80053f6:	0d5b      	lsrs	r3, r3, #21
 80053f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053fc:	fb02 f303 	mul.w	r3, r2, r3
 8005400:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800540a:	d112      	bne.n	8005432 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2200      	movs	r2, #0
 8005414:	2180      	movs	r1, #128	; 0x80
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f7ff fef4 	bl	8005204 <SPI_WaitFlagStateUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d016      	beq.n	8005450 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005426:	f043 0220 	orr.w	r2, r3, #32
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e00f      	b.n	8005452 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	3b01      	subs	r3, #1
 800543c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005448:	2b80      	cmp	r3, #128	; 0x80
 800544a:	d0f2      	beq.n	8005432 <SPI_EndRxTxTransaction+0x52>
 800544c:	e000      	b.n	8005450 <SPI_EndRxTxTransaction+0x70>
        break;
 800544e:	bf00      	nop
  }

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000000 	.word	0x20000000
 8005460:	165e9f81 	.word	0x165e9f81

08005464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e03f      	b.n	80054f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fc ff4e 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2224      	movs	r2, #36	; 0x24
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f829 	bl	8005500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005504:	b0c0      	sub	sp, #256	; 0x100
 8005506:	af00      	add	r7, sp, #0
 8005508:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800550c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551c:	68d9      	ldr	r1, [r3, #12]
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	ea40 0301 	orr.w	r3, r0, r1
 8005528:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	431a      	orrs	r2, r3
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	431a      	orrs	r2, r3
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005558:	f021 010c 	bic.w	r1, r1, #12
 800555c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005566:	430b      	orrs	r3, r1
 8005568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800556a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557a:	6999      	ldr	r1, [r3, #24]
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	ea40 0301 	orr.w	r3, r0, r1
 8005586:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	4b8f      	ldr	r3, [pc, #572]	; (80057cc <UART_SetConfig+0x2cc>)
 8005590:	429a      	cmp	r2, r3
 8005592:	d005      	beq.n	80055a0 <UART_SetConfig+0xa0>
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4b8d      	ldr	r3, [pc, #564]	; (80057d0 <UART_SetConfig+0x2d0>)
 800559c:	429a      	cmp	r2, r3
 800559e:	d104      	bne.n	80055aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055a0:	f7ff f9a4 	bl	80048ec <HAL_RCC_GetPCLK2Freq>
 80055a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80055a8:	e003      	b.n	80055b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055aa:	f7ff f98b 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
 80055ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055bc:	f040 810c 	bne.w	80057d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055d2:	4622      	mov	r2, r4
 80055d4:	462b      	mov	r3, r5
 80055d6:	1891      	adds	r1, r2, r2
 80055d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80055da:	415b      	adcs	r3, r3
 80055dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055e2:	4621      	mov	r1, r4
 80055e4:	eb12 0801 	adds.w	r8, r2, r1
 80055e8:	4629      	mov	r1, r5
 80055ea:	eb43 0901 	adc.w	r9, r3, r1
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	f04f 0300 	mov.w	r3, #0
 80055f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005602:	4690      	mov	r8, r2
 8005604:	4699      	mov	r9, r3
 8005606:	4623      	mov	r3, r4
 8005608:	eb18 0303 	adds.w	r3, r8, r3
 800560c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005610:	462b      	mov	r3, r5
 8005612:	eb49 0303 	adc.w	r3, r9, r3
 8005616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800561a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005626:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800562a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800562e:	460b      	mov	r3, r1
 8005630:	18db      	adds	r3, r3, r3
 8005632:	653b      	str	r3, [r7, #80]	; 0x50
 8005634:	4613      	mov	r3, r2
 8005636:	eb42 0303 	adc.w	r3, r2, r3
 800563a:	657b      	str	r3, [r7, #84]	; 0x54
 800563c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005640:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005644:	f7fb f95a 	bl	80008fc <__aeabi_uldivmod>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4b61      	ldr	r3, [pc, #388]	; (80057d4 <UART_SetConfig+0x2d4>)
 800564e:	fba3 2302 	umull	r2, r3, r3, r2
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	011c      	lsls	r4, r3, #4
 8005656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800565a:	2200      	movs	r2, #0
 800565c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005660:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005664:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005668:	4642      	mov	r2, r8
 800566a:	464b      	mov	r3, r9
 800566c:	1891      	adds	r1, r2, r2
 800566e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005670:	415b      	adcs	r3, r3
 8005672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005678:	4641      	mov	r1, r8
 800567a:	eb12 0a01 	adds.w	sl, r2, r1
 800567e:	4649      	mov	r1, r9
 8005680:	eb43 0b01 	adc.w	fp, r3, r1
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005690:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005698:	4692      	mov	sl, r2
 800569a:	469b      	mov	fp, r3
 800569c:	4643      	mov	r3, r8
 800569e:	eb1a 0303 	adds.w	r3, sl, r3
 80056a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056a6:	464b      	mov	r3, r9
 80056a8:	eb4b 0303 	adc.w	r3, fp, r3
 80056ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80056c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056c4:	460b      	mov	r3, r1
 80056c6:	18db      	adds	r3, r3, r3
 80056c8:	643b      	str	r3, [r7, #64]	; 0x40
 80056ca:	4613      	mov	r3, r2
 80056cc:	eb42 0303 	adc.w	r3, r2, r3
 80056d0:	647b      	str	r3, [r7, #68]	; 0x44
 80056d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056da:	f7fb f90f 	bl	80008fc <__aeabi_uldivmod>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4611      	mov	r1, r2
 80056e4:	4b3b      	ldr	r3, [pc, #236]	; (80057d4 <UART_SetConfig+0x2d4>)
 80056e6:	fba3 2301 	umull	r2, r3, r3, r1
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	2264      	movs	r2, #100	; 0x64
 80056ee:	fb02 f303 	mul.w	r3, r2, r3
 80056f2:	1acb      	subs	r3, r1, r3
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056fa:	4b36      	ldr	r3, [pc, #216]	; (80057d4 <UART_SetConfig+0x2d4>)
 80056fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005700:	095b      	lsrs	r3, r3, #5
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005708:	441c      	add	r4, r3
 800570a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800570e:	2200      	movs	r2, #0
 8005710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005714:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005718:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800571c:	4642      	mov	r2, r8
 800571e:	464b      	mov	r3, r9
 8005720:	1891      	adds	r1, r2, r2
 8005722:	63b9      	str	r1, [r7, #56]	; 0x38
 8005724:	415b      	adcs	r3, r3
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800572c:	4641      	mov	r1, r8
 800572e:	1851      	adds	r1, r2, r1
 8005730:	6339      	str	r1, [r7, #48]	; 0x30
 8005732:	4649      	mov	r1, r9
 8005734:	414b      	adcs	r3, r1
 8005736:	637b      	str	r3, [r7, #52]	; 0x34
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005744:	4659      	mov	r1, fp
 8005746:	00cb      	lsls	r3, r1, #3
 8005748:	4651      	mov	r1, sl
 800574a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800574e:	4651      	mov	r1, sl
 8005750:	00ca      	lsls	r2, r1, #3
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	4603      	mov	r3, r0
 8005758:	4642      	mov	r2, r8
 800575a:	189b      	adds	r3, r3, r2
 800575c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005760:	464b      	mov	r3, r9
 8005762:	460a      	mov	r2, r1
 8005764:	eb42 0303 	adc.w	r3, r2, r3
 8005768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005778:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800577c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005780:	460b      	mov	r3, r1
 8005782:	18db      	adds	r3, r3, r3
 8005784:	62bb      	str	r3, [r7, #40]	; 0x28
 8005786:	4613      	mov	r3, r2
 8005788:	eb42 0303 	adc.w	r3, r2, r3
 800578c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800578e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005792:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005796:	f7fb f8b1 	bl	80008fc <__aeabi_uldivmod>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <UART_SetConfig+0x2d4>)
 80057a0:	fba3 1302 	umull	r1, r3, r3, r2
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	2164      	movs	r1, #100	; 0x64
 80057a8:	fb01 f303 	mul.w	r3, r1, r3
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	3332      	adds	r3, #50	; 0x32
 80057b2:	4a08      	ldr	r2, [pc, #32]	; (80057d4 <UART_SetConfig+0x2d4>)
 80057b4:	fba2 2303 	umull	r2, r3, r2, r3
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	f003 0207 	and.w	r2, r3, #7
 80057be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4422      	add	r2, r4
 80057c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057c8:	e105      	b.n	80059d6 <UART_SetConfig+0x4d6>
 80057ca:	bf00      	nop
 80057cc:	40011000 	.word	0x40011000
 80057d0:	40011400 	.word	0x40011400
 80057d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057dc:	2200      	movs	r2, #0
 80057de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057ea:	4642      	mov	r2, r8
 80057ec:	464b      	mov	r3, r9
 80057ee:	1891      	adds	r1, r2, r2
 80057f0:	6239      	str	r1, [r7, #32]
 80057f2:	415b      	adcs	r3, r3
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
 80057f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057fa:	4641      	mov	r1, r8
 80057fc:	1854      	adds	r4, r2, r1
 80057fe:	4649      	mov	r1, r9
 8005800:	eb43 0501 	adc.w	r5, r3, r1
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	00eb      	lsls	r3, r5, #3
 800580e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005812:	00e2      	lsls	r2, r4, #3
 8005814:	4614      	mov	r4, r2
 8005816:	461d      	mov	r5, r3
 8005818:	4643      	mov	r3, r8
 800581a:	18e3      	adds	r3, r4, r3
 800581c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005820:	464b      	mov	r3, r9
 8005822:	eb45 0303 	adc.w	r3, r5, r3
 8005826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800582a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005836:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005846:	4629      	mov	r1, r5
 8005848:	008b      	lsls	r3, r1, #2
 800584a:	4621      	mov	r1, r4
 800584c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005850:	4621      	mov	r1, r4
 8005852:	008a      	lsls	r2, r1, #2
 8005854:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005858:	f7fb f850 	bl	80008fc <__aeabi_uldivmod>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4b60      	ldr	r3, [pc, #384]	; (80059e4 <UART_SetConfig+0x4e4>)
 8005862:	fba3 2302 	umull	r2, r3, r3, r2
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	011c      	lsls	r4, r3, #4
 800586a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800586e:	2200      	movs	r2, #0
 8005870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005874:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005878:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800587c:	4642      	mov	r2, r8
 800587e:	464b      	mov	r3, r9
 8005880:	1891      	adds	r1, r2, r2
 8005882:	61b9      	str	r1, [r7, #24]
 8005884:	415b      	adcs	r3, r3
 8005886:	61fb      	str	r3, [r7, #28]
 8005888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800588c:	4641      	mov	r1, r8
 800588e:	1851      	adds	r1, r2, r1
 8005890:	6139      	str	r1, [r7, #16]
 8005892:	4649      	mov	r1, r9
 8005894:	414b      	adcs	r3, r1
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058a4:	4659      	mov	r1, fp
 80058a6:	00cb      	lsls	r3, r1, #3
 80058a8:	4651      	mov	r1, sl
 80058aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ae:	4651      	mov	r1, sl
 80058b0:	00ca      	lsls	r2, r1, #3
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	4642      	mov	r2, r8
 80058ba:	189b      	adds	r3, r3, r2
 80058bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058c0:	464b      	mov	r3, r9
 80058c2:	460a      	mov	r2, r1
 80058c4:	eb42 0303 	adc.w	r3, r2, r3
 80058c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80058d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058e4:	4649      	mov	r1, r9
 80058e6:	008b      	lsls	r3, r1, #2
 80058e8:	4641      	mov	r1, r8
 80058ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058ee:	4641      	mov	r1, r8
 80058f0:	008a      	lsls	r2, r1, #2
 80058f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058f6:	f7fb f801 	bl	80008fc <__aeabi_uldivmod>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4b39      	ldr	r3, [pc, #228]	; (80059e4 <UART_SetConfig+0x4e4>)
 8005900:	fba3 1302 	umull	r1, r3, r3, r2
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	2164      	movs	r1, #100	; 0x64
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	011b      	lsls	r3, r3, #4
 8005910:	3332      	adds	r3, #50	; 0x32
 8005912:	4a34      	ldr	r2, [pc, #208]	; (80059e4 <UART_SetConfig+0x4e4>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800591e:	441c      	add	r4, r3
 8005920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005924:	2200      	movs	r2, #0
 8005926:	673b      	str	r3, [r7, #112]	; 0x70
 8005928:	677a      	str	r2, [r7, #116]	; 0x74
 800592a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800592e:	4642      	mov	r2, r8
 8005930:	464b      	mov	r3, r9
 8005932:	1891      	adds	r1, r2, r2
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	415b      	adcs	r3, r3
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800593e:	4641      	mov	r1, r8
 8005940:	1851      	adds	r1, r2, r1
 8005942:	6039      	str	r1, [r7, #0]
 8005944:	4649      	mov	r1, r9
 8005946:	414b      	adcs	r3, r1
 8005948:	607b      	str	r3, [r7, #4]
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005956:	4659      	mov	r1, fp
 8005958:	00cb      	lsls	r3, r1, #3
 800595a:	4651      	mov	r1, sl
 800595c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005960:	4651      	mov	r1, sl
 8005962:	00ca      	lsls	r2, r1, #3
 8005964:	4610      	mov	r0, r2
 8005966:	4619      	mov	r1, r3
 8005968:	4603      	mov	r3, r0
 800596a:	4642      	mov	r2, r8
 800596c:	189b      	adds	r3, r3, r2
 800596e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005970:	464b      	mov	r3, r9
 8005972:	460a      	mov	r2, r1
 8005974:	eb42 0303 	adc.w	r3, r2, r3
 8005978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	663b      	str	r3, [r7, #96]	; 0x60
 8005984:	667a      	str	r2, [r7, #100]	; 0x64
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005992:	4649      	mov	r1, r9
 8005994:	008b      	lsls	r3, r1, #2
 8005996:	4641      	mov	r1, r8
 8005998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800599c:	4641      	mov	r1, r8
 800599e:	008a      	lsls	r2, r1, #2
 80059a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80059a4:	f7fa ffaa 	bl	80008fc <__aeabi_uldivmod>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <UART_SetConfig+0x4e4>)
 80059ae:	fba3 1302 	umull	r1, r3, r3, r2
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	2164      	movs	r1, #100	; 0x64
 80059b6:	fb01 f303 	mul.w	r3, r1, r3
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	3332      	adds	r3, #50	; 0x32
 80059c0:	4a08      	ldr	r2, [pc, #32]	; (80059e4 <UART_SetConfig+0x4e4>)
 80059c2:	fba2 2303 	umull	r2, r3, r2, r3
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	f003 020f 	and.w	r2, r3, #15
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4422      	add	r2, r4
 80059d4:	609a      	str	r2, [r3, #8]
}
 80059d6:	bf00      	nop
 80059d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059dc:	46bd      	mov	sp, r7
 80059de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059e2:	bf00      	nop
 80059e4:	51eb851f 	.word	0x51eb851f

080059e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059e8:	b084      	sub	sp, #16
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	f107 001c 	add.w	r0, r7, #28
 80059f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d122      	bne.n	8005a46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d105      	bne.n	8005a3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f001 fbee 	bl	800721c <USB_CoreReset>
 8005a40:	4603      	mov	r3, r0
 8005a42:	73fb      	strb	r3, [r7, #15]
 8005a44:	e01a      	b.n	8005a7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f001 fbe2 	bl	800721c <USB_CoreReset>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38
 8005a6e:	e005      	b.n	8005a7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d10b      	bne.n	8005a9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f043 0206 	orr.w	r2, r3, #6
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f043 0220 	orr.w	r2, r3, #32
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aa6:	b004      	add	sp, #16
 8005aa8:	4770      	bx	lr
	...

08005aac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d165      	bne.n	8005b8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4a41      	ldr	r2, [pc, #260]	; (8005bc8 <USB_SetTurnaroundTime+0x11c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d906      	bls.n	8005ad6 <USB_SetTurnaroundTime+0x2a>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4a40      	ldr	r2, [pc, #256]	; (8005bcc <USB_SetTurnaroundTime+0x120>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d202      	bcs.n	8005ad6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005ad0:	230f      	movs	r3, #15
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	e062      	b.n	8005b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4a3c      	ldr	r2, [pc, #240]	; (8005bcc <USB_SetTurnaroundTime+0x120>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d306      	bcc.n	8005aec <USB_SetTurnaroundTime+0x40>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4a3b      	ldr	r2, [pc, #236]	; (8005bd0 <USB_SetTurnaroundTime+0x124>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d202      	bcs.n	8005aec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005ae6:	230e      	movs	r3, #14
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	e057      	b.n	8005b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4a38      	ldr	r2, [pc, #224]	; (8005bd0 <USB_SetTurnaroundTime+0x124>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d306      	bcc.n	8005b02 <USB_SetTurnaroundTime+0x56>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4a37      	ldr	r2, [pc, #220]	; (8005bd4 <USB_SetTurnaroundTime+0x128>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d202      	bcs.n	8005b02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005afc:	230d      	movs	r3, #13
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e04c      	b.n	8005b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	4a33      	ldr	r2, [pc, #204]	; (8005bd4 <USB_SetTurnaroundTime+0x128>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d306      	bcc.n	8005b18 <USB_SetTurnaroundTime+0x6c>
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	4a32      	ldr	r2, [pc, #200]	; (8005bd8 <USB_SetTurnaroundTime+0x12c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d802      	bhi.n	8005b18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005b12:	230c      	movs	r3, #12
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	e041      	b.n	8005b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4a2f      	ldr	r2, [pc, #188]	; (8005bd8 <USB_SetTurnaroundTime+0x12c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d906      	bls.n	8005b2e <USB_SetTurnaroundTime+0x82>
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4a2e      	ldr	r2, [pc, #184]	; (8005bdc <USB_SetTurnaroundTime+0x130>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d802      	bhi.n	8005b2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005b28:	230b      	movs	r3, #11
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	e036      	b.n	8005b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4a2a      	ldr	r2, [pc, #168]	; (8005bdc <USB_SetTurnaroundTime+0x130>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d906      	bls.n	8005b44 <USB_SetTurnaroundTime+0x98>
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	4a29      	ldr	r2, [pc, #164]	; (8005be0 <USB_SetTurnaroundTime+0x134>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d802      	bhi.n	8005b44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005b3e:	230a      	movs	r3, #10
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	e02b      	b.n	8005b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4a26      	ldr	r2, [pc, #152]	; (8005be0 <USB_SetTurnaroundTime+0x134>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d906      	bls.n	8005b5a <USB_SetTurnaroundTime+0xae>
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	4a25      	ldr	r2, [pc, #148]	; (8005be4 <USB_SetTurnaroundTime+0x138>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d202      	bcs.n	8005b5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b54:	2309      	movs	r3, #9
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	e020      	b.n	8005b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	4a21      	ldr	r2, [pc, #132]	; (8005be4 <USB_SetTurnaroundTime+0x138>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d306      	bcc.n	8005b70 <USB_SetTurnaroundTime+0xc4>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	4a20      	ldr	r2, [pc, #128]	; (8005be8 <USB_SetTurnaroundTime+0x13c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d802      	bhi.n	8005b70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b6a:	2308      	movs	r3, #8
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	e015      	b.n	8005b9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4a1d      	ldr	r2, [pc, #116]	; (8005be8 <USB_SetTurnaroundTime+0x13c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d906      	bls.n	8005b86 <USB_SetTurnaroundTime+0xda>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <USB_SetTurnaroundTime+0x140>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d202      	bcs.n	8005b86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b80:	2307      	movs	r3, #7
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	e00a      	b.n	8005b9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b86:	2306      	movs	r3, #6
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	e007      	b.n	8005b9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005b8c:	79fb      	ldrb	r3, [r7, #7]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d102      	bne.n	8005b98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005b92:	2309      	movs	r3, #9
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	e001      	b.n	8005b9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b98:	2309      	movs	r3, #9
 8005b9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	029b      	lsls	r3, r3, #10
 8005bb0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	00d8acbf 	.word	0x00d8acbf
 8005bcc:	00e4e1c0 	.word	0x00e4e1c0
 8005bd0:	00f42400 	.word	0x00f42400
 8005bd4:	01067380 	.word	0x01067380
 8005bd8:	011a499f 	.word	0x011a499f
 8005bdc:	01312cff 	.word	0x01312cff
 8005be0:	014ca43f 	.word	0x014ca43f
 8005be4:	016e3600 	.word	0x016e3600
 8005be8:	01a6ab1f 	.word	0x01a6ab1f
 8005bec:	01e84800 	.word	0x01e84800

08005bf0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f043 0201 	orr.w	r2, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f023 0201 	bic.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d115      	bne.n	8005c82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c62:	2001      	movs	r0, #1
 8005c64:	f7fc fc46 	bl	80024f4 <HAL_Delay>
      ms++;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f001 fa45 	bl	80070fe <USB_GetMode>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d01e      	beq.n	8005cb8 <USB_SetCurrentMode+0x84>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b31      	cmp	r3, #49	; 0x31
 8005c7e:	d9f0      	bls.n	8005c62 <USB_SetCurrentMode+0x2e>
 8005c80:	e01a      	b.n	8005cb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d115      	bne.n	8005cb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c94:	2001      	movs	r0, #1
 8005c96:	f7fc fc2d 	bl	80024f4 <HAL_Delay>
      ms++;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 fa2c 	bl	80070fe <USB_GetMode>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <USB_SetCurrentMode+0x84>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2b31      	cmp	r3, #49	; 0x31
 8005cb0:	d9f0      	bls.n	8005c94 <USB_SetCurrentMode+0x60>
 8005cb2:	e001      	b.n	8005cb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e005      	b.n	8005cc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b32      	cmp	r3, #50	; 0x32
 8005cbc:	d101      	bne.n	8005cc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e000      	b.n	8005cc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ccc:	b084      	sub	sp, #16
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b086      	sub	sp, #24
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	e009      	b.n	8005d00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	3340      	adds	r3, #64	; 0x40
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	613b      	str	r3, [r7, #16]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2b0e      	cmp	r3, #14
 8005d04:	d9f2      	bls.n	8005cec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d11c      	bne.n	8005d46 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d1a:	f043 0302 	orr.w	r3, r3, #2
 8005d1e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38
 8005d44:	e00b      	b.n	8005d5e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d64:	461a      	mov	r2, r3
 8005d66:	2300      	movs	r3, #0
 8005d68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d70:	4619      	mov	r1, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d78:	461a      	mov	r2, r3
 8005d7a:	680b      	ldr	r3, [r1, #0]
 8005d7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d10c      	bne.n	8005d9e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d104      	bne.n	8005d94 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f965 	bl	800605c <USB_SetDevSpeed>
 8005d92:	e008      	b.n	8005da6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d94:	2101      	movs	r1, #1
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f960 	bl	800605c <USB_SetDevSpeed>
 8005d9c:	e003      	b.n	8005da6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d9e:	2103      	movs	r1, #3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f95b 	bl	800605c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005da6:	2110      	movs	r1, #16
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f8f3 	bl	8005f94 <USB_FlushTxFifo>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f91f 	bl	8005ffc <USB_FlushRxFifo>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	461a      	mov	r2, r3
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dda:	461a      	mov	r2, r3
 8005ddc:	2300      	movs	r3, #0
 8005dde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de6:	461a      	mov	r2, r3
 8005de8:	2300      	movs	r3, #0
 8005dea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dec:	2300      	movs	r3, #0
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	e043      	b.n	8005e7a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e08:	d118      	bne.n	8005e3c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	e013      	b.n	8005e4e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e32:	461a      	mov	r2, r3
 8005e34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	e008      	b.n	8005e4e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e48:	461a      	mov	r2, r3
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	3301      	adds	r3, #1
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d3b7      	bcc.n	8005df2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e82:	2300      	movs	r3, #0
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	e043      	b.n	8005f10 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e9e:	d118      	bne.n	8005ed2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	e013      	b.n	8005ee4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	e008      	b.n	8005ee4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ede:	461a      	mov	r2, r3
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f02:	461a      	mov	r2, r3
 8005f04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	613b      	str	r3, [r7, #16]
 8005f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d3b7      	bcc.n	8005e88 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d105      	bne.n	8005f4c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	f043 0210 	orr.w	r2, r3, #16
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699a      	ldr	r2, [r3, #24]
 8005f50:	4b0f      	ldr	r3, [pc, #60]	; (8005f90 <USB_DevInit+0x2c4>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	f043 0208 	orr.w	r2, r3, #8
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d107      	bne.n	8005f80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f78:	f043 0304 	orr.w	r3, r3, #4
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f8c:	b004      	add	sp, #16
 8005f8e:	4770      	bx	lr
 8005f90:	803c3800 	.word	0x803c3800

08005f94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4a13      	ldr	r2, [pc, #76]	; (8005ff8 <USB_FlushTxFifo+0x64>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d901      	bls.n	8005fb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e01b      	b.n	8005fec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	daf2      	bge.n	8005fa2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	019b      	lsls	r3, r3, #6
 8005fc4:	f043 0220 	orr.w	r2, r3, #32
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4a08      	ldr	r2, [pc, #32]	; (8005ff8 <USB_FlushTxFifo+0x64>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d901      	bls.n	8005fde <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e006      	b.n	8005fec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	d0f0      	beq.n	8005fcc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	00030d40 	.word	0x00030d40

08005ffc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3301      	adds	r3, #1
 800600c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4a11      	ldr	r2, [pc, #68]	; (8006058 <USB_FlushRxFifo+0x5c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d901      	bls.n	800601a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e018      	b.n	800604c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	daf2      	bge.n	8006008 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2210      	movs	r2, #16
 800602a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3301      	adds	r3, #1
 8006030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4a08      	ldr	r2, [pc, #32]	; (8006058 <USB_FlushRxFifo+0x5c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d901      	bls.n	800603e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e006      	b.n	800604c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	2b10      	cmp	r3, #16
 8006048:	d0f0      	beq.n	800602c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	00030d40 	.word	0x00030d40

0800605c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800607c:	4313      	orrs	r3, r2
 800607e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800608e:	b480      	push	{r7}
 8006090:	b087      	sub	sp, #28
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 0306 	and.w	r3, r3, #6
 80060a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d102      	bne.n	80060b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80060ae:	2300      	movs	r3, #0
 80060b0:	75fb      	strb	r3, [r7, #23]
 80060b2:	e00a      	b.n	80060ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d002      	beq.n	80060c0 <USB_GetDevSpeed+0x32>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b06      	cmp	r3, #6
 80060be:	d102      	bne.n	80060c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80060c0:	2302      	movs	r3, #2
 80060c2:	75fb      	strb	r3, [r7, #23]
 80060c4:	e001      	b.n	80060ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80060c6:	230f      	movs	r3, #15
 80060c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80060ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	785b      	ldrb	r3, [r3, #1]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d13a      	bne.n	800616a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fa:	69da      	ldr	r2, [r3, #28]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	2101      	movs	r1, #1
 8006106:	fa01 f303 	lsl.w	r3, r1, r3
 800610a:	b29b      	uxth	r3, r3
 800610c:	68f9      	ldr	r1, [r7, #12]
 800610e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006112:	4313      	orrs	r3, r2
 8006114:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d155      	bne.n	80061d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	791b      	ldrb	r3, [r3, #4]
 8006146:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006148:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	059b      	lsls	r3, r3, #22
 800614e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006150:	4313      	orrs	r3, r2
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	e036      	b.n	80061d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006170:	69da      	ldr	r2, [r3, #28]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	2101      	movs	r1, #1
 800617c:	fa01 f303 	lsl.w	r3, r1, r3
 8006180:	041b      	lsls	r3, r3, #16
 8006182:	68f9      	ldr	r1, [r7, #12]
 8006184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006188:	4313      	orrs	r3, r2
 800618a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d11a      	bne.n	80061d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	791b      	ldrb	r3, [r3, #4]
 80061bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80061be:	430b      	orrs	r3, r1
 80061c0:	4313      	orrs	r3, r2
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	785b      	ldrb	r3, [r3, #1]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d161      	bne.n	80062c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800621a:	d11f      	bne.n	800625c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	440a      	add	r2, r1
 8006232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006236:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800623a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	440a      	add	r2, r1
 8006252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006256:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800625a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	2101      	movs	r1, #1
 800626e:	fa01 f303 	lsl.w	r3, r1, r3
 8006272:	b29b      	uxth	r3, r3
 8006274:	43db      	mvns	r3, r3
 8006276:	68f9      	ldr	r1, [r7, #12]
 8006278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800627c:	4013      	ands	r3, r2
 800627e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006286:	69da      	ldr	r2, [r3, #28]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	f003 030f 	and.w	r3, r3, #15
 8006290:	2101      	movs	r1, #1
 8006292:	fa01 f303 	lsl.w	r3, r1, r3
 8006296:	b29b      	uxth	r3, r3
 8006298:	43db      	mvns	r3, r3
 800629a:	68f9      	ldr	r1, [r7, #12]
 800629c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062a0:	4013      	ands	r3, r2
 80062a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	0159      	lsls	r1, r3, #5
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	440b      	add	r3, r1
 80062ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062be:	4619      	mov	r1, r3
 80062c0:	4b35      	ldr	r3, [pc, #212]	; (8006398 <USB_DeactivateEndpoint+0x1b0>)
 80062c2:	4013      	ands	r3, r2
 80062c4:	600b      	str	r3, [r1, #0]
 80062c6:	e060      	b.n	800638a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062de:	d11f      	bne.n	8006320 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	0151      	lsls	r1, r2, #5
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	440a      	add	r2, r1
 8006316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800631a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800631e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	2101      	movs	r1, #1
 8006332:	fa01 f303 	lsl.w	r3, r1, r3
 8006336:	041b      	lsls	r3, r3, #16
 8006338:	43db      	mvns	r3, r3
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006340:	4013      	ands	r3, r2
 8006342:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	f003 030f 	and.w	r3, r3, #15
 8006354:	2101      	movs	r1, #1
 8006356:	fa01 f303 	lsl.w	r3, r1, r3
 800635a:	041b      	lsls	r3, r3, #16
 800635c:	43db      	mvns	r3, r3
 800635e:	68f9      	ldr	r1, [r7, #12]
 8006360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006364:	4013      	ands	r3, r2
 8006366:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	0159      	lsls	r1, r3, #5
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	440b      	add	r3, r1
 800637e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006382:	4619      	mov	r1, r3
 8006384:	4b05      	ldr	r3, [pc, #20]	; (800639c <USB_DeactivateEndpoint+0x1b4>)
 8006386:	4013      	ands	r3, r2
 8006388:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	ec337800 	.word	0xec337800
 800639c:	eff37800 	.word	0xeff37800

080063a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08a      	sub	sp, #40	; 0x28
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	785b      	ldrb	r3, [r3, #1]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	f040 815c 	bne.w	800667a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d132      	bne.n	8006430 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	0151      	lsls	r1, r2, #5
 80063dc:	69fa      	ldr	r2, [r7, #28]
 80063de:	440a      	add	r2, r1
 80063e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	0151      	lsls	r1, r2, #5
 8006400:	69fa      	ldr	r2, [r7, #28]
 8006402:	440a      	add	r2, r1
 8006404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006408:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800640c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	440a      	add	r2, r1
 8006424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006428:	0cdb      	lsrs	r3, r3, #19
 800642a:	04db      	lsls	r3, r3, #19
 800642c:	6113      	str	r3, [r2, #16]
 800642e:	e074      	b.n	800651a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	0151      	lsls	r1, r2, #5
 8006442:	69fa      	ldr	r2, [r7, #28]
 8006444:	440a      	add	r2, r1
 8006446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644a:	0cdb      	lsrs	r3, r3, #19
 800644c:	04db      	lsls	r3, r3, #19
 800644e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	440a      	add	r2, r1
 8006466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800646e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006472:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006480:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	6999      	ldr	r1, [r3, #24]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	440b      	add	r3, r1
 800648c:	1e59      	subs	r1, r3, #1
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	fbb1 f3f3 	udiv	r3, r1, r3
 8006496:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006498:	4b9d      	ldr	r3, [pc, #628]	; (8006710 <USB_EPStartXfer+0x370>)
 800649a:	400b      	ands	r3, r1
 800649c:	69b9      	ldr	r1, [r7, #24]
 800649e:	0148      	lsls	r0, r1, #5
 80064a0:	69f9      	ldr	r1, [r7, #28]
 80064a2:	4401      	add	r1, r0
 80064a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064a8:	4313      	orrs	r3, r2
 80064aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064c2:	69b9      	ldr	r1, [r7, #24]
 80064c4:	0148      	lsls	r0, r1, #5
 80064c6:	69f9      	ldr	r1, [r7, #28]
 80064c8:	4401      	add	r1, r0
 80064ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064ce:	4313      	orrs	r3, r2
 80064d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	791b      	ldrb	r3, [r3, #4]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d11f      	bne.n	800651a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80064f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	4413      	add	r3, r2
 8006502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	0151      	lsls	r1, r2, #5
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	440a      	add	r2, r1
 8006510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006514:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006518:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d14b      	bne.n	80065b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d009      	beq.n	800653c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006534:	461a      	mov	r2, r3
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	791b      	ldrb	r3, [r3, #4]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d128      	bne.n	8006596 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006550:	2b00      	cmp	r3, #0
 8006552:	d110      	bne.n	8006576 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	440a      	add	r2, r1
 800656a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	e00f      	b.n	8006596 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	0151      	lsls	r1, r2, #5
 8006588:	69fa      	ldr	r2, [r7, #28]
 800658a:	440a      	add	r2, r1
 800658c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006594:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	0151      	lsls	r1, r2, #5
 80065a8:	69fa      	ldr	r2, [r7, #28]
 80065aa:	440a      	add	r2, r1
 80065ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	e133      	b.n	8006820 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	0151      	lsls	r1, r2, #5
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	440a      	add	r2, r1
 80065ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	791b      	ldrb	r3, [r3, #4]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d015      	beq.n	800660c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 811b 	beq.w	8006820 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	2101      	movs	r1, #1
 80065fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006600:	69f9      	ldr	r1, [r7, #28]
 8006602:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006606:	4313      	orrs	r3, r2
 8006608:	634b      	str	r3, [r1, #52]	; 0x34
 800660a:	e109      	b.n	8006820 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006618:	2b00      	cmp	r3, #0
 800661a:	d110      	bne.n	800663e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	0151      	lsls	r1, r2, #5
 800662e:	69fa      	ldr	r2, [r7, #28]
 8006630:	440a      	add	r2, r1
 8006632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006636:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	e00f      	b.n	800665e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	0151      	lsls	r1, r2, #5
 8006650:	69fa      	ldr	r2, [r7, #28]
 8006652:	440a      	add	r2, r1
 8006654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	6919      	ldr	r1, [r3, #16]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	781a      	ldrb	r2, [r3, #0]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	b298      	uxth	r0, r3
 800666c:	79fb      	ldrb	r3, [r7, #7]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	4603      	mov	r3, r0
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 fade 	bl	8006c34 <USB_WritePacket>
 8006678:	e0d2      	b.n	8006820 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	440a      	add	r2, r1
 8006690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006694:	0cdb      	lsrs	r3, r3, #19
 8006696:	04db      	lsls	r3, r3, #19
 8006698:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d126      	bne.n	8006714 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066dc:	69b9      	ldr	r1, [r7, #24]
 80066de:	0148      	lsls	r0, r1, #5
 80066e0:	69f9      	ldr	r1, [r7, #28]
 80066e2:	4401      	add	r1, r0
 80066e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066e8:	4313      	orrs	r3, r2
 80066ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	0151      	lsls	r1, r2, #5
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	440a      	add	r2, r1
 8006702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800670a:	6113      	str	r3, [r2, #16]
 800670c:	e03a      	b.n	8006784 <USB_EPStartXfer+0x3e4>
 800670e:	bf00      	nop
 8006710:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	699a      	ldr	r2, [r3, #24]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	4413      	add	r3, r2
 800671e:	1e5a      	subs	r2, r3, #1
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	fbb2 f3f3 	udiv	r3, r2, r3
 8006728:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	8afa      	ldrh	r2, [r7, #22]
 8006730:	fb03 f202 	mul.w	r2, r3, r2
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006744:	691a      	ldr	r2, [r3, #16]
 8006746:	8afb      	ldrh	r3, [r7, #22]
 8006748:	04d9      	lsls	r1, r3, #19
 800674a:	4b38      	ldr	r3, [pc, #224]	; (800682c <USB_EPStartXfer+0x48c>)
 800674c:	400b      	ands	r3, r1
 800674e:	69b9      	ldr	r1, [r7, #24]
 8006750:	0148      	lsls	r0, r1, #5
 8006752:	69f9      	ldr	r1, [r7, #28]
 8006754:	4401      	add	r1, r0
 8006756:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800675a:	4313      	orrs	r3, r2
 800675c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4413      	add	r3, r2
 8006766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006774:	69b9      	ldr	r1, [r7, #24]
 8006776:	0148      	lsls	r0, r1, #5
 8006778:	69f9      	ldr	r1, [r7, #28]
 800677a:	4401      	add	r1, r0
 800677c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006780:	4313      	orrs	r3, r2
 8006782:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d10d      	bne.n	80067a6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d009      	beq.n	80067a6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6919      	ldr	r1, [r3, #16]
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a2:	460a      	mov	r2, r1
 80067a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	791b      	ldrb	r3, [r3, #4]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d128      	bne.n	8006800 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d110      	bne.n	80067e0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	0151      	lsls	r1, r2, #5
 80067d0:	69fa      	ldr	r2, [r7, #28]
 80067d2:	440a      	add	r2, r1
 80067d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	e00f      	b.n	8006800 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	0151      	lsls	r1, r2, #5
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	440a      	add	r2, r1
 80067f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	69fa      	ldr	r2, [r7, #28]
 8006814:	440a      	add	r2, r1
 8006816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800681a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800681e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3720      	adds	r7, #32
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	1ff80000 	.word	0x1ff80000

08006830 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	4613      	mov	r3, r2
 800683c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	785b      	ldrb	r3, [r3, #1]
 800684c:	2b01      	cmp	r3, #1
 800684e:	f040 80ce 	bne.w	80069ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d132      	bne.n	80068c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	0151      	lsls	r1, r2, #5
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	440a      	add	r2, r1
 8006870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006874:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006878:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800687c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	0151      	lsls	r1, r2, #5
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	440a      	add	r2, r1
 8006894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800689c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	0151      	lsls	r1, r2, #5
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	440a      	add	r2, r1
 80068b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b8:	0cdb      	lsrs	r3, r3, #19
 80068ba:	04db      	lsls	r3, r3, #19
 80068bc:	6113      	str	r3, [r2, #16]
 80068be:	e04e      	b.n	800695e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068da:	0cdb      	lsrs	r3, r3, #19
 80068dc:	04db      	lsls	r3, r3, #19
 80068de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006902:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	699a      	ldr	r2, [r3, #24]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	429a      	cmp	r2, r3
 800690e:	d903      	bls.n	8006918 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	0151      	lsls	r1, r2, #5
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	440a      	add	r2, r1
 800692e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006932:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006936:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006944:	691a      	ldr	r2, [r3, #16]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800694e:	6939      	ldr	r1, [r7, #16]
 8006950:	0148      	lsls	r0, r1, #5
 8006952:	6979      	ldr	r1, [r7, #20]
 8006954:	4401      	add	r1, r0
 8006956:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800695a:	4313      	orrs	r3, r2
 800695c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d11e      	bne.n	80069a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d009      	beq.n	8006980 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	461a      	mov	r2, r3
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	0151      	lsls	r1, r2, #5
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	440a      	add	r2, r1
 8006996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	e097      	b.n	8006ad2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	0151      	lsls	r1, r2, #5
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	440a      	add	r2, r1
 80069b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 8083 	beq.w	8006ad2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	f003 030f 	and.w	r3, r3, #15
 80069dc:	2101      	movs	r1, #1
 80069de:	fa01 f303 	lsl.w	r3, r1, r3
 80069e2:	6979      	ldr	r1, [r7, #20]
 80069e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e8:	4313      	orrs	r3, r2
 80069ea:	634b      	str	r3, [r1, #52]	; 0x34
 80069ec:	e071      	b.n	8006ad2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a08:	0cdb      	lsrs	r3, r3, #19
 8006a0a:	04db      	lsls	r3, r3, #19
 8006a0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	0151      	lsls	r1, r2, #5
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	440a      	add	r2, r1
 8006a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	0151      	lsls	r1, r2, #5
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	440a      	add	r2, r1
 8006a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a80:	6939      	ldr	r1, [r7, #16]
 8006a82:	0148      	lsls	r0, r1, #5
 8006a84:	6979      	ldr	r1, [r7, #20]
 8006a86:	4401      	add	r1, r0
 8006a88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006a90:	79fb      	ldrb	r3, [r7, #7]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d10d      	bne.n	8006ab2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d009      	beq.n	8006ab2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6919      	ldr	r1, [r3, #16]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aae:	460a      	mov	r2, r1
 8006ab0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	0151      	lsls	r1, r2, #5
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	440a      	add	r2, r1
 8006ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006acc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ad0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d14a      	bne.n	8006b94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b16:	f040 8086 	bne.w	8006c26 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	7812      	ldrb	r2, [r2, #0]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	7812      	ldrb	r2, [r2, #0]
 8006b52:	0151      	lsls	r1, r2, #5
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	440a      	add	r2, r1
 8006b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d902      	bls.n	8006b78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	75fb      	strb	r3, [r7, #23]
          break;
 8006b76:	e056      	b.n	8006c26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b90:	d0e7      	beq.n	8006b62 <USB_EPStopXfer+0x82>
 8006b92:	e048      	b.n	8006c26 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bac:	d13b      	bne.n	8006c26 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	7812      	ldrb	r2, [r2, #0]
 8006bc2:	0151      	lsls	r1, r2, #5
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	440a      	add	r2, r1
 8006bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bd0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	7812      	ldrb	r2, [r2, #0]
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bf4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d902      	bls.n	8006c0c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	75fb      	strb	r3, [r7, #23]
          break;
 8006c0a:	e00c      	b.n	8006c26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c24:	d0e7      	beq.n	8006bf6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	371c      	adds	r7, #28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b089      	sub	sp, #36	; 0x24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	4611      	mov	r1, r2
 8006c40:	461a      	mov	r2, r3
 8006c42:	460b      	mov	r3, r1
 8006c44:	71fb      	strb	r3, [r7, #7]
 8006c46:	4613      	mov	r3, r2
 8006c48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d123      	bne.n	8006ca2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c5a:	88bb      	ldrh	r3, [r7, #4]
 8006c5c:	3303      	adds	r3, #3
 8006c5e:	089b      	lsrs	r3, r3, #2
 8006c60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c62:	2300      	movs	r3, #0
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	e018      	b.n	8006c9a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	031a      	lsls	r2, r3, #12
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c74:	461a      	mov	r2, r3
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	3301      	adds	r3, #1
 8006c86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	3301      	adds	r3, #1
 8006c92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	3301      	adds	r3, #1
 8006c98:	61bb      	str	r3, [r7, #24]
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d3e2      	bcc.n	8006c68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3724      	adds	r7, #36	; 0x24
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b08b      	sub	sp, #44	; 0x2c
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	089b      	lsrs	r3, r3, #2
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006cce:	88fb      	ldrh	r3, [r7, #6]
 8006cd0:	f003 0303 	and.w	r3, r3, #3
 8006cd4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	623b      	str	r3, [r7, #32]
 8006cda:	e014      	b.n	8006d06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	3301      	adds	r3, #1
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	3301      	adds	r3, #1
 8006d04:	623b      	str	r3, [r7, #32]
 8006d06:	6a3a      	ldr	r2, [r7, #32]
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d3e6      	bcc.n	8006cdc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d0e:	8bfb      	ldrh	r3, [r7, #30]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d01e      	beq.n	8006d52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d1e:	461a      	mov	r2, r3
 8006d20:	f107 0310 	add.w	r3, r7, #16
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	fa22 f303 	lsr.w	r3, r2, r3
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	701a      	strb	r2, [r3, #0]
      i++;
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	3301      	adds	r3, #1
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006d46:	8bfb      	ldrh	r3, [r7, #30]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d4c:	8bfb      	ldrh	r3, [r7, #30]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1ea      	bne.n	8006d28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	372c      	adds	r7, #44	; 0x2c
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	785b      	ldrb	r3, [r3, #1]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d12c      	bne.n	8006dd6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	db12      	blt.n	8006db4 <USB_EPSetStall+0x54>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00f      	beq.n	8006db4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	0151      	lsls	r1, r2, #5
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	440a      	add	r2, r1
 8006daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006db2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	0151      	lsls	r1, r2, #5
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	440a      	add	r2, r1
 8006dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	e02b      	b.n	8006e2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	db12      	blt.n	8006e0e <USB_EPSetStall+0xae>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00f      	beq.n	8006e0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	0151      	lsls	r1, r2, #5
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	440a      	add	r2, r1
 8006e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	0151      	lsls	r1, r2, #5
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	440a      	add	r2, r1
 8006e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	785b      	ldrb	r3, [r3, #1]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d128      	bne.n	8006eaa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	0151      	lsls	r1, r2, #5
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	440a      	add	r2, r1
 8006e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	791b      	ldrb	r3, [r3, #4]
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d003      	beq.n	8006e88 <USB_EPClearStall+0x4c>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	791b      	ldrb	r3, [r3, #4]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d138      	bne.n	8006efa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	0151      	lsls	r1, r2, #5
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	440a      	add	r2, r1
 8006e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	e027      	b.n	8006efa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	0151      	lsls	r1, r2, #5
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	440a      	add	r2, r1
 8006ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ec4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ec8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	791b      	ldrb	r3, [r3, #4]
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d003      	beq.n	8006eda <USB_EPClearStall+0x9e>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	791b      	ldrb	r3, [r3, #4]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d10f      	bne.n	8006efa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	460b      	mov	r3, r1
 8006f12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f2a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006f3c:	68f9      	ldr	r1, [r7, #12]
 8006f3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f42:	4313      	orrs	r3, r2
 8006f44:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f6e:	f023 0303 	bic.w	r3, r3, #3
 8006f72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f82:	f023 0302 	bic.w	r3, r3, #2
 8006f86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b085      	sub	sp, #20
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fb0:	f023 0303 	bic.w	r3, r3, #3
 8006fb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc4:	f043 0302 	orr.w	r3, r3, #2
 8006fc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	4013      	ands	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b085      	sub	sp, #20
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	4013      	ands	r3, r2
 8007020:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	0c1b      	lsrs	r3, r3, #16
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007032:	b480      	push	{r7}
 8007034:	b085      	sub	sp, #20
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704e:	69db      	ldr	r3, [r3, #28]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	4013      	ands	r3, r2
 8007054:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	b29b      	uxth	r3, r3
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007066:	b480      	push	{r7}
 8007068:	b085      	sub	sp, #20
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	460b      	mov	r3, r1
 8007070:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007076:	78fb      	ldrb	r3, [r7, #3]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	4013      	ands	r3, r2
 8007092:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007094:	68bb      	ldr	r3, [r7, #8]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b087      	sub	sp, #28
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	460b      	mov	r3, r1
 80070ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80070c6:	78fb      	ldrb	r3, [r7, #3]
 80070c8:	f003 030f 	and.w	r3, r3, #15
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	fa22 f303 	lsr.w	r3, r2, r3
 80070d2:	01db      	lsls	r3, r3, #7
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80070dc:	78fb      	ldrb	r3, [r7, #3]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	4013      	ands	r3, r2
 80070ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070f0:	68bb      	ldr	r3, [r7, #8]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	371c      	adds	r7, #28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	f003 0301 	and.w	r3, r3, #1
}
 800710e:	4618      	mov	r0, r3
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007134:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007138:	f023 0307 	bic.w	r3, r3, #7
 800713c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800714c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007150:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	460b      	mov	r3, r1
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	333c      	adds	r3, #60	; 0x3c
 8007176:	3304      	adds	r3, #4
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	4a26      	ldr	r2, [pc, #152]	; (8007218 <USB_EP0_OutStart+0xb8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d90a      	bls.n	800719a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007194:	d101      	bne.n	800719a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	e037      	b.n	800720a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a0:	461a      	mov	r2, r3
 80071a2:	2300      	movs	r3, #0
 80071a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071c8:	f043 0318 	orr.w	r3, r3, #24
 80071cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80071e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80071e2:	7afb      	ldrb	r3, [r7, #11]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d10f      	bne.n	8007208 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007202:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007206:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	4f54300a 	.word	0x4f54300a

0800721c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3301      	adds	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4a13      	ldr	r2, [pc, #76]	; (8007280 <USB_CoreReset+0x64>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d901      	bls.n	800723a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e01b      	b.n	8007272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	daf2      	bge.n	8007228 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f043 0201 	orr.w	r2, r3, #1
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3301      	adds	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4a09      	ldr	r2, [pc, #36]	; (8007280 <USB_CoreReset+0x64>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d901      	bls.n	8007264 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e006      	b.n	8007272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b01      	cmp	r3, #1
 800726e:	d0f0      	beq.n	8007252 <USB_CoreReset+0x36>

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	00030d40 	.word	0x00030d40

08007284 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007290:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007294:	f002 fc28 	bl	8009ae8 <USBD_static_malloc>
 8007298:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d109      	bne.n	80072b4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	32b0      	adds	r2, #176	; 0xb0
 80072aa:	2100      	movs	r1, #0
 80072ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80072b0:	2302      	movs	r3, #2
 80072b2:	e0d4      	b.n	800745e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80072b4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80072b8:	2100      	movs	r1, #0
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f002 fc82 	bl	8009bc4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	32b0      	adds	r2, #176	; 0xb0
 80072ca:	68f9      	ldr	r1, [r7, #12]
 80072cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	32b0      	adds	r2, #176	; 0xb0
 80072da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	7c1b      	ldrb	r3, [r3, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d138      	bne.n	800735e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80072ec:	4b5e      	ldr	r3, [pc, #376]	; (8007468 <USBD_CDC_Init+0x1e4>)
 80072ee:	7819      	ldrb	r1, [r3, #0]
 80072f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072f4:	2202      	movs	r2, #2
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f002 fad3 	bl	80098a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80072fc:	4b5a      	ldr	r3, [pc, #360]	; (8007468 <USBD_CDC_Init+0x1e4>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	f003 020f 	and.w	r2, r3, #15
 8007304:	6879      	ldr	r1, [r7, #4]
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	440b      	add	r3, r1
 8007310:	3324      	adds	r3, #36	; 0x24
 8007312:	2201      	movs	r2, #1
 8007314:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007316:	4b55      	ldr	r3, [pc, #340]	; (800746c <USBD_CDC_Init+0x1e8>)
 8007318:	7819      	ldrb	r1, [r3, #0]
 800731a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800731e:	2202      	movs	r2, #2
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f002 fabe 	bl	80098a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007326:	4b51      	ldr	r3, [pc, #324]	; (800746c <USBD_CDC_Init+0x1e8>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	f003 020f 	and.w	r2, r3, #15
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	4613      	mov	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	440b      	add	r3, r1
 800733a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800733e:	2201      	movs	r2, #1
 8007340:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007342:	4b4b      	ldr	r3, [pc, #300]	; (8007470 <USBD_CDC_Init+0x1ec>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	f003 020f 	and.w	r2, r3, #15
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	4613      	mov	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	440b      	add	r3, r1
 8007356:	3326      	adds	r3, #38	; 0x26
 8007358:	2210      	movs	r2, #16
 800735a:	801a      	strh	r2, [r3, #0]
 800735c:	e035      	b.n	80073ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800735e:	4b42      	ldr	r3, [pc, #264]	; (8007468 <USBD_CDC_Init+0x1e4>)
 8007360:	7819      	ldrb	r1, [r3, #0]
 8007362:	2340      	movs	r3, #64	; 0x40
 8007364:	2202      	movs	r2, #2
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f002 fa9b 	bl	80098a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800736c:	4b3e      	ldr	r3, [pc, #248]	; (8007468 <USBD_CDC_Init+0x1e4>)
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	f003 020f 	and.w	r2, r3, #15
 8007374:	6879      	ldr	r1, [r7, #4]
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	440b      	add	r3, r1
 8007380:	3324      	adds	r3, #36	; 0x24
 8007382:	2201      	movs	r2, #1
 8007384:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007386:	4b39      	ldr	r3, [pc, #228]	; (800746c <USBD_CDC_Init+0x1e8>)
 8007388:	7819      	ldrb	r1, [r3, #0]
 800738a:	2340      	movs	r3, #64	; 0x40
 800738c:	2202      	movs	r2, #2
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f002 fa87 	bl	80098a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007394:	4b35      	ldr	r3, [pc, #212]	; (800746c <USBD_CDC_Init+0x1e8>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	f003 020f 	and.w	r2, r3, #15
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073ac:	2201      	movs	r2, #1
 80073ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80073b0:	4b2f      	ldr	r3, [pc, #188]	; (8007470 <USBD_CDC_Init+0x1ec>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	f003 020f 	and.w	r2, r3, #15
 80073b8:	6879      	ldr	r1, [r7, #4]
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	440b      	add	r3, r1
 80073c4:	3326      	adds	r3, #38	; 0x26
 80073c6:	2210      	movs	r2, #16
 80073c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80073ca:	4b29      	ldr	r3, [pc, #164]	; (8007470 <USBD_CDC_Init+0x1ec>)
 80073cc:	7819      	ldrb	r1, [r3, #0]
 80073ce:	2308      	movs	r3, #8
 80073d0:	2203      	movs	r2, #3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f002 fa65 	bl	80098a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80073d8:	4b25      	ldr	r3, [pc, #148]	; (8007470 <USBD_CDC_Init+0x1ec>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	f003 020f 	and.w	r2, r3, #15
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	440b      	add	r3, r1
 80073ec:	3324      	adds	r3, #36	; 0x24
 80073ee:	2201      	movs	r2, #1
 80073f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	33b0      	adds	r3, #176	; 0xb0
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007428:	2302      	movs	r3, #2
 800742a:	e018      	b.n	800745e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	7c1b      	ldrb	r3, [r3, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007434:	4b0d      	ldr	r3, [pc, #52]	; (800746c <USBD_CDC_Init+0x1e8>)
 8007436:	7819      	ldrb	r1, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800743e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f002 fb1c 	bl	8009a80 <USBD_LL_PrepareReceive>
 8007448:	e008      	b.n	800745c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800744a:	4b08      	ldr	r3, [pc, #32]	; (800746c <USBD_CDC_Init+0x1e8>)
 800744c:	7819      	ldrb	r1, [r3, #0]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007454:	2340      	movs	r3, #64	; 0x40
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f002 fb12 	bl	8009a80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	20000093 	.word	0x20000093
 800746c:	20000094 	.word	0x20000094
 8007470:	20000095 	.word	0x20000095

08007474 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	460b      	mov	r3, r1
 800747e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007480:	4b3a      	ldr	r3, [pc, #232]	; (800756c <USBD_CDC_DeInit+0xf8>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f002 fa31 	bl	80098ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800748c:	4b37      	ldr	r3, [pc, #220]	; (800756c <USBD_CDC_DeInit+0xf8>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f003 020f 	and.w	r2, r3, #15
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	4613      	mov	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	440b      	add	r3, r1
 80074a0:	3324      	adds	r3, #36	; 0x24
 80074a2:	2200      	movs	r2, #0
 80074a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80074a6:	4b32      	ldr	r3, [pc, #200]	; (8007570 <USBD_CDC_DeInit+0xfc>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f002 fa1e 	bl	80098ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80074b2:	4b2f      	ldr	r3, [pc, #188]	; (8007570 <USBD_CDC_DeInit+0xfc>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	f003 020f 	and.w	r2, r3, #15
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	440b      	add	r3, r1
 80074c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074ca:	2200      	movs	r2, #0
 80074cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80074ce:	4b29      	ldr	r3, [pc, #164]	; (8007574 <USBD_CDC_DeInit+0x100>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f002 fa0a 	bl	80098ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80074da:	4b26      	ldr	r3, [pc, #152]	; (8007574 <USBD_CDC_DeInit+0x100>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	f003 020f 	and.w	r2, r3, #15
 80074e2:	6879      	ldr	r1, [r7, #4]
 80074e4:	4613      	mov	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	440b      	add	r3, r1
 80074ee:	3324      	adds	r3, #36	; 0x24
 80074f0:	2200      	movs	r2, #0
 80074f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80074f4:	4b1f      	ldr	r3, [pc, #124]	; (8007574 <USBD_CDC_DeInit+0x100>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	f003 020f 	and.w	r2, r3, #15
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	4613      	mov	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	440b      	add	r3, r1
 8007508:	3326      	adds	r3, #38	; 0x26
 800750a:	2200      	movs	r2, #0
 800750c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	32b0      	adds	r2, #176	; 0xb0
 8007518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01f      	beq.n	8007560 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	33b0      	adds	r3, #176	; 0xb0
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	32b0      	adds	r2, #176	; 0xb0
 800753e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007542:	4618      	mov	r0, r3
 8007544:	f002 fade 	bl	8009b04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	32b0      	adds	r2, #176	; 0xb0
 8007552:	2100      	movs	r1, #0
 8007554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000093 	.word	0x20000093
 8007570:	20000094 	.word	0x20000094
 8007574:	20000095 	.word	0x20000095

08007578 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	32b0      	adds	r2, #176	; 0xb0
 800758c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007590:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e0bf      	b.n	8007728 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d050      	beq.n	8007656 <USBD_CDC_Setup+0xde>
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	f040 80af 	bne.w	8007718 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	88db      	ldrh	r3, [r3, #6]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d03a      	beq.n	8007638 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	b25b      	sxtb	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	da1b      	bge.n	8007604 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	33b0      	adds	r3, #176	; 0xb0
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80075e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	88d2      	ldrh	r2, [r2, #6]
 80075e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	88db      	ldrh	r3, [r3, #6]
 80075ee:	2b07      	cmp	r3, #7
 80075f0:	bf28      	it	cs
 80075f2:	2307      	movcs	r3, #7
 80075f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	89fa      	ldrh	r2, [r7, #14]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 fd43 	bl	8009088 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007602:	e090      	b.n	8007726 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	785a      	ldrb	r2, [r3, #1]
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	88db      	ldrh	r3, [r3, #6]
 8007612:	2b3f      	cmp	r3, #63	; 0x3f
 8007614:	d803      	bhi.n	800761e <USBD_CDC_Setup+0xa6>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	88db      	ldrh	r3, [r3, #6]
 800761a:	b2da      	uxtb	r2, r3
 800761c:	e000      	b.n	8007620 <USBD_CDC_Setup+0xa8>
 800761e:	2240      	movs	r2, #64	; 0x40
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007626:	6939      	ldr	r1, [r7, #16]
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800762e:	461a      	mov	r2, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 fd55 	bl	80090e0 <USBD_CtlPrepareRx>
      break;
 8007636:	e076      	b.n	8007726 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	33b0      	adds	r3, #176	; 0xb0
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	7850      	ldrb	r0, [r2, #1]
 800764e:	2200      	movs	r2, #0
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	4798      	blx	r3
      break;
 8007654:	e067      	b.n	8007726 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	785b      	ldrb	r3, [r3, #1]
 800765a:	2b0b      	cmp	r3, #11
 800765c:	d851      	bhi.n	8007702 <USBD_CDC_Setup+0x18a>
 800765e:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <USBD_CDC_Setup+0xec>)
 8007660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007664:	08007695 	.word	0x08007695
 8007668:	08007711 	.word	0x08007711
 800766c:	08007703 	.word	0x08007703
 8007670:	08007703 	.word	0x08007703
 8007674:	08007703 	.word	0x08007703
 8007678:	08007703 	.word	0x08007703
 800767c:	08007703 	.word	0x08007703
 8007680:	08007703 	.word	0x08007703
 8007684:	08007703 	.word	0x08007703
 8007688:	08007703 	.word	0x08007703
 800768c:	080076bf 	.word	0x080076bf
 8007690:	080076e9 	.word	0x080076e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b03      	cmp	r3, #3
 800769e:	d107      	bne.n	80076b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80076a0:	f107 030a 	add.w	r3, r7, #10
 80076a4:	2202      	movs	r2, #2
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 fced 	bl	8009088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076ae:	e032      	b.n	8007716 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 fc77 	bl	8008fa6 <USBD_CtlError>
            ret = USBD_FAIL;
 80076b8:	2303      	movs	r3, #3
 80076ba:	75fb      	strb	r3, [r7, #23]
          break;
 80076bc:	e02b      	b.n	8007716 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d107      	bne.n	80076da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80076ca:	f107 030d 	add.w	r3, r7, #13
 80076ce:	2201      	movs	r2, #1
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 fcd8 	bl	8009088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076d8:	e01d      	b.n	8007716 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 fc62 	bl	8008fa6 <USBD_CtlError>
            ret = USBD_FAIL;
 80076e2:	2303      	movs	r3, #3
 80076e4:	75fb      	strb	r3, [r7, #23]
          break;
 80076e6:	e016      	b.n	8007716 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d00f      	beq.n	8007714 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f001 fc55 	bl	8008fa6 <USBD_CtlError>
            ret = USBD_FAIL;
 80076fc:	2303      	movs	r3, #3
 80076fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007700:	e008      	b.n	8007714 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 fc4e 	bl	8008fa6 <USBD_CtlError>
          ret = USBD_FAIL;
 800770a:	2303      	movs	r3, #3
 800770c:	75fb      	strb	r3, [r7, #23]
          break;
 800770e:	e002      	b.n	8007716 <USBD_CDC_Setup+0x19e>
          break;
 8007710:	bf00      	nop
 8007712:	e008      	b.n	8007726 <USBD_CDC_Setup+0x1ae>
          break;
 8007714:	bf00      	nop
      }
      break;
 8007716:	e006      	b.n	8007726 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 fc43 	bl	8008fa6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007720:	2303      	movs	r3, #3
 8007722:	75fb      	strb	r3, [r7, #23]
      break;
 8007724:	bf00      	nop
  }

  return (uint8_t)ret;
 8007726:	7dfb      	ldrb	r3, [r7, #23]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007742:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	32b0      	adds	r2, #176	; 0xb0
 800774e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007756:	2303      	movs	r3, #3
 8007758:	e065      	b.n	8007826 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	32b0      	adds	r2, #176	; 0xb0
 8007764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007768:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800776a:	78fb      	ldrb	r3, [r7, #3]
 800776c:	f003 020f 	and.w	r2, r3, #15
 8007770:	6879      	ldr	r1, [r7, #4]
 8007772:	4613      	mov	r3, r2
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	440b      	add	r3, r1
 800777c:	3318      	adds	r3, #24
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d02f      	beq.n	80077e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	f003 020f 	and.w	r2, r3, #15
 800778a:	6879      	ldr	r1, [r7, #4]
 800778c:	4613      	mov	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	440b      	add	r3, r1
 8007796:	3318      	adds	r3, #24
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	f003 010f 	and.w	r1, r3, #15
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	460b      	mov	r3, r1
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	440b      	add	r3, r1
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4403      	add	r3, r0
 80077ac:	3348      	adds	r3, #72	; 0x48
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80077b4:	fb01 f303 	mul.w	r3, r1, r3
 80077b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d112      	bne.n	80077e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80077be:	78fb      	ldrb	r3, [r7, #3]
 80077c0:	f003 020f 	and.w	r2, r3, #15
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	4613      	mov	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	440b      	add	r3, r1
 80077d0:	3318      	adds	r3, #24
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80077d6:	78f9      	ldrb	r1, [r7, #3]
 80077d8:	2300      	movs	r3, #0
 80077da:	2200      	movs	r2, #0
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f002 f92e 	bl	8009a3e <USBD_LL_Transmit>
 80077e2:	e01f      	b.n	8007824 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	33b0      	adds	r3, #176	; 0xb0
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d010      	beq.n	8007824 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	33b0      	adds	r3, #176	; 0xb0
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007820:	78fa      	ldrb	r2, [r7, #3]
 8007822:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	460b      	mov	r3, r1
 8007838:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	32b0      	adds	r2, #176	; 0xb0
 8007844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007848:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	32b0      	adds	r2, #176	; 0xb0
 8007854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800785c:	2303      	movs	r3, #3
 800785e:	e01a      	b.n	8007896 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f002 f92c 	bl	8009ac2 <USBD_LL_GetRxDataSize>
 800786a:	4602      	mov	r2, r0
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	33b0      	adds	r3, #176	; 0xb0
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007890:	4611      	mov	r1, r2
 8007892:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b084      	sub	sp, #16
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	32b0      	adds	r2, #176	; 0xb0
 80078b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80078bc:	2303      	movs	r3, #3
 80078be:	e025      	b.n	800790c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	33b0      	adds	r3, #176	; 0xb0
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d01a      	beq.n	800790a <USBD_CDC_EP0_RxReady+0x6c>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80078da:	2bff      	cmp	r3, #255	; 0xff
 80078dc:	d015      	beq.n	800790a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	33b0      	adds	r3, #176	; 0xb0
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80078f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80078fe:	b292      	uxth	r2, r2
 8007900:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	22ff      	movs	r2, #255	; 0xff
 8007906:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800791c:	2182      	movs	r1, #130	; 0x82
 800791e:	4818      	ldr	r0, [pc, #96]	; (8007980 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007920:	f000 fd09 	bl	8008336 <USBD_GetEpDesc>
 8007924:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007926:	2101      	movs	r1, #1
 8007928:	4815      	ldr	r0, [pc, #84]	; (8007980 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800792a:	f000 fd04 	bl	8008336 <USBD_GetEpDesc>
 800792e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007930:	2181      	movs	r1, #129	; 0x81
 8007932:	4813      	ldr	r0, [pc, #76]	; (8007980 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007934:	f000 fcff 	bl	8008336 <USBD_GetEpDesc>
 8007938:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2210      	movs	r2, #16
 8007944:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d006      	beq.n	800795a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	2200      	movs	r2, #0
 8007950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007954:	711a      	strb	r2, [r3, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d006      	beq.n	800796e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007968:	711a      	strb	r2, [r3, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2243      	movs	r2, #67	; 0x43
 8007972:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007974:	4b02      	ldr	r3, [pc, #8]	; (8007980 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007976:	4618      	mov	r0, r3
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000050 	.word	0x20000050

08007984 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800798c:	2182      	movs	r1, #130	; 0x82
 800798e:	4818      	ldr	r0, [pc, #96]	; (80079f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007990:	f000 fcd1 	bl	8008336 <USBD_GetEpDesc>
 8007994:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007996:	2101      	movs	r1, #1
 8007998:	4815      	ldr	r0, [pc, #84]	; (80079f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800799a:	f000 fccc 	bl	8008336 <USBD_GetEpDesc>
 800799e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079a0:	2181      	movs	r1, #129	; 0x81
 80079a2:	4813      	ldr	r0, [pc, #76]	; (80079f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80079a4:	f000 fcc7 	bl	8008336 <USBD_GetEpDesc>
 80079a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2210      	movs	r2, #16
 80079b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d006      	beq.n	80079ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	2200      	movs	r2, #0
 80079c0:	711a      	strb	r2, [r3, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f042 0202 	orr.w	r2, r2, #2
 80079c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d006      	beq.n	80079de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	711a      	strb	r2, [r3, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f042 0202 	orr.w	r2, r2, #2
 80079dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2243      	movs	r2, #67	; 0x43
 80079e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079e4:	4b02      	ldr	r3, [pc, #8]	; (80079f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	20000050 	.word	0x20000050

080079f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079fc:	2182      	movs	r1, #130	; 0x82
 80079fe:	4818      	ldr	r0, [pc, #96]	; (8007a60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a00:	f000 fc99 	bl	8008336 <USBD_GetEpDesc>
 8007a04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a06:	2101      	movs	r1, #1
 8007a08:	4815      	ldr	r0, [pc, #84]	; (8007a60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a0a:	f000 fc94 	bl	8008336 <USBD_GetEpDesc>
 8007a0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a10:	2181      	movs	r1, #129	; 0x81
 8007a12:	4813      	ldr	r0, [pc, #76]	; (8007a60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a14:	f000 fc8f 	bl	8008336 <USBD_GetEpDesc>
 8007a18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	2210      	movs	r2, #16
 8007a24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d006      	beq.n	8007a3a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a34:	711a      	strb	r2, [r3, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d006      	beq.n	8007a4e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a48:	711a      	strb	r2, [r3, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2243      	movs	r2, #67	; 0x43
 8007a52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a54:	4b02      	ldr	r3, [pc, #8]	; (8007a60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20000050 	.word	0x20000050

08007a64 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	220a      	movs	r2, #10
 8007a70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007a72:	4b03      	ldr	r3, [pc, #12]	; (8007a80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	2000000c 	.word	0x2000000c

08007a84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e009      	b.n	8007aac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	33b0      	adds	r3, #176	; 0xb0
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	32b0      	adds	r2, #176	; 0xb0
 8007ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e008      	b.n	8007af0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	32b0      	adds	r2, #176	; 0xb0
 8007b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e004      	b.n	8007b2a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
	...

08007b38 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	32b0      	adds	r2, #176	; 0xb0
 8007b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	32b0      	adds	r2, #176	; 0xb0
 8007b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e018      	b.n	8007b98 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	7c1b      	ldrb	r3, [r3, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10a      	bne.n	8007b84 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <USBD_CDC_ReceivePacket+0x68>)
 8007b70:	7819      	ldrb	r1, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 ff7f 	bl	8009a80 <USBD_LL_PrepareReceive>
 8007b82:	e008      	b.n	8007b96 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b84:	4b06      	ldr	r3, [pc, #24]	; (8007ba0 <USBD_CDC_ReceivePacket+0x68>)
 8007b86:	7819      	ldrb	r1, [r3, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b8e:	2340      	movs	r3, #64	; 0x40
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f001 ff75 	bl	8009a80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20000094 	.word	0x20000094

08007ba4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e01f      	b.n	8007bfc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	79fa      	ldrb	r2, [r7, #7]
 8007bee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f001 fdef 	bl	80097d4 <USBD_LL_Init>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e025      	b.n	8007c68 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	32ae      	adds	r2, #174	; 0xae
 8007c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00f      	beq.n	8007c58 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	32ae      	adds	r2, #174	; 0xae
 8007c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	f107 020e 	add.w	r2, r7, #14
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
 8007c50:	4602      	mov	r2, r0
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f001 fdf7 	bl	800986c <USBD_LL_Start>
 8007c7e:	4603      	mov	r3, r0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c90:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d009      	beq.n	8007ccc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	78fa      	ldrb	r2, [r7, #3]
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	4798      	blx	r3
 8007cc8:	4603      	mov	r3, r0
 8007cca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b084      	sub	sp, #16
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	4798      	blx	r3
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f001 f908 	bl	8008f32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007d30:	461a      	mov	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d3e:	f003 031f 	and.w	r3, r3, #31
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d01a      	beq.n	8007d7c <USBD_LL_SetupStage+0x72>
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d822      	bhi.n	8007d90 <USBD_LL_SetupStage+0x86>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d002      	beq.n	8007d54 <USBD_LL_SetupStage+0x4a>
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d00a      	beq.n	8007d68 <USBD_LL_SetupStage+0x5e>
 8007d52:	e01d      	b.n	8007d90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fb5f 	bl	8008420 <USBD_StdDevReq>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73fb      	strb	r3, [r7, #15]
      break;
 8007d66:	e020      	b.n	8007daa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 fbc7 	bl	8008504 <USBD_StdItfReq>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]
      break;
 8007d7a:	e016      	b.n	8007daa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fc29 	bl	80085dc <USBD_StdEPReq>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d8e:	e00c      	b.n	8007daa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f001 fdc4 	bl	800992c <USBD_LL_StallEP>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]
      break;
 8007da8:	bf00      	nop
  }

  return ret;
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007dc6:	7afb      	ldrb	r3, [r7, #11]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d16e      	bne.n	8007eaa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007dd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	f040 8098 	bne.w	8007f10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d913      	bls.n	8007e14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	1ad2      	subs	r2, r2, r3
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	4293      	cmp	r3, r2
 8007e04:	bf28      	it	cs
 8007e06:	4613      	movcs	r3, r2
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6879      	ldr	r1, [r7, #4]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f001 f984 	bl	800911a <USBD_CtlContinueRx>
 8007e12:	e07d      	b.n	8007f10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e1a:	f003 031f 	and.w	r3, r3, #31
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d014      	beq.n	8007e4c <USBD_LL_DataOutStage+0x98>
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d81d      	bhi.n	8007e62 <USBD_LL_DataOutStage+0xae>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <USBD_LL_DataOutStage+0x7c>
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d003      	beq.n	8007e36 <USBD_LL_DataOutStage+0x82>
 8007e2e:	e018      	b.n	8007e62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007e30:	2300      	movs	r3, #0
 8007e32:	75bb      	strb	r3, [r7, #22]
            break;
 8007e34:	e018      	b.n	8007e68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	4619      	mov	r1, r3
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 fa5e 	bl	8008302 <USBD_CoreFindIF>
 8007e46:	4603      	mov	r3, r0
 8007e48:	75bb      	strb	r3, [r7, #22]
            break;
 8007e4a:	e00d      	b.n	8007e68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	4619      	mov	r1, r3
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 fa60 	bl	800831c <USBD_CoreFindEP>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	75bb      	strb	r3, [r7, #22]
            break;
 8007e60:	e002      	b.n	8007e68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	75bb      	strb	r3, [r7, #22]
            break;
 8007e66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007e68:	7dbb      	ldrb	r3, [r7, #22]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d119      	bne.n	8007ea2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d113      	bne.n	8007ea2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007e7a:	7dba      	ldrb	r2, [r7, #22]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	32ae      	adds	r2, #174	; 0xae
 8007e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00b      	beq.n	8007ea2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007e8a:	7dba      	ldrb	r2, [r7, #22]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007e92:	7dba      	ldrb	r2, [r7, #22]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	32ae      	adds	r2, #174	; 0xae
 8007e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f001 f94a 	bl	800913c <USBD_CtlSendStatus>
 8007ea8:	e032      	b.n	8007f10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007eaa:	7afb      	ldrb	r3, [r7, #11]
 8007eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 fa31 	bl	800831c <USBD_CoreFindEP>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ebe:	7dbb      	ldrb	r3, [r7, #22]
 8007ec0:	2bff      	cmp	r3, #255	; 0xff
 8007ec2:	d025      	beq.n	8007f10 <USBD_LL_DataOutStage+0x15c>
 8007ec4:	7dbb      	ldrb	r3, [r7, #22]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d122      	bne.n	8007f10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d117      	bne.n	8007f06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007ed6:	7dba      	ldrb	r2, [r7, #22]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	32ae      	adds	r2, #174	; 0xae
 8007edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00f      	beq.n	8007f06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007ee6:	7dba      	ldrb	r2, [r7, #22]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007eee:	7dba      	ldrb	r2, [r7, #22]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	32ae      	adds	r2, #174	; 0xae
 8007ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	7afa      	ldrb	r2, [r7, #11]
 8007efc:	4611      	mov	r1, r2
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	4798      	blx	r3
 8007f02:	4603      	mov	r3, r0
 8007f04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
 8007f0e:	e000      	b.n	8007f12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b086      	sub	sp, #24
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	460b      	mov	r3, r1
 8007f24:	607a      	str	r2, [r7, #4]
 8007f26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007f28:	7afb      	ldrb	r3, [r7, #11]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d16f      	bne.n	800800e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3314      	adds	r3, #20
 8007f32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d15a      	bne.n	8007ff4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d914      	bls.n	8007f74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	689a      	ldr	r2, [r3, #8]
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	1ad2      	subs	r2, r2, r3
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f001 f8ac 	bl	80090be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f66:	2300      	movs	r3, #0
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f001 fd87 	bl	8009a80 <USBD_LL_PrepareReceive>
 8007f72:	e03f      	b.n	8007ff4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	68da      	ldr	r2, [r3, #12]
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d11c      	bne.n	8007fba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d316      	bcc.n	8007fba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d20f      	bcs.n	8007fba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f001 f88d 	bl	80090be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fac:	2300      	movs	r3, #0
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f001 fd64 	bl	8009a80 <USBD_LL_PrepareReceive>
 8007fb8:	e01c      	b.n	8007ff4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d10f      	bne.n	8007fe6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d009      	beq.n	8007fe6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fe6:	2180      	movs	r1, #128	; 0x80
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f001 fc9f 	bl	800992c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f001 f8b7 	bl	8009162 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d03a      	beq.n	8008074 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f7ff fe42 	bl	8007c88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800800c:	e032      	b.n	8008074 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800800e:	7afb      	ldrb	r3, [r7, #11]
 8008010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008014:	b2db      	uxtb	r3, r3
 8008016:	4619      	mov	r1, r3
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 f97f 	bl	800831c <USBD_CoreFindEP>
 800801e:	4603      	mov	r3, r0
 8008020:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	2bff      	cmp	r3, #255	; 0xff
 8008026:	d025      	beq.n	8008074 <USBD_LL_DataInStage+0x15a>
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d122      	bne.n	8008074 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b03      	cmp	r3, #3
 8008038:	d11c      	bne.n	8008074 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800803a:	7dfa      	ldrb	r2, [r7, #23]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	32ae      	adds	r2, #174	; 0xae
 8008040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d014      	beq.n	8008074 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800804a:	7dfa      	ldrb	r2, [r7, #23]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008052:	7dfa      	ldrb	r2, [r7, #23]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	32ae      	adds	r2, #174	; 0xae
 8008058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	7afa      	ldrb	r2, [r7, #11]
 8008060:	4611      	mov	r1, r2
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	4798      	blx	r3
 8008066:	4603      	mov	r3, r0
 8008068:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800806a:	7dbb      	ldrb	r3, [r7, #22]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008070:	7dbb      	ldrb	r3, [r7, #22]
 8008072:	e000      	b.n	8008076 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3718      	adds	r7, #24
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2201      	movs	r2, #1
 800808e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d014      	beq.n	80080e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00e      	beq.n	80080e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	6852      	ldr	r2, [r2, #4]
 80080d2:	b2d2      	uxtb	r2, r2
 80080d4:	4611      	mov	r1, r2
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	4798      	blx	r3
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80080e0:	2303      	movs	r3, #3
 80080e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080e4:	2340      	movs	r3, #64	; 0x40
 80080e6:	2200      	movs	r2, #0
 80080e8:	2100      	movs	r1, #0
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 fbd9 	bl	80098a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2240      	movs	r2, #64	; 0x40
 80080fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008100:	2340      	movs	r3, #64	; 0x40
 8008102:	2200      	movs	r2, #0
 8008104:	2180      	movs	r1, #128	; 0x80
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 fbcb 	bl	80098a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2240      	movs	r2, #64	; 0x40
 8008116:	621a      	str	r2, [r3, #32]

  return ret;
 8008118:	7bfb      	ldrb	r3, [r7, #15]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	78fa      	ldrb	r2, [r7, #3]
 8008132:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008150:	b2da      	uxtb	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2204      	movs	r2, #4
 800815c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800816e:	b480      	push	{r7}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b04      	cmp	r3, #4
 8008180:	d106      	bne.n	8008190 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008188:	b2da      	uxtb	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d110      	bne.n	80081d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00b      	beq.n	80081d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d005      	beq.n	80081d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b082      	sub	sp, #8
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	460b      	mov	r3, r1
 80081e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	32ae      	adds	r2, #174	; 0xae
 80081f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e01c      	b.n	800823a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b03      	cmp	r3, #3
 800820a:	d115      	bne.n	8008238 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	32ae      	adds	r2, #174	; 0xae
 8008216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00b      	beq.n	8008238 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	32ae      	adds	r2, #174	; 0xae
 800822a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	78fa      	ldrb	r2, [r7, #3]
 8008232:	4611      	mov	r1, r2
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	460b      	mov	r3, r1
 800824c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	32ae      	adds	r2, #174	; 0xae
 8008258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008260:	2303      	movs	r3, #3
 8008262:	e01c      	b.n	800829e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b03      	cmp	r3, #3
 800826e:	d115      	bne.n	800829c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	32ae      	adds	r2, #174	; 0xae
 800827a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00b      	beq.n	800829c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	32ae      	adds	r2, #174	; 0xae
 800828e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	78fa      	ldrb	r2, [r7, #3]
 8008296:	4611      	mov	r1, r2
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b083      	sub	sp, #12
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00e      	beq.n	80082f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	6852      	ldr	r2, [r2, #4]
 80082e6:	b2d2      	uxtb	r2, r2
 80082e8:	4611      	mov	r1, r2
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	4798      	blx	r3
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80082f4:	2303      	movs	r3, #3
 80082f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	460b      	mov	r3, r1
 800830c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800830e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008328:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800832a:	4618      	mov	r0, r3
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b086      	sub	sp, #24
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	460b      	mov	r3, r1
 8008340:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800834a:	2300      	movs	r3, #0
 800834c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	885b      	ldrh	r3, [r3, #2]
 8008352:	b29a      	uxth	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	b29b      	uxth	r3, r3
 800835a:	429a      	cmp	r2, r3
 800835c:	d920      	bls.n	80083a0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	b29b      	uxth	r3, r3
 8008364:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008366:	e013      	b.n	8008390 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008368:	f107 030a 	add.w	r3, r7, #10
 800836c:	4619      	mov	r1, r3
 800836e:	6978      	ldr	r0, [r7, #20]
 8008370:	f000 f81b 	bl	80083aa <USBD_GetNextDesc>
 8008374:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	785b      	ldrb	r3, [r3, #1]
 800837a:	2b05      	cmp	r3, #5
 800837c:	d108      	bne.n	8008390 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	789b      	ldrb	r3, [r3, #2]
 8008386:	78fa      	ldrb	r2, [r7, #3]
 8008388:	429a      	cmp	r2, r3
 800838a:	d008      	beq.n	800839e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800838c:	2300      	movs	r3, #0
 800838e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	885b      	ldrh	r3, [r3, #2]
 8008394:	b29a      	uxth	r2, r3
 8008396:	897b      	ldrh	r3, [r7, #10]
 8008398:	429a      	cmp	r2, r3
 800839a:	d8e5      	bhi.n	8008368 <USBD_GetEpDesc+0x32>
 800839c:	e000      	b.n	80083a0 <USBD_GetEpDesc+0x6a>
          break;
 800839e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80083a0:	693b      	ldr	r3, [r7, #16]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	881a      	ldrh	r2, [r3, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	4413      	add	r3, r2
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	461a      	mov	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4413      	add	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083d6:	68fb      	ldr	r3, [r7, #12]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	3301      	adds	r3, #1
 80083fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008402:	8a3b      	ldrh	r3, [r7, #16]
 8008404:	021b      	lsls	r3, r3, #8
 8008406:	b21a      	sxth	r2, r3
 8008408:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800840c:	4313      	orrs	r3, r2
 800840e:	b21b      	sxth	r3, r3
 8008410:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008412:	89fb      	ldrh	r3, [r7, #14]
}
 8008414:	4618      	mov	r0, r3
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008436:	2b40      	cmp	r3, #64	; 0x40
 8008438:	d005      	beq.n	8008446 <USBD_StdDevReq+0x26>
 800843a:	2b40      	cmp	r3, #64	; 0x40
 800843c:	d857      	bhi.n	80084ee <USBD_StdDevReq+0xce>
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00f      	beq.n	8008462 <USBD_StdDevReq+0x42>
 8008442:	2b20      	cmp	r3, #32
 8008444:	d153      	bne.n	80084ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	32ae      	adds	r2, #174	; 0xae
 8008450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	4798      	blx	r3
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]
      break;
 8008460:	e04a      	b.n	80084f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	785b      	ldrb	r3, [r3, #1]
 8008466:	2b09      	cmp	r3, #9
 8008468:	d83b      	bhi.n	80084e2 <USBD_StdDevReq+0xc2>
 800846a:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <USBD_StdDevReq+0x50>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	080084c5 	.word	0x080084c5
 8008474:	080084d9 	.word	0x080084d9
 8008478:	080084e3 	.word	0x080084e3
 800847c:	080084cf 	.word	0x080084cf
 8008480:	080084e3 	.word	0x080084e3
 8008484:	080084a3 	.word	0x080084a3
 8008488:	08008499 	.word	0x08008499
 800848c:	080084e3 	.word	0x080084e3
 8008490:	080084bb 	.word	0x080084bb
 8008494:	080084ad 	.word	0x080084ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fa3c 	bl	8008918 <USBD_GetDescriptor>
          break;
 80084a0:	e024      	b.n	80084ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fba1 	bl	8008bec <USBD_SetAddress>
          break;
 80084aa:	e01f      	b.n	80084ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fbe0 	bl	8008c74 <USBD_SetConfig>
 80084b4:	4603      	mov	r3, r0
 80084b6:	73fb      	strb	r3, [r7, #15]
          break;
 80084b8:	e018      	b.n	80084ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fc83 	bl	8008dc8 <USBD_GetConfig>
          break;
 80084c2:	e013      	b.n	80084ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fcb4 	bl	8008e34 <USBD_GetStatus>
          break;
 80084cc:	e00e      	b.n	80084ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fce3 	bl	8008e9c <USBD_SetFeature>
          break;
 80084d6:	e009      	b.n	80084ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fd07 	bl	8008eee <USBD_ClrFeature>
          break;
 80084e0:	e004      	b.n	80084ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fd5e 	bl	8008fa6 <USBD_CtlError>
          break;
 80084ea:	bf00      	nop
      }
      break;
 80084ec:	e004      	b.n	80084f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fd58 	bl	8008fa6 <USBD_CtlError>
      break;
 80084f6:	bf00      	nop
  }

  return ret;
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop

08008504 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800851a:	2b40      	cmp	r3, #64	; 0x40
 800851c:	d005      	beq.n	800852a <USBD_StdItfReq+0x26>
 800851e:	2b40      	cmp	r3, #64	; 0x40
 8008520:	d852      	bhi.n	80085c8 <USBD_StdItfReq+0xc4>
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <USBD_StdItfReq+0x26>
 8008526:	2b20      	cmp	r3, #32
 8008528:	d14e      	bne.n	80085c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008530:	b2db      	uxtb	r3, r3
 8008532:	3b01      	subs	r3, #1
 8008534:	2b02      	cmp	r3, #2
 8008536:	d840      	bhi.n	80085ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	889b      	ldrh	r3, [r3, #4]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b01      	cmp	r3, #1
 8008540:	d836      	bhi.n	80085b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	889b      	ldrh	r3, [r3, #4]
 8008546:	b2db      	uxtb	r3, r3
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7ff fed9 	bl	8008302 <USBD_CoreFindIF>
 8008550:	4603      	mov	r3, r0
 8008552:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008554:	7bbb      	ldrb	r3, [r7, #14]
 8008556:	2bff      	cmp	r3, #255	; 0xff
 8008558:	d01d      	beq.n	8008596 <USBD_StdItfReq+0x92>
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d11a      	bne.n	8008596 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008560:	7bba      	ldrb	r2, [r7, #14]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	32ae      	adds	r2, #174	; 0xae
 8008566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00f      	beq.n	8008590 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008570:	7bba      	ldrb	r2, [r7, #14]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008578:	7bba      	ldrb	r2, [r7, #14]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	32ae      	adds	r2, #174	; 0xae
 800857e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	4798      	blx	r3
 800858a:	4603      	mov	r3, r0
 800858c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800858e:	e004      	b.n	800859a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008590:	2303      	movs	r3, #3
 8008592:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008594:	e001      	b.n	800859a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008596:	2303      	movs	r3, #3
 8008598:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	88db      	ldrh	r3, [r3, #6]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d110      	bne.n	80085c4 <USBD_StdItfReq+0xc0>
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10d      	bne.n	80085c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fdc7 	bl	800913c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085ae:	e009      	b.n	80085c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fcf7 	bl	8008fa6 <USBD_CtlError>
          break;
 80085b8:	e004      	b.n	80085c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fcf2 	bl	8008fa6 <USBD_CtlError>
          break;
 80085c2:	e000      	b.n	80085c6 <USBD_StdItfReq+0xc2>
          break;
 80085c4:	bf00      	nop
      }
      break;
 80085c6:	e004      	b.n	80085d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fceb 	bl	8008fa6 <USBD_CtlError>
      break;
 80085d0:	bf00      	nop
  }

  return ret;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	889b      	ldrh	r3, [r3, #4]
 80085ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085f8:	2b40      	cmp	r3, #64	; 0x40
 80085fa:	d007      	beq.n	800860c <USBD_StdEPReq+0x30>
 80085fc:	2b40      	cmp	r3, #64	; 0x40
 80085fe:	f200 817f 	bhi.w	8008900 <USBD_StdEPReq+0x324>
 8008602:	2b00      	cmp	r3, #0
 8008604:	d02a      	beq.n	800865c <USBD_StdEPReq+0x80>
 8008606:	2b20      	cmp	r3, #32
 8008608:	f040 817a 	bne.w	8008900 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7ff fe83 	bl	800831c <USBD_CoreFindEP>
 8008616:	4603      	mov	r3, r0
 8008618:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800861a:	7b7b      	ldrb	r3, [r7, #13]
 800861c:	2bff      	cmp	r3, #255	; 0xff
 800861e:	f000 8174 	beq.w	800890a <USBD_StdEPReq+0x32e>
 8008622:	7b7b      	ldrb	r3, [r7, #13]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f040 8170 	bne.w	800890a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800862a:	7b7a      	ldrb	r2, [r7, #13]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008632:	7b7a      	ldrb	r2, [r7, #13]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	32ae      	adds	r2, #174	; 0xae
 8008638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 8163 	beq.w	800890a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008644:	7b7a      	ldrb	r2, [r7, #13]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	32ae      	adds	r2, #174	; 0xae
 800864a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	4798      	blx	r3
 8008656:	4603      	mov	r3, r0
 8008658:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800865a:	e156      	b.n	800890a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	785b      	ldrb	r3, [r3, #1]
 8008660:	2b03      	cmp	r3, #3
 8008662:	d008      	beq.n	8008676 <USBD_StdEPReq+0x9a>
 8008664:	2b03      	cmp	r3, #3
 8008666:	f300 8145 	bgt.w	80088f4 <USBD_StdEPReq+0x318>
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 809b 	beq.w	80087a6 <USBD_StdEPReq+0x1ca>
 8008670:	2b01      	cmp	r3, #1
 8008672:	d03c      	beq.n	80086ee <USBD_StdEPReq+0x112>
 8008674:	e13e      	b.n	80088f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b02      	cmp	r3, #2
 8008680:	d002      	beq.n	8008688 <USBD_StdEPReq+0xac>
 8008682:	2b03      	cmp	r3, #3
 8008684:	d016      	beq.n	80086b4 <USBD_StdEPReq+0xd8>
 8008686:	e02c      	b.n	80086e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008688:	7bbb      	ldrb	r3, [r7, #14]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00d      	beq.n	80086aa <USBD_StdEPReq+0xce>
 800868e:	7bbb      	ldrb	r3, [r7, #14]
 8008690:	2b80      	cmp	r3, #128	; 0x80
 8008692:	d00a      	beq.n	80086aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 f947 	bl	800992c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800869e:	2180      	movs	r1, #128	; 0x80
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 f943 	bl	800992c <USBD_LL_StallEP>
 80086a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086a8:	e020      	b.n	80086ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fc7a 	bl	8008fa6 <USBD_CtlError>
              break;
 80086b2:	e01b      	b.n	80086ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	885b      	ldrh	r3, [r3, #2]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10e      	bne.n	80086da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00b      	beq.n	80086da <USBD_StdEPReq+0xfe>
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	2b80      	cmp	r3, #128	; 0x80
 80086c6:	d008      	beq.n	80086da <USBD_StdEPReq+0xfe>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	88db      	ldrh	r3, [r3, #6]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d104      	bne.n	80086da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f001 f929 	bl	800992c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fd2e 	bl	800913c <USBD_CtlSendStatus>

              break;
 80086e0:	e004      	b.n	80086ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fc5e 	bl	8008fa6 <USBD_CtlError>
              break;
 80086ea:	bf00      	nop
          }
          break;
 80086ec:	e107      	b.n	80088fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d002      	beq.n	8008700 <USBD_StdEPReq+0x124>
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d016      	beq.n	800872c <USBD_StdEPReq+0x150>
 80086fe:	e04b      	b.n	8008798 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00d      	beq.n	8008722 <USBD_StdEPReq+0x146>
 8008706:	7bbb      	ldrb	r3, [r7, #14]
 8008708:	2b80      	cmp	r3, #128	; 0x80
 800870a:	d00a      	beq.n	8008722 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 f90b 	bl	800992c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008716:	2180      	movs	r1, #128	; 0x80
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f001 f907 	bl	800992c <USBD_LL_StallEP>
 800871e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008720:	e040      	b.n	80087a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fc3e 	bl	8008fa6 <USBD_CtlError>
              break;
 800872a:	e03b      	b.n	80087a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	885b      	ldrh	r3, [r3, #2]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d136      	bne.n	80087a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800873a:	2b00      	cmp	r3, #0
 800873c:	d004      	beq.n	8008748 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f001 f911 	bl	800996a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 fcf7 	bl	800913c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800874e:	7bbb      	ldrb	r3, [r7, #14]
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7ff fde2 	bl	800831c <USBD_CoreFindEP>
 8008758:	4603      	mov	r3, r0
 800875a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800875c:	7b7b      	ldrb	r3, [r7, #13]
 800875e:	2bff      	cmp	r3, #255	; 0xff
 8008760:	d01f      	beq.n	80087a2 <USBD_StdEPReq+0x1c6>
 8008762:	7b7b      	ldrb	r3, [r7, #13]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d11c      	bne.n	80087a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008768:	7b7a      	ldrb	r2, [r7, #13]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008770:	7b7a      	ldrb	r2, [r7, #13]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	32ae      	adds	r2, #174	; 0xae
 8008776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d010      	beq.n	80087a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008780:	7b7a      	ldrb	r2, [r7, #13]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	32ae      	adds	r2, #174	; 0xae
 8008786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	4798      	blx	r3
 8008792:	4603      	mov	r3, r0
 8008794:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008796:	e004      	b.n	80087a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fc03 	bl	8008fa6 <USBD_CtlError>
              break;
 80087a0:	e000      	b.n	80087a4 <USBD_StdEPReq+0x1c8>
              break;
 80087a2:	bf00      	nop
          }
          break;
 80087a4:	e0ab      	b.n	80088fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d002      	beq.n	80087b8 <USBD_StdEPReq+0x1dc>
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d032      	beq.n	800881c <USBD_StdEPReq+0x240>
 80087b6:	e097      	b.n	80088e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d007      	beq.n	80087ce <USBD_StdEPReq+0x1f2>
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	2b80      	cmp	r3, #128	; 0x80
 80087c2:	d004      	beq.n	80087ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fbed 	bl	8008fa6 <USBD_CtlError>
                break;
 80087cc:	e091      	b.n	80088f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	da0b      	bge.n	80087ee <USBD_StdEPReq+0x212>
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087dc:	4613      	mov	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	3310      	adds	r3, #16
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	4413      	add	r3, r2
 80087ea:	3304      	adds	r3, #4
 80087ec:	e00b      	b.n	8008806 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087ee:	7bbb      	ldrb	r3, [r7, #14]
 80087f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087f4:	4613      	mov	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	4413      	add	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	4413      	add	r3, r2
 8008804:	3304      	adds	r3, #4
 8008806:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2200      	movs	r2, #0
 800880c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	2202      	movs	r2, #2
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fc37 	bl	8009088 <USBD_CtlSendData>
              break;
 800881a:	e06a      	b.n	80088f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800881c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008820:	2b00      	cmp	r3, #0
 8008822:	da11      	bge.n	8008848 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008824:	7bbb      	ldrb	r3, [r7, #14]
 8008826:	f003 020f 	and.w	r2, r3, #15
 800882a:	6879      	ldr	r1, [r7, #4]
 800882c:	4613      	mov	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	440b      	add	r3, r1
 8008836:	3324      	adds	r3, #36	; 0x24
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d117      	bne.n	800886e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fbb0 	bl	8008fa6 <USBD_CtlError>
                  break;
 8008846:	e054      	b.n	80088f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008848:	7bbb      	ldrb	r3, [r7, #14]
 800884a:	f003 020f 	and.w	r2, r3, #15
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	4613      	mov	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	440b      	add	r3, r1
 800885a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d104      	bne.n	800886e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 fb9d 	bl	8008fa6 <USBD_CtlError>
                  break;
 800886c:	e041      	b.n	80088f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800886e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008872:	2b00      	cmp	r3, #0
 8008874:	da0b      	bge.n	800888e <USBD_StdEPReq+0x2b2>
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800887c:	4613      	mov	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4413      	add	r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	3310      	adds	r3, #16
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	3304      	adds	r3, #4
 800888c:	e00b      	b.n	80088a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800888e:	7bbb      	ldrb	r3, [r7, #14]
 8008890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008894:	4613      	mov	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	4413      	add	r3, r2
 80088a4:	3304      	adds	r3, #4
 80088a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <USBD_StdEPReq+0x2d8>
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
 80088b0:	2b80      	cmp	r3, #128	; 0x80
 80088b2:	d103      	bne.n	80088bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	e00e      	b.n	80088da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088bc:	7bbb      	ldrb	r3, [r7, #14]
 80088be:	4619      	mov	r1, r3
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f001 f871 	bl	80099a8 <USBD_LL_IsStallEP>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d003      	beq.n	80088d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2201      	movs	r2, #1
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	e002      	b.n	80088da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2202      	movs	r2, #2
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fbd1 	bl	8009088 <USBD_CtlSendData>
              break;
 80088e6:	e004      	b.n	80088f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fb5b 	bl	8008fa6 <USBD_CtlError>
              break;
 80088f0:	bf00      	nop
          }
          break;
 80088f2:	e004      	b.n	80088fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fb55 	bl	8008fa6 <USBD_CtlError>
          break;
 80088fc:	bf00      	nop
      }
      break;
 80088fe:	e005      	b.n	800890c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fb4f 	bl	8008fa6 <USBD_CtlError>
      break;
 8008908:	e000      	b.n	800890c <USBD_StdEPReq+0x330>
      break;
 800890a:	bf00      	nop
  }

  return ret;
 800890c:	7bfb      	ldrb	r3, [r7, #15]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008922:	2300      	movs	r3, #0
 8008924:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008926:	2300      	movs	r3, #0
 8008928:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800892a:	2300      	movs	r3, #0
 800892c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	885b      	ldrh	r3, [r3, #2]
 8008932:	0a1b      	lsrs	r3, r3, #8
 8008934:	b29b      	uxth	r3, r3
 8008936:	3b01      	subs	r3, #1
 8008938:	2b06      	cmp	r3, #6
 800893a:	f200 8128 	bhi.w	8008b8e <USBD_GetDescriptor+0x276>
 800893e:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <USBD_GetDescriptor+0x2c>)
 8008940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008944:	08008961 	.word	0x08008961
 8008948:	08008979 	.word	0x08008979
 800894c:	080089b9 	.word	0x080089b9
 8008950:	08008b8f 	.word	0x08008b8f
 8008954:	08008b8f 	.word	0x08008b8f
 8008958:	08008b2f 	.word	0x08008b2f
 800895c:	08008b5b 	.word	0x08008b5b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	7c12      	ldrb	r2, [r2, #16]
 800896c:	f107 0108 	add.w	r1, r7, #8
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
 8008974:	60f8      	str	r0, [r7, #12]
      break;
 8008976:	e112      	b.n	8008b9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	7c1b      	ldrb	r3, [r3, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10d      	bne.n	800899c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008988:	f107 0208 	add.w	r2, r7, #8
 800898c:	4610      	mov	r0, r2
 800898e:	4798      	blx	r3
 8008990:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	3301      	adds	r3, #1
 8008996:	2202      	movs	r2, #2
 8008998:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800899a:	e100      	b.n	8008b9e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a4:	f107 0208 	add.w	r2, r7, #8
 80089a8:	4610      	mov	r0, r2
 80089aa:	4798      	blx	r3
 80089ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3301      	adds	r3, #1
 80089b2:	2202      	movs	r2, #2
 80089b4:	701a      	strb	r2, [r3, #0]
      break;
 80089b6:	e0f2      	b.n	8008b9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	885b      	ldrh	r3, [r3, #2]
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b05      	cmp	r3, #5
 80089c0:	f200 80ac 	bhi.w	8008b1c <USBD_GetDescriptor+0x204>
 80089c4:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <USBD_GetDescriptor+0xb4>)
 80089c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ca:	bf00      	nop
 80089cc:	080089e5 	.word	0x080089e5
 80089d0:	08008a19 	.word	0x08008a19
 80089d4:	08008a4d 	.word	0x08008a4d
 80089d8:	08008a81 	.word	0x08008a81
 80089dc:	08008ab5 	.word	0x08008ab5
 80089e0:	08008ae9 	.word	0x08008ae9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00b      	beq.n	8008a08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	7c12      	ldrb	r2, [r2, #16]
 80089fc:	f107 0108 	add.w	r1, r7, #8
 8008a00:	4610      	mov	r0, r2
 8008a02:	4798      	blx	r3
 8008a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a06:	e091      	b.n	8008b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 facb 	bl	8008fa6 <USBD_CtlError>
            err++;
 8008a10:	7afb      	ldrb	r3, [r7, #11]
 8008a12:	3301      	adds	r3, #1
 8008a14:	72fb      	strb	r3, [r7, #11]
          break;
 8008a16:	e089      	b.n	8008b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00b      	beq.n	8008a3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	7c12      	ldrb	r2, [r2, #16]
 8008a30:	f107 0108 	add.w	r1, r7, #8
 8008a34:	4610      	mov	r0, r2
 8008a36:	4798      	blx	r3
 8008a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a3a:	e077      	b.n	8008b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fab1 	bl	8008fa6 <USBD_CtlError>
            err++;
 8008a44:	7afb      	ldrb	r3, [r7, #11]
 8008a46:	3301      	adds	r3, #1
 8008a48:	72fb      	strb	r3, [r7, #11]
          break;
 8008a4a:	e06f      	b.n	8008b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00b      	beq.n	8008a70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	7c12      	ldrb	r2, [r2, #16]
 8008a64:	f107 0108 	add.w	r1, r7, #8
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
 8008a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a6e:	e05d      	b.n	8008b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fa97 	bl	8008fa6 <USBD_CtlError>
            err++;
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a7e:	e055      	b.n	8008b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	7c12      	ldrb	r2, [r2, #16]
 8008a98:	f107 0108 	add.w	r1, r7, #8
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4798      	blx	r3
 8008aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aa2:	e043      	b.n	8008b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fa7d 	bl	8008fa6 <USBD_CtlError>
            err++;
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ab2:	e03b      	b.n	8008b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00b      	beq.n	8008ad8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ac6:	695b      	ldr	r3, [r3, #20]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	7c12      	ldrb	r2, [r2, #16]
 8008acc:	f107 0108 	add.w	r1, r7, #8
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4798      	blx	r3
 8008ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ad6:	e029      	b.n	8008b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fa63 	bl	8008fa6 <USBD_CtlError>
            err++;
 8008ae0:	7afb      	ldrb	r3, [r7, #11]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ae6:	e021      	b.n	8008b2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00b      	beq.n	8008b0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	7c12      	ldrb	r2, [r2, #16]
 8008b00:	f107 0108 	add.w	r1, r7, #8
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
 8008b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b0a:	e00f      	b.n	8008b2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fa49 	bl	8008fa6 <USBD_CtlError>
            err++;
 8008b14:	7afb      	ldrb	r3, [r7, #11]
 8008b16:	3301      	adds	r3, #1
 8008b18:	72fb      	strb	r3, [r7, #11]
          break;
 8008b1a:	e007      	b.n	8008b2c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fa41 	bl	8008fa6 <USBD_CtlError>
          err++;
 8008b24:	7afb      	ldrb	r3, [r7, #11]
 8008b26:	3301      	adds	r3, #1
 8008b28:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008b2a:	bf00      	nop
      }
      break;
 8008b2c:	e037      	b.n	8008b9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	7c1b      	ldrb	r3, [r3, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d109      	bne.n	8008b4a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3e:	f107 0208 	add.w	r2, r7, #8
 8008b42:	4610      	mov	r0, r2
 8008b44:	4798      	blx	r3
 8008b46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b48:	e029      	b.n	8008b9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fa2a 	bl	8008fa6 <USBD_CtlError>
        err++;
 8008b52:	7afb      	ldrb	r3, [r7, #11]
 8008b54:	3301      	adds	r3, #1
 8008b56:	72fb      	strb	r3, [r7, #11]
      break;
 8008b58:	e021      	b.n	8008b9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	7c1b      	ldrb	r3, [r3, #16]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10d      	bne.n	8008b7e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6a:	f107 0208 	add.w	r2, r7, #8
 8008b6e:	4610      	mov	r0, r2
 8008b70:	4798      	blx	r3
 8008b72:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	3301      	adds	r3, #1
 8008b78:	2207      	movs	r2, #7
 8008b7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b7c:	e00f      	b.n	8008b9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fa10 	bl	8008fa6 <USBD_CtlError>
        err++;
 8008b86:	7afb      	ldrb	r3, [r7, #11]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b8c:	e007      	b.n	8008b9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fa08 	bl	8008fa6 <USBD_CtlError>
      err++;
 8008b96:	7afb      	ldrb	r3, [r7, #11]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b9c:	bf00      	nop
  }

  if (err != 0U)
 8008b9e:	7afb      	ldrb	r3, [r7, #11]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d11e      	bne.n	8008be2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	88db      	ldrh	r3, [r3, #6]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d016      	beq.n	8008bda <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008bac:	893b      	ldrh	r3, [r7, #8]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00e      	beq.n	8008bd0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	88da      	ldrh	r2, [r3, #6]
 8008bb6:	893b      	ldrh	r3, [r7, #8]
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	bf28      	it	cs
 8008bbc:	4613      	movcs	r3, r2
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008bc2:	893b      	ldrh	r3, [r7, #8]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	68f9      	ldr	r1, [r7, #12]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fa5d 	bl	8009088 <USBD_CtlSendData>
 8008bce:	e009      	b.n	8008be4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f9e7 	bl	8008fa6 <USBD_CtlError>
 8008bd8:	e004      	b.n	8008be4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 faae 	bl	800913c <USBD_CtlSendStatus>
 8008be0:	e000      	b.n	8008be4 <USBD_GetDescriptor+0x2cc>
    return;
 8008be2:	bf00      	nop
  }
}
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop

08008bec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	889b      	ldrh	r3, [r3, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d131      	bne.n	8008c62 <USBD_SetAddress+0x76>
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	88db      	ldrh	r3, [r3, #6]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d12d      	bne.n	8008c62 <USBD_SetAddress+0x76>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	885b      	ldrh	r3, [r3, #2]
 8008c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c0c:	d829      	bhi.n	8008c62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	885b      	ldrh	r3, [r3, #2]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b03      	cmp	r3, #3
 8008c24:	d104      	bne.n	8008c30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c26:	6839      	ldr	r1, [r7, #0]
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f9bc 	bl	8008fa6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c2e:	e01d      	b.n	8008c6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	7bfa      	ldrb	r2, [r7, #15]
 8008c34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c38:	7bfb      	ldrb	r3, [r7, #15]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fedf 	bl	8009a00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fa7a 	bl	800913c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d004      	beq.n	8008c58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2202      	movs	r2, #2
 8008c52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c56:	e009      	b.n	8008c6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c60:	e004      	b.n	8008c6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f99e 	bl	8008fa6 <USBD_CtlError>
  }
}
 8008c6a:	bf00      	nop
 8008c6c:	bf00      	nop
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	885b      	ldrh	r3, [r3, #2]
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	4b4e      	ldr	r3, [pc, #312]	; (8008dc4 <USBD_SetConfig+0x150>)
 8008c8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c8c:	4b4d      	ldr	r3, [pc, #308]	; (8008dc4 <USBD_SetConfig+0x150>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d905      	bls.n	8008ca0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f985 	bl	8008fa6 <USBD_CtlError>
    return USBD_FAIL;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e08c      	b.n	8008dba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d002      	beq.n	8008cb2 <USBD_SetConfig+0x3e>
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	d029      	beq.n	8008d04 <USBD_SetConfig+0x90>
 8008cb0:	e075      	b.n	8008d9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008cb2:	4b44      	ldr	r3, [pc, #272]	; (8008dc4 <USBD_SetConfig+0x150>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d020      	beq.n	8008cfc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008cba:	4b42      	ldr	r3, [pc, #264]	; (8008dc4 <USBD_SetConfig+0x150>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cc4:	4b3f      	ldr	r3, [pc, #252]	; (8008dc4 <USBD_SetConfig+0x150>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7fe ffe7 	bl	8007c9e <USBD_SetClassConfig>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d008      	beq.n	8008cec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f962 	bl	8008fa6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cea:	e065      	b.n	8008db8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fa25 	bl	800913c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2203      	movs	r2, #3
 8008cf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008cfa:	e05d      	b.n	8008db8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fa1d 	bl	800913c <USBD_CtlSendStatus>
      break;
 8008d02:	e059      	b.n	8008db8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d04:	4b2f      	ldr	r3, [pc, #188]	; (8008dc4 <USBD_SetConfig+0x150>)
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d112      	bne.n	8008d32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008d14:	4b2b      	ldr	r3, [pc, #172]	; (8008dc4 <USBD_SetConfig+0x150>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d1e:	4b29      	ldr	r3, [pc, #164]	; (8008dc4 <USBD_SetConfig+0x150>)
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7fe ffd6 	bl	8007cd6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fa06 	bl	800913c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d30:	e042      	b.n	8008db8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008d32:	4b24      	ldr	r3, [pc, #144]	; (8008dc4 <USBD_SetConfig+0x150>)
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d02a      	beq.n	8008d96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7fe ffc4 	bl	8007cd6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d4e:	4b1d      	ldr	r3, [pc, #116]	; (8008dc4 <USBD_SetConfig+0x150>)
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d58:	4b1a      	ldr	r3, [pc, #104]	; (8008dc4 <USBD_SetConfig+0x150>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7fe ff9d 	bl	8007c9e <USBD_SetClassConfig>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00f      	beq.n	8008d8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f918 	bl	8008fa6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7fe ffa9 	bl	8007cd6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2202      	movs	r2, #2
 8008d88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008d8c:	e014      	b.n	8008db8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f9d4 	bl	800913c <USBD_CtlSendStatus>
      break;
 8008d94:	e010      	b.n	8008db8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f9d0 	bl	800913c <USBD_CtlSendStatus>
      break;
 8008d9c:	e00c      	b.n	8008db8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f900 	bl	8008fa6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008da6:	4b07      	ldr	r3, [pc, #28]	; (8008dc4 <USBD_SetConfig+0x150>)
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7fe ff92 	bl	8007cd6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008db2:	2303      	movs	r3, #3
 8008db4:	73fb      	strb	r3, [r7, #15]
      break;
 8008db6:	bf00      	nop
  }

  return ret;
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	200006ec 	.word	0x200006ec

08008dc8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	88db      	ldrh	r3, [r3, #6]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d004      	beq.n	8008de4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f8e2 	bl	8008fa6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008de2:	e023      	b.n	8008e2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	dc02      	bgt.n	8008df6 <USBD_GetConfig+0x2e>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	dc03      	bgt.n	8008dfc <USBD_GetConfig+0x34>
 8008df4:	e015      	b.n	8008e22 <USBD_GetConfig+0x5a>
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d00b      	beq.n	8008e12 <USBD_GetConfig+0x4a>
 8008dfa:	e012      	b.n	8008e22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	3308      	adds	r3, #8
 8008e06:	2201      	movs	r2, #1
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f93c 	bl	8009088 <USBD_CtlSendData>
        break;
 8008e10:	e00c      	b.n	8008e2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	3304      	adds	r3, #4
 8008e16:	2201      	movs	r2, #1
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f934 	bl	8009088 <USBD_CtlSendData>
        break;
 8008e20:	e004      	b.n	8008e2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f8be 	bl	8008fa6 <USBD_CtlError>
        break;
 8008e2a:	bf00      	nop
}
 8008e2c:	bf00      	nop
 8008e2e:	3708      	adds	r7, #8
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	3b01      	subs	r3, #1
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d81e      	bhi.n	8008e8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	88db      	ldrh	r3, [r3, #6]
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d004      	beq.n	8008e5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f8a5 	bl	8008fa6 <USBD_CtlError>
        break;
 8008e5c:	e01a      	b.n	8008e94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d005      	beq.n	8008e7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	f043 0202 	orr.w	r2, r3, #2
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	330c      	adds	r3, #12
 8008e7e:	2202      	movs	r2, #2
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f900 	bl	8009088 <USBD_CtlSendData>
      break;
 8008e88:	e004      	b.n	8008e94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f88a 	bl	8008fa6 <USBD_CtlError>
      break;
 8008e92:	bf00      	nop
  }
}
 8008e94:	bf00      	nop
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	885b      	ldrh	r3, [r3, #2]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d107      	bne.n	8008ebe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f940 	bl	800913c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008ebc:	e013      	b.n	8008ee6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	885b      	ldrh	r3, [r3, #2]
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d10b      	bne.n	8008ede <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	889b      	ldrh	r3, [r3, #4]
 8008eca:	0a1b      	lsrs	r3, r3, #8
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f930 	bl	800913c <USBD_CtlSendStatus>
}
 8008edc:	e003      	b.n	8008ee6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f860 	bl	8008fa6 <USBD_CtlError>
}
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	3b01      	subs	r3, #1
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d80b      	bhi.n	8008f1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	885b      	ldrh	r3, [r3, #2]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d10c      	bne.n	8008f28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f910 	bl	800913c <USBD_CtlSendStatus>
      }
      break;
 8008f1c:	e004      	b.n	8008f28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f840 	bl	8008fa6 <USBD_CtlError>
      break;
 8008f26:	e000      	b.n	8008f2a <USBD_ClrFeature+0x3c>
      break;
 8008f28:	bf00      	nop
  }
}
 8008f2a:	bf00      	nop
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b084      	sub	sp, #16
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	781a      	ldrb	r2, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	781a      	ldrb	r2, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f7ff fa41 	bl	80083e4 <SWAPBYTE>
 8008f62:	4603      	mov	r3, r0
 8008f64:	461a      	mov	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3301      	adds	r3, #1
 8008f74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7ff fa34 	bl	80083e4 <SWAPBYTE>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	461a      	mov	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	3301      	adds	r3, #1
 8008f88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f7ff fa27 	bl	80083e4 <SWAPBYTE>
 8008f96:	4603      	mov	r3, r0
 8008f98:	461a      	mov	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	80da      	strh	r2, [r3, #6]
}
 8008f9e:	bf00      	nop
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fb0:	2180      	movs	r1, #128	; 0x80
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fcba 	bl	800992c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008fb8:	2100      	movs	r1, #0
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fcb6 	bl	800992c <USBD_LL_StallEP>
}
 8008fc0:	bf00      	nop
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d036      	beq.n	800904c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008fe2:	6938      	ldr	r0, [r7, #16]
 8008fe4:	f000 f836 	bl	8009054 <USBD_GetLen>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	3301      	adds	r3, #1
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	7812      	ldrb	r2, [r2, #0]
 8009000:	701a      	strb	r2, [r3, #0]
  idx++;
 8009002:	7dfb      	ldrb	r3, [r7, #23]
 8009004:	3301      	adds	r3, #1
 8009006:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009008:	7dfb      	ldrb	r3, [r7, #23]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	4413      	add	r3, r2
 800900e:	2203      	movs	r2, #3
 8009010:	701a      	strb	r2, [r3, #0]
  idx++;
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	3301      	adds	r3, #1
 8009016:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009018:	e013      	b.n	8009042 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	4413      	add	r3, r2
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	7812      	ldrb	r2, [r2, #0]
 8009024:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	3301      	adds	r3, #1
 800902a:	613b      	str	r3, [r7, #16]
    idx++;
 800902c:	7dfb      	ldrb	r3, [r7, #23]
 800902e:	3301      	adds	r3, #1
 8009030:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009032:	7dfb      	ldrb	r3, [r7, #23]
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	4413      	add	r3, r2
 8009038:	2200      	movs	r2, #0
 800903a:	701a      	strb	r2, [r3, #0]
    idx++;
 800903c:	7dfb      	ldrb	r3, [r7, #23]
 800903e:	3301      	adds	r3, #1
 8009040:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e7      	bne.n	800901a <USBD_GetString+0x52>
 800904a:	e000      	b.n	800904e <USBD_GetString+0x86>
    return;
 800904c:	bf00      	nop
  }
}
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800905c:	2300      	movs	r3, #0
 800905e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009064:	e005      	b.n	8009072 <USBD_GetLen+0x1e>
  {
    len++;
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	3301      	adds	r3, #1
 800906a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	3301      	adds	r3, #1
 8009070:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1f5      	bne.n	8009066 <USBD_GetLen+0x12>
  }

  return len;
 800907a:	7bfb      	ldrb	r3, [r7, #15]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3714      	adds	r7, #20
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2202      	movs	r2, #2
 8009098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	2100      	movs	r1, #0
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 fcc5 	bl	8009a3e <USBD_LL_Transmit>

  return USBD_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b084      	sub	sp, #16
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	60f8      	str	r0, [r7, #12]
 80090c6:	60b9      	str	r1, [r7, #8]
 80090c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	2100      	movs	r1, #0
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 fcb4 	bl	8009a3e <USBD_LL_Transmit>

  return USBD_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2203      	movs	r2, #3
 80090f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	2100      	movs	r1, #0
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 fcb8 	bl	8009a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	60f8      	str	r0, [r7, #12]
 8009122:	60b9      	str	r1, [r7, #8]
 8009124:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	2100      	movs	r1, #0
 800912c:	68f8      	ldr	r0, [r7, #12]
 800912e:	f000 fca7 	bl	8009a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2204      	movs	r2, #4
 8009148:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800914c:	2300      	movs	r3, #0
 800914e:	2200      	movs	r2, #0
 8009150:	2100      	movs	r1, #0
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fc73 	bl	8009a3e <USBD_LL_Transmit>

  return USBD_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b082      	sub	sp, #8
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2205      	movs	r2, #5
 800916e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009172:	2300      	movs	r3, #0
 8009174:	2200      	movs	r2, #0
 8009176:	2100      	movs	r1, #0
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fc81 	bl	8009a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800918c:	2200      	movs	r2, #0
 800918e:	4912      	ldr	r1, [pc, #72]	; (80091d8 <MX_USB_DEVICE_Init+0x50>)
 8009190:	4812      	ldr	r0, [pc, #72]	; (80091dc <MX_USB_DEVICE_Init+0x54>)
 8009192:	f7fe fd07 	bl	8007ba4 <USBD_Init>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800919c:	f7f8 fee6 	bl	8001f6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80091a0:	490f      	ldr	r1, [pc, #60]	; (80091e0 <MX_USB_DEVICE_Init+0x58>)
 80091a2:	480e      	ldr	r0, [pc, #56]	; (80091dc <MX_USB_DEVICE_Init+0x54>)
 80091a4:	f7fe fd2e 	bl	8007c04 <USBD_RegisterClass>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80091ae:	f7f8 fedd 	bl	8001f6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80091b2:	490c      	ldr	r1, [pc, #48]	; (80091e4 <MX_USB_DEVICE_Init+0x5c>)
 80091b4:	4809      	ldr	r0, [pc, #36]	; (80091dc <MX_USB_DEVICE_Init+0x54>)
 80091b6:	f7fe fc65 	bl	8007a84 <USBD_CDC_RegisterInterface>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80091c0:	f7f8 fed4 	bl	8001f6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80091c4:	4805      	ldr	r0, [pc, #20]	; (80091dc <MX_USB_DEVICE_Init+0x54>)
 80091c6:	f7fe fd53 	bl	8007c70 <USBD_Start>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80091d0:	f7f8 fecc 	bl	8001f6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80091d4:	bf00      	nop
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	200000ac 	.word	0x200000ac
 80091dc:	200006f0 	.word	0x200006f0
 80091e0:	20000018 	.word	0x20000018
 80091e4:	20000098 	.word	0x20000098

080091e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091ec:	2200      	movs	r2, #0
 80091ee:	4905      	ldr	r1, [pc, #20]	; (8009204 <CDC_Init_FS+0x1c>)
 80091f0:	4805      	ldr	r0, [pc, #20]	; (8009208 <CDC_Init_FS+0x20>)
 80091f2:	f7fe fc61 	bl	8007ab8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80091f6:	4905      	ldr	r1, [pc, #20]	; (800920c <CDC_Init_FS+0x24>)
 80091f8:	4803      	ldr	r0, [pc, #12]	; (8009208 <CDC_Init_FS+0x20>)
 80091fa:	f7fe fc7f 	bl	8007afc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80091fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009200:	4618      	mov	r0, r3
 8009202:	bd80      	pop	{r7, pc}
 8009204:	200011cc 	.word	0x200011cc
 8009208:	200006f0 	.word	0x200006f0
 800920c:	200009cc 	.word	0x200009cc

08009210 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009210:	b480      	push	{r7}
 8009212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009214:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009216:	4618      	mov	r0, r3
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	4603      	mov	r3, r0
 8009228:	6039      	str	r1, [r7, #0]
 800922a:	71fb      	strb	r3, [r7, #7]
 800922c:	4613      	mov	r3, r2
 800922e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009230:	79fb      	ldrb	r3, [r7, #7]
 8009232:	2b23      	cmp	r3, #35	; 0x23
 8009234:	d84a      	bhi.n	80092cc <CDC_Control_FS+0xac>
 8009236:	a201      	add	r2, pc, #4	; (adr r2, 800923c <CDC_Control_FS+0x1c>)
 8009238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923c:	080092cd 	.word	0x080092cd
 8009240:	080092cd 	.word	0x080092cd
 8009244:	080092cd 	.word	0x080092cd
 8009248:	080092cd 	.word	0x080092cd
 800924c:	080092cd 	.word	0x080092cd
 8009250:	080092cd 	.word	0x080092cd
 8009254:	080092cd 	.word	0x080092cd
 8009258:	080092cd 	.word	0x080092cd
 800925c:	080092cd 	.word	0x080092cd
 8009260:	080092cd 	.word	0x080092cd
 8009264:	080092cd 	.word	0x080092cd
 8009268:	080092cd 	.word	0x080092cd
 800926c:	080092cd 	.word	0x080092cd
 8009270:	080092cd 	.word	0x080092cd
 8009274:	080092cd 	.word	0x080092cd
 8009278:	080092cd 	.word	0x080092cd
 800927c:	080092cd 	.word	0x080092cd
 8009280:	080092cd 	.word	0x080092cd
 8009284:	080092cd 	.word	0x080092cd
 8009288:	080092cd 	.word	0x080092cd
 800928c:	080092cd 	.word	0x080092cd
 8009290:	080092cd 	.word	0x080092cd
 8009294:	080092cd 	.word	0x080092cd
 8009298:	080092cd 	.word	0x080092cd
 800929c:	080092cd 	.word	0x080092cd
 80092a0:	080092cd 	.word	0x080092cd
 80092a4:	080092cd 	.word	0x080092cd
 80092a8:	080092cd 	.word	0x080092cd
 80092ac:	080092cd 	.word	0x080092cd
 80092b0:	080092cd 	.word	0x080092cd
 80092b4:	080092cd 	.word	0x080092cd
 80092b8:	080092cd 	.word	0x080092cd
 80092bc:	080092cd 	.word	0x080092cd
 80092c0:	080092cd 	.word	0x080092cd
 80092c4:	080092cd 	.word	0x080092cd
 80092c8:	080092cd 	.word	0x080092cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80092cc:	bf00      	nop
  }

  return (USBD_OK);
 80092ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	4805      	ldr	r0, [pc, #20]	; (8009300 <CDC_Receive_FS+0x24>)
 80092ea:	f7fe fc07 	bl	8007afc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092ee:	4804      	ldr	r0, [pc, #16]	; (8009300 <CDC_Receive_FS+0x24>)
 80092f0:	f7fe fc22 	bl	8007b38 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80092f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	200006f0 	.word	0x200006f0

08009304 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009304:	b480      	push	{r7}
 8009306:	b087      	sub	sp, #28
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	4613      	mov	r3, r2
 8009310:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009316:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800931a:	4618      	mov	r0, r3
 800931c:	371c      	adds	r7, #28
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
	...

08009328 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	6039      	str	r1, [r7, #0]
 8009332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	2212      	movs	r2, #18
 8009338:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800933a:	4b03      	ldr	r3, [pc, #12]	; (8009348 <USBD_FS_DeviceDescriptor+0x20>)
}
 800933c:	4618      	mov	r0, r3
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	200000c8 	.word	0x200000c8

0800934c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	6039      	str	r1, [r7, #0]
 8009356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	2204      	movs	r2, #4
 800935c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800935e:	4b03      	ldr	r3, [pc, #12]	; (800936c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009360:	4618      	mov	r0, r3
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	200000dc 	.word	0x200000dc

08009370 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	6039      	str	r1, [r7, #0]
 800937a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d105      	bne.n	800938e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	4907      	ldr	r1, [pc, #28]	; (80093a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009386:	4808      	ldr	r0, [pc, #32]	; (80093a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009388:	f7ff fe1e 	bl	8008fc8 <USBD_GetString>
 800938c:	e004      	b.n	8009398 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	4904      	ldr	r1, [pc, #16]	; (80093a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009392:	4805      	ldr	r0, [pc, #20]	; (80093a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009394:	f7ff fe18 	bl	8008fc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009398:	4b02      	ldr	r3, [pc, #8]	; (80093a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	200019cc 	.word	0x200019cc
 80093a8:	0800ac24 	.word	0x0800ac24

080093ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	4603      	mov	r3, r0
 80093b4:	6039      	str	r1, [r7, #0]
 80093b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80093b8:	683a      	ldr	r2, [r7, #0]
 80093ba:	4904      	ldr	r1, [pc, #16]	; (80093cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80093bc:	4804      	ldr	r0, [pc, #16]	; (80093d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80093be:	f7ff fe03 	bl	8008fc8 <USBD_GetString>
  return USBD_StrDesc;
 80093c2:	4b02      	ldr	r3, [pc, #8]	; (80093cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	200019cc 	.word	0x200019cc
 80093d0:	0800ac3c 	.word	0x0800ac3c

080093d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	221a      	movs	r2, #26
 80093e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093e6:	f000 f843 	bl	8009470 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80093ea:	4b02      	ldr	r3, [pc, #8]	; (80093f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	200000e0 	.word	0x200000e0

080093f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	4603      	mov	r3, r0
 8009400:	6039      	str	r1, [r7, #0]
 8009402:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009404:	79fb      	ldrb	r3, [r7, #7]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d105      	bne.n	8009416 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	4907      	ldr	r1, [pc, #28]	; (800942c <USBD_FS_ConfigStrDescriptor+0x34>)
 800940e:	4808      	ldr	r0, [pc, #32]	; (8009430 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009410:	f7ff fdda 	bl	8008fc8 <USBD_GetString>
 8009414:	e004      	b.n	8009420 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	4904      	ldr	r1, [pc, #16]	; (800942c <USBD_FS_ConfigStrDescriptor+0x34>)
 800941a:	4805      	ldr	r0, [pc, #20]	; (8009430 <USBD_FS_ConfigStrDescriptor+0x38>)
 800941c:	f7ff fdd4 	bl	8008fc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009420:	4b02      	ldr	r3, [pc, #8]	; (800942c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	200019cc 	.word	0x200019cc
 8009430:	0800ac50 	.word	0x0800ac50

08009434 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	4603      	mov	r3, r0
 800943c:	6039      	str	r1, [r7, #0]
 800943e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009440:	79fb      	ldrb	r3, [r7, #7]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d105      	bne.n	8009452 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	4907      	ldr	r1, [pc, #28]	; (8009468 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800944a:	4808      	ldr	r0, [pc, #32]	; (800946c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800944c:	f7ff fdbc 	bl	8008fc8 <USBD_GetString>
 8009450:	e004      	b.n	800945c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	4904      	ldr	r1, [pc, #16]	; (8009468 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009456:	4805      	ldr	r0, [pc, #20]	; (800946c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009458:	f7ff fdb6 	bl	8008fc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800945c:	4b02      	ldr	r3, [pc, #8]	; (8009468 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800945e:	4618      	mov	r0, r3
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	200019cc 	.word	0x200019cc
 800946c:	0800ac5c 	.word	0x0800ac5c

08009470 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009476:	4b0f      	ldr	r3, [pc, #60]	; (80094b4 <Get_SerialNum+0x44>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800947c:	4b0e      	ldr	r3, [pc, #56]	; (80094b8 <Get_SerialNum+0x48>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009482:	4b0e      	ldr	r3, [pc, #56]	; (80094bc <Get_SerialNum+0x4c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4413      	add	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d009      	beq.n	80094aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009496:	2208      	movs	r2, #8
 8009498:	4909      	ldr	r1, [pc, #36]	; (80094c0 <Get_SerialNum+0x50>)
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 f814 	bl	80094c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094a0:	2204      	movs	r2, #4
 80094a2:	4908      	ldr	r1, [pc, #32]	; (80094c4 <Get_SerialNum+0x54>)
 80094a4:	68b8      	ldr	r0, [r7, #8]
 80094a6:	f000 f80f 	bl	80094c8 <IntToUnicode>
  }
}
 80094aa:	bf00      	nop
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	1fff7a10 	.word	0x1fff7a10
 80094b8:	1fff7a14 	.word	0x1fff7a14
 80094bc:	1fff7a18 	.word	0x1fff7a18
 80094c0:	200000e2 	.word	0x200000e2
 80094c4:	200000f2 	.word	0x200000f2

080094c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b087      	sub	sp, #28
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	4613      	mov	r3, r2
 80094d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80094d6:	2300      	movs	r3, #0
 80094d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80094da:	2300      	movs	r3, #0
 80094dc:	75fb      	strb	r3, [r7, #23]
 80094de:	e027      	b.n	8009530 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	0f1b      	lsrs	r3, r3, #28
 80094e4:	2b09      	cmp	r3, #9
 80094e6:	d80b      	bhi.n	8009500 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	0f1b      	lsrs	r3, r3, #28
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
 80094f0:	005b      	lsls	r3, r3, #1
 80094f2:	4619      	mov	r1, r3
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	440b      	add	r3, r1
 80094f8:	3230      	adds	r2, #48	; 0x30
 80094fa:	b2d2      	uxtb	r2, r2
 80094fc:	701a      	strb	r2, [r3, #0]
 80094fe:	e00a      	b.n	8009516 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	0f1b      	lsrs	r3, r3, #28
 8009504:	b2da      	uxtb	r2, r3
 8009506:	7dfb      	ldrb	r3, [r7, #23]
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	4619      	mov	r1, r3
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	440b      	add	r3, r1
 8009510:	3237      	adds	r2, #55	; 0x37
 8009512:	b2d2      	uxtb	r2, r2
 8009514:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	011b      	lsls	r3, r3, #4
 800951a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800951c:	7dfb      	ldrb	r3, [r7, #23]
 800951e:	005b      	lsls	r3, r3, #1
 8009520:	3301      	adds	r3, #1
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	4413      	add	r3, r2
 8009526:	2200      	movs	r2, #0
 8009528:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800952a:	7dfb      	ldrb	r3, [r7, #23]
 800952c:	3301      	adds	r3, #1
 800952e:	75fb      	strb	r3, [r7, #23]
 8009530:	7dfa      	ldrb	r2, [r7, #23]
 8009532:	79fb      	ldrb	r3, [r7, #7]
 8009534:	429a      	cmp	r2, r3
 8009536:	d3d3      	bcc.n	80094e0 <IntToUnicode+0x18>
  }
}
 8009538:	bf00      	nop
 800953a:	bf00      	nop
 800953c:	371c      	adds	r7, #28
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
	...

08009548 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08a      	sub	sp, #40	; 0x28
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009550:	f107 0314 	add.w	r3, r7, #20
 8009554:	2200      	movs	r2, #0
 8009556:	601a      	str	r2, [r3, #0]
 8009558:	605a      	str	r2, [r3, #4]
 800955a:	609a      	str	r2, [r3, #8]
 800955c:	60da      	str	r2, [r3, #12]
 800955e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009568:	d13a      	bne.n	80095e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800956a:	2300      	movs	r3, #0
 800956c:	613b      	str	r3, [r7, #16]
 800956e:	4b1e      	ldr	r3, [pc, #120]	; (80095e8 <HAL_PCD_MspInit+0xa0>)
 8009570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009572:	4a1d      	ldr	r2, [pc, #116]	; (80095e8 <HAL_PCD_MspInit+0xa0>)
 8009574:	f043 0301 	orr.w	r3, r3, #1
 8009578:	6313      	str	r3, [r2, #48]	; 0x30
 800957a:	4b1b      	ldr	r3, [pc, #108]	; (80095e8 <HAL_PCD_MspInit+0xa0>)
 800957c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	613b      	str	r3, [r7, #16]
 8009584:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009586:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800958a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800958c:	2302      	movs	r3, #2
 800958e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009590:	2300      	movs	r3, #0
 8009592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009594:	2303      	movs	r3, #3
 8009596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009598:	230a      	movs	r3, #10
 800959a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800959c:	f107 0314 	add.w	r3, r7, #20
 80095a0:	4619      	mov	r1, r3
 80095a2:	4812      	ldr	r0, [pc, #72]	; (80095ec <HAL_PCD_MspInit+0xa4>)
 80095a4:	f7f9 f8dc 	bl	8002760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80095a8:	4b0f      	ldr	r3, [pc, #60]	; (80095e8 <HAL_PCD_MspInit+0xa0>)
 80095aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ac:	4a0e      	ldr	r2, [pc, #56]	; (80095e8 <HAL_PCD_MspInit+0xa0>)
 80095ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b2:	6353      	str	r3, [r2, #52]	; 0x34
 80095b4:	2300      	movs	r3, #0
 80095b6:	60fb      	str	r3, [r7, #12]
 80095b8:	4b0b      	ldr	r3, [pc, #44]	; (80095e8 <HAL_PCD_MspInit+0xa0>)
 80095ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095bc:	4a0a      	ldr	r2, [pc, #40]	; (80095e8 <HAL_PCD_MspInit+0xa0>)
 80095be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095c2:	6453      	str	r3, [r2, #68]	; 0x44
 80095c4:	4b08      	ldr	r3, [pc, #32]	; (80095e8 <HAL_PCD_MspInit+0xa0>)
 80095c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095cc:	60fb      	str	r3, [r7, #12]
 80095ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80095d0:	2200      	movs	r2, #0
 80095d2:	2100      	movs	r1, #0
 80095d4:	2043      	movs	r0, #67	; 0x43
 80095d6:	f7f9 f88c 	bl	80026f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80095da:	2043      	movs	r0, #67	; 0x43
 80095dc:	f7f9 f8a5 	bl	800272a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80095e0:	bf00      	nop
 80095e2:	3728      	adds	r7, #40	; 0x28
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	40023800 	.word	0x40023800
 80095ec:	40020000 	.word	0x40020000

080095f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009604:	4619      	mov	r1, r3
 8009606:	4610      	mov	r0, r2
 8009608:	f7fe fb7f 	bl	8007d0a <USBD_LL_SetupStage>
}
 800960c:	bf00      	nop
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	460b      	mov	r3, r1
 800961e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009626:	78fa      	ldrb	r2, [r7, #3]
 8009628:	6879      	ldr	r1, [r7, #4]
 800962a:	4613      	mov	r3, r2
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	440b      	add	r3, r1
 8009634:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	78fb      	ldrb	r3, [r7, #3]
 800963c:	4619      	mov	r1, r3
 800963e:	f7fe fbb9 	bl	8007db4 <USBD_LL_DataOutStage>
}
 8009642:	bf00      	nop
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800965c:	78fa      	ldrb	r2, [r7, #3]
 800965e:	6879      	ldr	r1, [r7, #4]
 8009660:	4613      	mov	r3, r2
 8009662:	00db      	lsls	r3, r3, #3
 8009664:	4413      	add	r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	440b      	add	r3, r1
 800966a:	334c      	adds	r3, #76	; 0x4c
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	78fb      	ldrb	r3, [r7, #3]
 8009670:	4619      	mov	r1, r3
 8009672:	f7fe fc52 	bl	8007f1a <USBD_LL_DataInStage>
}
 8009676:	bf00      	nop
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe fd86 	bl	800819e <USBD_LL_SOF>
}
 8009692:	bf00      	nop
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80096a2:	2301      	movs	r3, #1
 80096a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d102      	bne.n	80096b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80096ae:	2300      	movs	r3, #0
 80096b0:	73fb      	strb	r3, [r7, #15]
 80096b2:	e008      	b.n	80096c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d102      	bne.n	80096c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80096bc:	2301      	movs	r3, #1
 80096be:	73fb      	strb	r3, [r7, #15]
 80096c0:	e001      	b.n	80096c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80096c2:	f7f8 fc53 	bl	8001f6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096cc:	7bfa      	ldrb	r2, [r7, #15]
 80096ce:	4611      	mov	r1, r2
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7fe fd26 	bl	8008122 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fe fcce 	bl	800807e <USBD_LL_Reset>
}
 80096e2:	bf00      	nop
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
	...

080096ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fe fd21 	bl	8008142 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	6812      	ldr	r2, [r2, #0]
 800970e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009712:	f043 0301 	orr.w	r3, r3, #1
 8009716:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a1b      	ldr	r3, [r3, #32]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d005      	beq.n	800972c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009720:	4b04      	ldr	r3, [pc, #16]	; (8009734 <HAL_PCD_SuspendCallback+0x48>)
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	4a03      	ldr	r2, [pc, #12]	; (8009734 <HAL_PCD_SuspendCallback+0x48>)
 8009726:	f043 0306 	orr.w	r3, r3, #6
 800972a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800972c:	bf00      	nop
 800972e:	3708      	adds	r7, #8
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	e000ed00 	.word	0xe000ed00

08009738 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009746:	4618      	mov	r0, r3
 8009748:	f7fe fd11 	bl	800816e <USBD_LL_Resume>
}
 800974c:	bf00      	nop
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009766:	78fa      	ldrb	r2, [r7, #3]
 8009768:	4611      	mov	r1, r2
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fd69 	bl	8008242 <USBD_LL_IsoOUTIncomplete>
}
 8009770:	bf00      	nop
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800978a:	78fa      	ldrb	r2, [r7, #3]
 800978c:	4611      	mov	r1, r2
 800978e:	4618      	mov	r0, r3
 8009790:	f7fe fd25 	bl	80081de <USBD_LL_IsoINIncomplete>
}
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fe fd7b 	bl	80082a6 <USBD_LL_DevConnected>
}
 80097b0:	bf00      	nop
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fe fd78 	bl	80082bc <USBD_LL_DevDisconnected>
}
 80097cc:	bf00      	nop
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d13c      	bne.n	800985e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80097e4:	4a20      	ldr	r2, [pc, #128]	; (8009868 <USBD_LL_Init+0x94>)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a1e      	ldr	r2, [pc, #120]	; (8009868 <USBD_LL_Init+0x94>)
 80097f0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80097f4:	4b1c      	ldr	r3, [pc, #112]	; (8009868 <USBD_LL_Init+0x94>)
 80097f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80097fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80097fc:	4b1a      	ldr	r3, [pc, #104]	; (8009868 <USBD_LL_Init+0x94>)
 80097fe:	2204      	movs	r2, #4
 8009800:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009802:	4b19      	ldr	r3, [pc, #100]	; (8009868 <USBD_LL_Init+0x94>)
 8009804:	2202      	movs	r2, #2
 8009806:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009808:	4b17      	ldr	r3, [pc, #92]	; (8009868 <USBD_LL_Init+0x94>)
 800980a:	2200      	movs	r2, #0
 800980c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800980e:	4b16      	ldr	r3, [pc, #88]	; (8009868 <USBD_LL_Init+0x94>)
 8009810:	2202      	movs	r2, #2
 8009812:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009814:	4b14      	ldr	r3, [pc, #80]	; (8009868 <USBD_LL_Init+0x94>)
 8009816:	2200      	movs	r2, #0
 8009818:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800981a:	4b13      	ldr	r3, [pc, #76]	; (8009868 <USBD_LL_Init+0x94>)
 800981c:	2200      	movs	r2, #0
 800981e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009820:	4b11      	ldr	r3, [pc, #68]	; (8009868 <USBD_LL_Init+0x94>)
 8009822:	2200      	movs	r2, #0
 8009824:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009826:	4b10      	ldr	r3, [pc, #64]	; (8009868 <USBD_LL_Init+0x94>)
 8009828:	2200      	movs	r2, #0
 800982a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800982c:	4b0e      	ldr	r3, [pc, #56]	; (8009868 <USBD_LL_Init+0x94>)
 800982e:	2200      	movs	r2, #0
 8009830:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009832:	480d      	ldr	r0, [pc, #52]	; (8009868 <USBD_LL_Init+0x94>)
 8009834:	f7f9 f959 	bl	8002aea <HAL_PCD_Init>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800983e:	f7f8 fb95 	bl	8001f6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009842:	2180      	movs	r1, #128	; 0x80
 8009844:	4808      	ldr	r0, [pc, #32]	; (8009868 <USBD_LL_Init+0x94>)
 8009846:	f7fa fbb0 	bl	8003faa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800984a:	2240      	movs	r2, #64	; 0x40
 800984c:	2100      	movs	r1, #0
 800984e:	4806      	ldr	r0, [pc, #24]	; (8009868 <USBD_LL_Init+0x94>)
 8009850:	f7fa fb64 	bl	8003f1c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009854:	2280      	movs	r2, #128	; 0x80
 8009856:	2101      	movs	r1, #1
 8009858:	4803      	ldr	r0, [pc, #12]	; (8009868 <USBD_LL_Init+0x94>)
 800985a:	f7fa fb5f 	bl	8003f1c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	20001bcc 	.word	0x20001bcc

0800986c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009882:	4618      	mov	r0, r3
 8009884:	f7f9 fa4e 	bl	8002d24 <HAL_PCD_Start>
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800988c:	7bfb      	ldrb	r3, [r7, #15]
 800988e:	4618      	mov	r0, r3
 8009890:	f000 f942 	bl	8009b18 <USBD_Get_USB_Status>
 8009894:	4603      	mov	r3, r0
 8009896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009898:	7bbb      	ldrb	r3, [r7, #14]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b084      	sub	sp, #16
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	4608      	mov	r0, r1
 80098ac:	4611      	mov	r1, r2
 80098ae:	461a      	mov	r2, r3
 80098b0:	4603      	mov	r3, r0
 80098b2:	70fb      	strb	r3, [r7, #3]
 80098b4:	460b      	mov	r3, r1
 80098b6:	70bb      	strb	r3, [r7, #2]
 80098b8:	4613      	mov	r3, r2
 80098ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c0:	2300      	movs	r3, #0
 80098c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80098ca:	78bb      	ldrb	r3, [r7, #2]
 80098cc:	883a      	ldrh	r2, [r7, #0]
 80098ce:	78f9      	ldrb	r1, [r7, #3]
 80098d0:	f7f9 ff1f 	bl	8003712 <HAL_PCD_EP_Open>
 80098d4:	4603      	mov	r3, r0
 80098d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 f91c 	bl	8009b18 <USBD_Get_USB_Status>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	460b      	mov	r3, r1
 80098f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	4611      	mov	r1, r2
 800990c:	4618      	mov	r0, r3
 800990e:	f7f9 ff68 	bl	80037e2 <HAL_PCD_EP_Close>
 8009912:	4603      	mov	r3, r0
 8009914:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009916:	7bfb      	ldrb	r3, [r7, #15]
 8009918:	4618      	mov	r0, r3
 800991a:	f000 f8fd 	bl	8009b18 <USBD_Get_USB_Status>
 800991e:	4603      	mov	r3, r0
 8009920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009922:	7bbb      	ldrb	r3, [r7, #14]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009946:	78fa      	ldrb	r2, [r7, #3]
 8009948:	4611      	mov	r1, r2
 800994a:	4618      	mov	r0, r3
 800994c:	f7fa f840 	bl	80039d0 <HAL_PCD_EP_SetStall>
 8009950:	4603      	mov	r3, r0
 8009952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009954:	7bfb      	ldrb	r3, [r7, #15]
 8009956:	4618      	mov	r0, r3
 8009958:	f000 f8de 	bl	8009b18 <USBD_Get_USB_Status>
 800995c:	4603      	mov	r3, r0
 800995e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009960:	7bbb      	ldrb	r3, [r7, #14]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b084      	sub	sp, #16
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	460b      	mov	r3, r1
 8009974:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009984:	78fa      	ldrb	r2, [r7, #3]
 8009986:	4611      	mov	r1, r2
 8009988:	4618      	mov	r0, r3
 800998a:	f7fa f885 	bl	8003a98 <HAL_PCD_EP_ClrStall>
 800998e:	4603      	mov	r3, r0
 8009990:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009992:	7bfb      	ldrb	r3, [r7, #15]
 8009994:	4618      	mov	r0, r3
 8009996:	f000 f8bf 	bl	8009b18 <USBD_Get_USB_Status>
 800999a:	4603      	mov	r3, r0
 800999c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800999e:	7bbb      	ldrb	r3, [r7, #14]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80099bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	da0b      	bge.n	80099dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099c4:	78fb      	ldrb	r3, [r7, #3]
 80099c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099ca:	68f9      	ldr	r1, [r7, #12]
 80099cc:	4613      	mov	r3, r2
 80099ce:	00db      	lsls	r3, r3, #3
 80099d0:	4413      	add	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	440b      	add	r3, r1
 80099d6:	333e      	adds	r3, #62	; 0x3e
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	e00b      	b.n	80099f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099dc:	78fb      	ldrb	r3, [r7, #3]
 80099de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099e2:	68f9      	ldr	r1, [r7, #12]
 80099e4:	4613      	mov	r3, r2
 80099e6:	00db      	lsls	r3, r3, #3
 80099e8:	4413      	add	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	440b      	add	r3, r1
 80099ee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80099f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a1a:	78fa      	ldrb	r2, [r7, #3]
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f9 fe52 	bl	80036c8 <HAL_PCD_SetAddress>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 f874 	bl	8009b18 <USBD_Get_USB_Status>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b086      	sub	sp, #24
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	603b      	str	r3, [r7, #0]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a5c:	7af9      	ldrb	r1, [r7, #11]
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	f7f9 ff6b 	bl	800393c <HAL_PCD_EP_Transmit>
 8009a66:	4603      	mov	r3, r0
 8009a68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 f853 	bl	8009b18 <USBD_Get_USB_Status>
 8009a72:	4603      	mov	r3, r0
 8009a74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a76:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3718      	adds	r7, #24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	607a      	str	r2, [r7, #4]
 8009a8a:	603b      	str	r3, [r7, #0]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a9e:	7af9      	ldrb	r1, [r7, #11]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	f7f9 fee7 	bl	8003876 <HAL_PCD_EP_Receive>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 f832 	bl	8009b18 <USBD_Get_USB_Status>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ab8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3718      	adds	r7, #24
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b082      	sub	sp, #8
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	460b      	mov	r3, r1
 8009acc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ad4:	78fa      	ldrb	r2, [r7, #3]
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7f9 ff17 	bl	800390c <HAL_PCD_EP_GetRxCount>
 8009ade:	4603      	mov	r3, r0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009af0:	4b03      	ldr	r3, [pc, #12]	; (8009b00 <USBD_static_malloc+0x18>)
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	200020d8 	.word	0x200020d8

08009b04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]

}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	4603      	mov	r3, r0
 8009b20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b26:	79fb      	ldrb	r3, [r7, #7]
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d817      	bhi.n	8009b5c <USBD_Get_USB_Status+0x44>
 8009b2c:	a201      	add	r2, pc, #4	; (adr r2, 8009b34 <USBD_Get_USB_Status+0x1c>)
 8009b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b32:	bf00      	nop
 8009b34:	08009b45 	.word	0x08009b45
 8009b38:	08009b4b 	.word	0x08009b4b
 8009b3c:	08009b51 	.word	0x08009b51
 8009b40:	08009b57 	.word	0x08009b57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73fb      	strb	r3, [r7, #15]
    break;
 8009b48:	e00b      	b.n	8009b62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4e:	e008      	b.n	8009b62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b50:	2301      	movs	r3, #1
 8009b52:	73fb      	strb	r3, [r7, #15]
    break;
 8009b54:	e005      	b.n	8009b62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b56:	2303      	movs	r3, #3
 8009b58:	73fb      	strb	r3, [r7, #15]
    break;
 8009b5a:	e002      	b.n	8009b62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b60:	bf00      	nop
  }
  return usb_status;
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3714      	adds	r7, #20
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <__errno>:
 8009b70:	4b01      	ldr	r3, [pc, #4]	; (8009b78 <__errno+0x8>)
 8009b72:	6818      	ldr	r0, [r3, #0]
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	200000fc 	.word	0x200000fc

08009b7c <__libc_init_array>:
 8009b7c:	b570      	push	{r4, r5, r6, lr}
 8009b7e:	4d0d      	ldr	r5, [pc, #52]	; (8009bb4 <__libc_init_array+0x38>)
 8009b80:	4c0d      	ldr	r4, [pc, #52]	; (8009bb8 <__libc_init_array+0x3c>)
 8009b82:	1b64      	subs	r4, r4, r5
 8009b84:	10a4      	asrs	r4, r4, #2
 8009b86:	2600      	movs	r6, #0
 8009b88:	42a6      	cmp	r6, r4
 8009b8a:	d109      	bne.n	8009ba0 <__libc_init_array+0x24>
 8009b8c:	4d0b      	ldr	r5, [pc, #44]	; (8009bbc <__libc_init_array+0x40>)
 8009b8e:	4c0c      	ldr	r4, [pc, #48]	; (8009bc0 <__libc_init_array+0x44>)
 8009b90:	f001 f824 	bl	800abdc <_init>
 8009b94:	1b64      	subs	r4, r4, r5
 8009b96:	10a4      	asrs	r4, r4, #2
 8009b98:	2600      	movs	r6, #0
 8009b9a:	42a6      	cmp	r6, r4
 8009b9c:	d105      	bne.n	8009baa <__libc_init_array+0x2e>
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba4:	4798      	blx	r3
 8009ba6:	3601      	adds	r6, #1
 8009ba8:	e7ee      	b.n	8009b88 <__libc_init_array+0xc>
 8009baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bae:	4798      	blx	r3
 8009bb0:	3601      	adds	r6, #1
 8009bb2:	e7f2      	b.n	8009b9a <__libc_init_array+0x1e>
 8009bb4:	0800ad24 	.word	0x0800ad24
 8009bb8:	0800ad24 	.word	0x0800ad24
 8009bbc:	0800ad24 	.word	0x0800ad24
 8009bc0:	0800ad28 	.word	0x0800ad28

08009bc4 <memset>:
 8009bc4:	4402      	add	r2, r0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d100      	bne.n	8009bce <memset+0xa>
 8009bcc:	4770      	bx	lr
 8009bce:	f803 1b01 	strb.w	r1, [r3], #1
 8009bd2:	e7f9      	b.n	8009bc8 <memset+0x4>

08009bd4 <iprintf>:
 8009bd4:	b40f      	push	{r0, r1, r2, r3}
 8009bd6:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <iprintf+0x2c>)
 8009bd8:	b513      	push	{r0, r1, r4, lr}
 8009bda:	681c      	ldr	r4, [r3, #0]
 8009bdc:	b124      	cbz	r4, 8009be8 <iprintf+0x14>
 8009bde:	69a3      	ldr	r3, [r4, #24]
 8009be0:	b913      	cbnz	r3, 8009be8 <iprintf+0x14>
 8009be2:	4620      	mov	r0, r4
 8009be4:	f000 fa5e 	bl	800a0a4 <__sinit>
 8009be8:	ab05      	add	r3, sp, #20
 8009bea:	9a04      	ldr	r2, [sp, #16]
 8009bec:	68a1      	ldr	r1, [r4, #8]
 8009bee:	9301      	str	r3, [sp, #4]
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	f000 fc67 	bl	800a4c4 <_vfiprintf_r>
 8009bf6:	b002      	add	sp, #8
 8009bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bfc:	b004      	add	sp, #16
 8009bfe:	4770      	bx	lr
 8009c00:	200000fc 	.word	0x200000fc

08009c04 <_puts_r>:
 8009c04:	b570      	push	{r4, r5, r6, lr}
 8009c06:	460e      	mov	r6, r1
 8009c08:	4605      	mov	r5, r0
 8009c0a:	b118      	cbz	r0, 8009c14 <_puts_r+0x10>
 8009c0c:	6983      	ldr	r3, [r0, #24]
 8009c0e:	b90b      	cbnz	r3, 8009c14 <_puts_r+0x10>
 8009c10:	f000 fa48 	bl	800a0a4 <__sinit>
 8009c14:	69ab      	ldr	r3, [r5, #24]
 8009c16:	68ac      	ldr	r4, [r5, #8]
 8009c18:	b913      	cbnz	r3, 8009c20 <_puts_r+0x1c>
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f000 fa42 	bl	800a0a4 <__sinit>
 8009c20:	4b2c      	ldr	r3, [pc, #176]	; (8009cd4 <_puts_r+0xd0>)
 8009c22:	429c      	cmp	r4, r3
 8009c24:	d120      	bne.n	8009c68 <_puts_r+0x64>
 8009c26:	686c      	ldr	r4, [r5, #4]
 8009c28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c2a:	07db      	lsls	r3, r3, #31
 8009c2c:	d405      	bmi.n	8009c3a <_puts_r+0x36>
 8009c2e:	89a3      	ldrh	r3, [r4, #12]
 8009c30:	0598      	lsls	r0, r3, #22
 8009c32:	d402      	bmi.n	8009c3a <_puts_r+0x36>
 8009c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c36:	f000 fad3 	bl	800a1e0 <__retarget_lock_acquire_recursive>
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	0719      	lsls	r1, r3, #28
 8009c3e:	d51d      	bpl.n	8009c7c <_puts_r+0x78>
 8009c40:	6923      	ldr	r3, [r4, #16]
 8009c42:	b1db      	cbz	r3, 8009c7c <_puts_r+0x78>
 8009c44:	3e01      	subs	r6, #1
 8009c46:	68a3      	ldr	r3, [r4, #8]
 8009c48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	60a3      	str	r3, [r4, #8]
 8009c50:	bb39      	cbnz	r1, 8009ca2 <_puts_r+0x9e>
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	da38      	bge.n	8009cc8 <_puts_r+0xc4>
 8009c56:	4622      	mov	r2, r4
 8009c58:	210a      	movs	r1, #10
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f000 f848 	bl	8009cf0 <__swbuf_r>
 8009c60:	3001      	adds	r0, #1
 8009c62:	d011      	beq.n	8009c88 <_puts_r+0x84>
 8009c64:	250a      	movs	r5, #10
 8009c66:	e011      	b.n	8009c8c <_puts_r+0x88>
 8009c68:	4b1b      	ldr	r3, [pc, #108]	; (8009cd8 <_puts_r+0xd4>)
 8009c6a:	429c      	cmp	r4, r3
 8009c6c:	d101      	bne.n	8009c72 <_puts_r+0x6e>
 8009c6e:	68ac      	ldr	r4, [r5, #8]
 8009c70:	e7da      	b.n	8009c28 <_puts_r+0x24>
 8009c72:	4b1a      	ldr	r3, [pc, #104]	; (8009cdc <_puts_r+0xd8>)
 8009c74:	429c      	cmp	r4, r3
 8009c76:	bf08      	it	eq
 8009c78:	68ec      	ldreq	r4, [r5, #12]
 8009c7a:	e7d5      	b.n	8009c28 <_puts_r+0x24>
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	4628      	mov	r0, r5
 8009c80:	f000 f888 	bl	8009d94 <__swsetup_r>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d0dd      	beq.n	8009c44 <_puts_r+0x40>
 8009c88:	f04f 35ff 	mov.w	r5, #4294967295
 8009c8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c8e:	07da      	lsls	r2, r3, #31
 8009c90:	d405      	bmi.n	8009c9e <_puts_r+0x9a>
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	059b      	lsls	r3, r3, #22
 8009c96:	d402      	bmi.n	8009c9e <_puts_r+0x9a>
 8009c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c9a:	f000 faa2 	bl	800a1e2 <__retarget_lock_release_recursive>
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	bd70      	pop	{r4, r5, r6, pc}
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	da04      	bge.n	8009cb0 <_puts_r+0xac>
 8009ca6:	69a2      	ldr	r2, [r4, #24]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	dc06      	bgt.n	8009cba <_puts_r+0xb6>
 8009cac:	290a      	cmp	r1, #10
 8009cae:	d004      	beq.n	8009cba <_puts_r+0xb6>
 8009cb0:	6823      	ldr	r3, [r4, #0]
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	6022      	str	r2, [r4, #0]
 8009cb6:	7019      	strb	r1, [r3, #0]
 8009cb8:	e7c5      	b.n	8009c46 <_puts_r+0x42>
 8009cba:	4622      	mov	r2, r4
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	f000 f817 	bl	8009cf0 <__swbuf_r>
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	d1bf      	bne.n	8009c46 <_puts_r+0x42>
 8009cc6:	e7df      	b.n	8009c88 <_puts_r+0x84>
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	250a      	movs	r5, #10
 8009ccc:	1c5a      	adds	r2, r3, #1
 8009cce:	6022      	str	r2, [r4, #0]
 8009cd0:	701d      	strb	r5, [r3, #0]
 8009cd2:	e7db      	b.n	8009c8c <_puts_r+0x88>
 8009cd4:	0800aca8 	.word	0x0800aca8
 8009cd8:	0800acc8 	.word	0x0800acc8
 8009cdc:	0800ac88 	.word	0x0800ac88

08009ce0 <puts>:
 8009ce0:	4b02      	ldr	r3, [pc, #8]	; (8009cec <puts+0xc>)
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	6818      	ldr	r0, [r3, #0]
 8009ce6:	f7ff bf8d 	b.w	8009c04 <_puts_r>
 8009cea:	bf00      	nop
 8009cec:	200000fc 	.word	0x200000fc

08009cf0 <__swbuf_r>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	460e      	mov	r6, r1
 8009cf4:	4614      	mov	r4, r2
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	b118      	cbz	r0, 8009d02 <__swbuf_r+0x12>
 8009cfa:	6983      	ldr	r3, [r0, #24]
 8009cfc:	b90b      	cbnz	r3, 8009d02 <__swbuf_r+0x12>
 8009cfe:	f000 f9d1 	bl	800a0a4 <__sinit>
 8009d02:	4b21      	ldr	r3, [pc, #132]	; (8009d88 <__swbuf_r+0x98>)
 8009d04:	429c      	cmp	r4, r3
 8009d06:	d12b      	bne.n	8009d60 <__swbuf_r+0x70>
 8009d08:	686c      	ldr	r4, [r5, #4]
 8009d0a:	69a3      	ldr	r3, [r4, #24]
 8009d0c:	60a3      	str	r3, [r4, #8]
 8009d0e:	89a3      	ldrh	r3, [r4, #12]
 8009d10:	071a      	lsls	r2, r3, #28
 8009d12:	d52f      	bpl.n	8009d74 <__swbuf_r+0x84>
 8009d14:	6923      	ldr	r3, [r4, #16]
 8009d16:	b36b      	cbz	r3, 8009d74 <__swbuf_r+0x84>
 8009d18:	6923      	ldr	r3, [r4, #16]
 8009d1a:	6820      	ldr	r0, [r4, #0]
 8009d1c:	1ac0      	subs	r0, r0, r3
 8009d1e:	6963      	ldr	r3, [r4, #20]
 8009d20:	b2f6      	uxtb	r6, r6
 8009d22:	4283      	cmp	r3, r0
 8009d24:	4637      	mov	r7, r6
 8009d26:	dc04      	bgt.n	8009d32 <__swbuf_r+0x42>
 8009d28:	4621      	mov	r1, r4
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f000 f926 	bl	8009f7c <_fflush_r>
 8009d30:	bb30      	cbnz	r0, 8009d80 <__swbuf_r+0x90>
 8009d32:	68a3      	ldr	r3, [r4, #8]
 8009d34:	3b01      	subs	r3, #1
 8009d36:	60a3      	str	r3, [r4, #8]
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	1c5a      	adds	r2, r3, #1
 8009d3c:	6022      	str	r2, [r4, #0]
 8009d3e:	701e      	strb	r6, [r3, #0]
 8009d40:	6963      	ldr	r3, [r4, #20]
 8009d42:	3001      	adds	r0, #1
 8009d44:	4283      	cmp	r3, r0
 8009d46:	d004      	beq.n	8009d52 <__swbuf_r+0x62>
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	07db      	lsls	r3, r3, #31
 8009d4c:	d506      	bpl.n	8009d5c <__swbuf_r+0x6c>
 8009d4e:	2e0a      	cmp	r6, #10
 8009d50:	d104      	bne.n	8009d5c <__swbuf_r+0x6c>
 8009d52:	4621      	mov	r1, r4
 8009d54:	4628      	mov	r0, r5
 8009d56:	f000 f911 	bl	8009f7c <_fflush_r>
 8009d5a:	b988      	cbnz	r0, 8009d80 <__swbuf_r+0x90>
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d60:	4b0a      	ldr	r3, [pc, #40]	; (8009d8c <__swbuf_r+0x9c>)
 8009d62:	429c      	cmp	r4, r3
 8009d64:	d101      	bne.n	8009d6a <__swbuf_r+0x7a>
 8009d66:	68ac      	ldr	r4, [r5, #8]
 8009d68:	e7cf      	b.n	8009d0a <__swbuf_r+0x1a>
 8009d6a:	4b09      	ldr	r3, [pc, #36]	; (8009d90 <__swbuf_r+0xa0>)
 8009d6c:	429c      	cmp	r4, r3
 8009d6e:	bf08      	it	eq
 8009d70:	68ec      	ldreq	r4, [r5, #12]
 8009d72:	e7ca      	b.n	8009d0a <__swbuf_r+0x1a>
 8009d74:	4621      	mov	r1, r4
 8009d76:	4628      	mov	r0, r5
 8009d78:	f000 f80c 	bl	8009d94 <__swsetup_r>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d0cb      	beq.n	8009d18 <__swbuf_r+0x28>
 8009d80:	f04f 37ff 	mov.w	r7, #4294967295
 8009d84:	e7ea      	b.n	8009d5c <__swbuf_r+0x6c>
 8009d86:	bf00      	nop
 8009d88:	0800aca8 	.word	0x0800aca8
 8009d8c:	0800acc8 	.word	0x0800acc8
 8009d90:	0800ac88 	.word	0x0800ac88

08009d94 <__swsetup_r>:
 8009d94:	4b32      	ldr	r3, [pc, #200]	; (8009e60 <__swsetup_r+0xcc>)
 8009d96:	b570      	push	{r4, r5, r6, lr}
 8009d98:	681d      	ldr	r5, [r3, #0]
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460c      	mov	r4, r1
 8009d9e:	b125      	cbz	r5, 8009daa <__swsetup_r+0x16>
 8009da0:	69ab      	ldr	r3, [r5, #24]
 8009da2:	b913      	cbnz	r3, 8009daa <__swsetup_r+0x16>
 8009da4:	4628      	mov	r0, r5
 8009da6:	f000 f97d 	bl	800a0a4 <__sinit>
 8009daa:	4b2e      	ldr	r3, [pc, #184]	; (8009e64 <__swsetup_r+0xd0>)
 8009dac:	429c      	cmp	r4, r3
 8009dae:	d10f      	bne.n	8009dd0 <__swsetup_r+0x3c>
 8009db0:	686c      	ldr	r4, [r5, #4]
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009db8:	0719      	lsls	r1, r3, #28
 8009dba:	d42c      	bmi.n	8009e16 <__swsetup_r+0x82>
 8009dbc:	06dd      	lsls	r5, r3, #27
 8009dbe:	d411      	bmi.n	8009de4 <__swsetup_r+0x50>
 8009dc0:	2309      	movs	r3, #9
 8009dc2:	6033      	str	r3, [r6, #0]
 8009dc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dc8:	81a3      	strh	r3, [r4, #12]
 8009dca:	f04f 30ff 	mov.w	r0, #4294967295
 8009dce:	e03e      	b.n	8009e4e <__swsetup_r+0xba>
 8009dd0:	4b25      	ldr	r3, [pc, #148]	; (8009e68 <__swsetup_r+0xd4>)
 8009dd2:	429c      	cmp	r4, r3
 8009dd4:	d101      	bne.n	8009dda <__swsetup_r+0x46>
 8009dd6:	68ac      	ldr	r4, [r5, #8]
 8009dd8:	e7eb      	b.n	8009db2 <__swsetup_r+0x1e>
 8009dda:	4b24      	ldr	r3, [pc, #144]	; (8009e6c <__swsetup_r+0xd8>)
 8009ddc:	429c      	cmp	r4, r3
 8009dde:	bf08      	it	eq
 8009de0:	68ec      	ldreq	r4, [r5, #12]
 8009de2:	e7e6      	b.n	8009db2 <__swsetup_r+0x1e>
 8009de4:	0758      	lsls	r0, r3, #29
 8009de6:	d512      	bpl.n	8009e0e <__swsetup_r+0x7a>
 8009de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dea:	b141      	cbz	r1, 8009dfe <__swsetup_r+0x6a>
 8009dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009df0:	4299      	cmp	r1, r3
 8009df2:	d002      	beq.n	8009dfa <__swsetup_r+0x66>
 8009df4:	4630      	mov	r0, r6
 8009df6:	f000 fa5b 	bl	800a2b0 <_free_r>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	6363      	str	r3, [r4, #52]	; 0x34
 8009dfe:	89a3      	ldrh	r3, [r4, #12]
 8009e00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e04:	81a3      	strh	r3, [r4, #12]
 8009e06:	2300      	movs	r3, #0
 8009e08:	6063      	str	r3, [r4, #4]
 8009e0a:	6923      	ldr	r3, [r4, #16]
 8009e0c:	6023      	str	r3, [r4, #0]
 8009e0e:	89a3      	ldrh	r3, [r4, #12]
 8009e10:	f043 0308 	orr.w	r3, r3, #8
 8009e14:	81a3      	strh	r3, [r4, #12]
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	b94b      	cbnz	r3, 8009e2e <__swsetup_r+0x9a>
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e24:	d003      	beq.n	8009e2e <__swsetup_r+0x9a>
 8009e26:	4621      	mov	r1, r4
 8009e28:	4630      	mov	r0, r6
 8009e2a:	f000 fa01 	bl	800a230 <__smakebuf_r>
 8009e2e:	89a0      	ldrh	r0, [r4, #12]
 8009e30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e34:	f010 0301 	ands.w	r3, r0, #1
 8009e38:	d00a      	beq.n	8009e50 <__swsetup_r+0xbc>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	60a3      	str	r3, [r4, #8]
 8009e3e:	6963      	ldr	r3, [r4, #20]
 8009e40:	425b      	negs	r3, r3
 8009e42:	61a3      	str	r3, [r4, #24]
 8009e44:	6923      	ldr	r3, [r4, #16]
 8009e46:	b943      	cbnz	r3, 8009e5a <__swsetup_r+0xc6>
 8009e48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e4c:	d1ba      	bne.n	8009dc4 <__swsetup_r+0x30>
 8009e4e:	bd70      	pop	{r4, r5, r6, pc}
 8009e50:	0781      	lsls	r1, r0, #30
 8009e52:	bf58      	it	pl
 8009e54:	6963      	ldrpl	r3, [r4, #20]
 8009e56:	60a3      	str	r3, [r4, #8]
 8009e58:	e7f4      	b.n	8009e44 <__swsetup_r+0xb0>
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	e7f7      	b.n	8009e4e <__swsetup_r+0xba>
 8009e5e:	bf00      	nop
 8009e60:	200000fc 	.word	0x200000fc
 8009e64:	0800aca8 	.word	0x0800aca8
 8009e68:	0800acc8 	.word	0x0800acc8
 8009e6c:	0800ac88 	.word	0x0800ac88

08009e70 <__sflush_r>:
 8009e70:	898a      	ldrh	r2, [r1, #12]
 8009e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e76:	4605      	mov	r5, r0
 8009e78:	0710      	lsls	r0, r2, #28
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	d458      	bmi.n	8009f30 <__sflush_r+0xc0>
 8009e7e:	684b      	ldr	r3, [r1, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	dc05      	bgt.n	8009e90 <__sflush_r+0x20>
 8009e84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	dc02      	bgt.n	8009e90 <__sflush_r+0x20>
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e92:	2e00      	cmp	r6, #0
 8009e94:	d0f9      	beq.n	8009e8a <__sflush_r+0x1a>
 8009e96:	2300      	movs	r3, #0
 8009e98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e9c:	682f      	ldr	r7, [r5, #0]
 8009e9e:	602b      	str	r3, [r5, #0]
 8009ea0:	d032      	beq.n	8009f08 <__sflush_r+0x98>
 8009ea2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	075a      	lsls	r2, r3, #29
 8009ea8:	d505      	bpl.n	8009eb6 <__sflush_r+0x46>
 8009eaa:	6863      	ldr	r3, [r4, #4]
 8009eac:	1ac0      	subs	r0, r0, r3
 8009eae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009eb0:	b10b      	cbz	r3, 8009eb6 <__sflush_r+0x46>
 8009eb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009eb4:	1ac0      	subs	r0, r0, r3
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	4602      	mov	r2, r0
 8009eba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ebc:	6a21      	ldr	r1, [r4, #32]
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b0      	blx	r6
 8009ec2:	1c43      	adds	r3, r0, #1
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	d106      	bne.n	8009ed6 <__sflush_r+0x66>
 8009ec8:	6829      	ldr	r1, [r5, #0]
 8009eca:	291d      	cmp	r1, #29
 8009ecc:	d82c      	bhi.n	8009f28 <__sflush_r+0xb8>
 8009ece:	4a2a      	ldr	r2, [pc, #168]	; (8009f78 <__sflush_r+0x108>)
 8009ed0:	40ca      	lsrs	r2, r1
 8009ed2:	07d6      	lsls	r6, r2, #31
 8009ed4:	d528      	bpl.n	8009f28 <__sflush_r+0xb8>
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	6062      	str	r2, [r4, #4]
 8009eda:	04d9      	lsls	r1, r3, #19
 8009edc:	6922      	ldr	r2, [r4, #16]
 8009ede:	6022      	str	r2, [r4, #0]
 8009ee0:	d504      	bpl.n	8009eec <__sflush_r+0x7c>
 8009ee2:	1c42      	adds	r2, r0, #1
 8009ee4:	d101      	bne.n	8009eea <__sflush_r+0x7a>
 8009ee6:	682b      	ldr	r3, [r5, #0]
 8009ee8:	b903      	cbnz	r3, 8009eec <__sflush_r+0x7c>
 8009eea:	6560      	str	r0, [r4, #84]	; 0x54
 8009eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009eee:	602f      	str	r7, [r5, #0]
 8009ef0:	2900      	cmp	r1, #0
 8009ef2:	d0ca      	beq.n	8009e8a <__sflush_r+0x1a>
 8009ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ef8:	4299      	cmp	r1, r3
 8009efa:	d002      	beq.n	8009f02 <__sflush_r+0x92>
 8009efc:	4628      	mov	r0, r5
 8009efe:	f000 f9d7 	bl	800a2b0 <_free_r>
 8009f02:	2000      	movs	r0, #0
 8009f04:	6360      	str	r0, [r4, #52]	; 0x34
 8009f06:	e7c1      	b.n	8009e8c <__sflush_r+0x1c>
 8009f08:	6a21      	ldr	r1, [r4, #32]
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	47b0      	blx	r6
 8009f10:	1c41      	adds	r1, r0, #1
 8009f12:	d1c7      	bne.n	8009ea4 <__sflush_r+0x34>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d0c4      	beq.n	8009ea4 <__sflush_r+0x34>
 8009f1a:	2b1d      	cmp	r3, #29
 8009f1c:	d001      	beq.n	8009f22 <__sflush_r+0xb2>
 8009f1e:	2b16      	cmp	r3, #22
 8009f20:	d101      	bne.n	8009f26 <__sflush_r+0xb6>
 8009f22:	602f      	str	r7, [r5, #0]
 8009f24:	e7b1      	b.n	8009e8a <__sflush_r+0x1a>
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f2c:	81a3      	strh	r3, [r4, #12]
 8009f2e:	e7ad      	b.n	8009e8c <__sflush_r+0x1c>
 8009f30:	690f      	ldr	r7, [r1, #16]
 8009f32:	2f00      	cmp	r7, #0
 8009f34:	d0a9      	beq.n	8009e8a <__sflush_r+0x1a>
 8009f36:	0793      	lsls	r3, r2, #30
 8009f38:	680e      	ldr	r6, [r1, #0]
 8009f3a:	bf08      	it	eq
 8009f3c:	694b      	ldreq	r3, [r1, #20]
 8009f3e:	600f      	str	r7, [r1, #0]
 8009f40:	bf18      	it	ne
 8009f42:	2300      	movne	r3, #0
 8009f44:	eba6 0807 	sub.w	r8, r6, r7
 8009f48:	608b      	str	r3, [r1, #8]
 8009f4a:	f1b8 0f00 	cmp.w	r8, #0
 8009f4e:	dd9c      	ble.n	8009e8a <__sflush_r+0x1a>
 8009f50:	6a21      	ldr	r1, [r4, #32]
 8009f52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f54:	4643      	mov	r3, r8
 8009f56:	463a      	mov	r2, r7
 8009f58:	4628      	mov	r0, r5
 8009f5a:	47b0      	blx	r6
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	dc06      	bgt.n	8009f6e <__sflush_r+0xfe>
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f66:	81a3      	strh	r3, [r4, #12]
 8009f68:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6c:	e78e      	b.n	8009e8c <__sflush_r+0x1c>
 8009f6e:	4407      	add	r7, r0
 8009f70:	eba8 0800 	sub.w	r8, r8, r0
 8009f74:	e7e9      	b.n	8009f4a <__sflush_r+0xda>
 8009f76:	bf00      	nop
 8009f78:	20400001 	.word	0x20400001

08009f7c <_fflush_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	690b      	ldr	r3, [r1, #16]
 8009f80:	4605      	mov	r5, r0
 8009f82:	460c      	mov	r4, r1
 8009f84:	b913      	cbnz	r3, 8009f8c <_fflush_r+0x10>
 8009f86:	2500      	movs	r5, #0
 8009f88:	4628      	mov	r0, r5
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	b118      	cbz	r0, 8009f96 <_fflush_r+0x1a>
 8009f8e:	6983      	ldr	r3, [r0, #24]
 8009f90:	b90b      	cbnz	r3, 8009f96 <_fflush_r+0x1a>
 8009f92:	f000 f887 	bl	800a0a4 <__sinit>
 8009f96:	4b14      	ldr	r3, [pc, #80]	; (8009fe8 <_fflush_r+0x6c>)
 8009f98:	429c      	cmp	r4, r3
 8009f9a:	d11b      	bne.n	8009fd4 <_fflush_r+0x58>
 8009f9c:	686c      	ldr	r4, [r5, #4]
 8009f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0ef      	beq.n	8009f86 <_fflush_r+0xa>
 8009fa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fa8:	07d0      	lsls	r0, r2, #31
 8009faa:	d404      	bmi.n	8009fb6 <_fflush_r+0x3a>
 8009fac:	0599      	lsls	r1, r3, #22
 8009fae:	d402      	bmi.n	8009fb6 <_fflush_r+0x3a>
 8009fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fb2:	f000 f915 	bl	800a1e0 <__retarget_lock_acquire_recursive>
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	4621      	mov	r1, r4
 8009fba:	f7ff ff59 	bl	8009e70 <__sflush_r>
 8009fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fc0:	07da      	lsls	r2, r3, #31
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	d4e0      	bmi.n	8009f88 <_fflush_r+0xc>
 8009fc6:	89a3      	ldrh	r3, [r4, #12]
 8009fc8:	059b      	lsls	r3, r3, #22
 8009fca:	d4dd      	bmi.n	8009f88 <_fflush_r+0xc>
 8009fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fce:	f000 f908 	bl	800a1e2 <__retarget_lock_release_recursive>
 8009fd2:	e7d9      	b.n	8009f88 <_fflush_r+0xc>
 8009fd4:	4b05      	ldr	r3, [pc, #20]	; (8009fec <_fflush_r+0x70>)
 8009fd6:	429c      	cmp	r4, r3
 8009fd8:	d101      	bne.n	8009fde <_fflush_r+0x62>
 8009fda:	68ac      	ldr	r4, [r5, #8]
 8009fdc:	e7df      	b.n	8009f9e <_fflush_r+0x22>
 8009fde:	4b04      	ldr	r3, [pc, #16]	; (8009ff0 <_fflush_r+0x74>)
 8009fe0:	429c      	cmp	r4, r3
 8009fe2:	bf08      	it	eq
 8009fe4:	68ec      	ldreq	r4, [r5, #12]
 8009fe6:	e7da      	b.n	8009f9e <_fflush_r+0x22>
 8009fe8:	0800aca8 	.word	0x0800aca8
 8009fec:	0800acc8 	.word	0x0800acc8
 8009ff0:	0800ac88 	.word	0x0800ac88

08009ff4 <std>:
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	b510      	push	{r4, lr}
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	e9c0 3300 	strd	r3, r3, [r0]
 8009ffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a002:	6083      	str	r3, [r0, #8]
 800a004:	8181      	strh	r1, [r0, #12]
 800a006:	6643      	str	r3, [r0, #100]	; 0x64
 800a008:	81c2      	strh	r2, [r0, #14]
 800a00a:	6183      	str	r3, [r0, #24]
 800a00c:	4619      	mov	r1, r3
 800a00e:	2208      	movs	r2, #8
 800a010:	305c      	adds	r0, #92	; 0x5c
 800a012:	f7ff fdd7 	bl	8009bc4 <memset>
 800a016:	4b05      	ldr	r3, [pc, #20]	; (800a02c <std+0x38>)
 800a018:	6263      	str	r3, [r4, #36]	; 0x24
 800a01a:	4b05      	ldr	r3, [pc, #20]	; (800a030 <std+0x3c>)
 800a01c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a01e:	4b05      	ldr	r3, [pc, #20]	; (800a034 <std+0x40>)
 800a020:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a022:	4b05      	ldr	r3, [pc, #20]	; (800a038 <std+0x44>)
 800a024:	6224      	str	r4, [r4, #32]
 800a026:	6323      	str	r3, [r4, #48]	; 0x30
 800a028:	bd10      	pop	{r4, pc}
 800a02a:	bf00      	nop
 800a02c:	0800aa6d 	.word	0x0800aa6d
 800a030:	0800aa8f 	.word	0x0800aa8f
 800a034:	0800aac7 	.word	0x0800aac7
 800a038:	0800aaeb 	.word	0x0800aaeb

0800a03c <_cleanup_r>:
 800a03c:	4901      	ldr	r1, [pc, #4]	; (800a044 <_cleanup_r+0x8>)
 800a03e:	f000 b8af 	b.w	800a1a0 <_fwalk_reent>
 800a042:	bf00      	nop
 800a044:	08009f7d 	.word	0x08009f7d

0800a048 <__sfmoreglue>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	2268      	movs	r2, #104	; 0x68
 800a04c:	1e4d      	subs	r5, r1, #1
 800a04e:	4355      	muls	r5, r2
 800a050:	460e      	mov	r6, r1
 800a052:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a056:	f000 f997 	bl	800a388 <_malloc_r>
 800a05a:	4604      	mov	r4, r0
 800a05c:	b140      	cbz	r0, 800a070 <__sfmoreglue+0x28>
 800a05e:	2100      	movs	r1, #0
 800a060:	e9c0 1600 	strd	r1, r6, [r0]
 800a064:	300c      	adds	r0, #12
 800a066:	60a0      	str	r0, [r4, #8]
 800a068:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a06c:	f7ff fdaa 	bl	8009bc4 <memset>
 800a070:	4620      	mov	r0, r4
 800a072:	bd70      	pop	{r4, r5, r6, pc}

0800a074 <__sfp_lock_acquire>:
 800a074:	4801      	ldr	r0, [pc, #4]	; (800a07c <__sfp_lock_acquire+0x8>)
 800a076:	f000 b8b3 	b.w	800a1e0 <__retarget_lock_acquire_recursive>
 800a07a:	bf00      	nop
 800a07c:	200022f9 	.word	0x200022f9

0800a080 <__sfp_lock_release>:
 800a080:	4801      	ldr	r0, [pc, #4]	; (800a088 <__sfp_lock_release+0x8>)
 800a082:	f000 b8ae 	b.w	800a1e2 <__retarget_lock_release_recursive>
 800a086:	bf00      	nop
 800a088:	200022f9 	.word	0x200022f9

0800a08c <__sinit_lock_acquire>:
 800a08c:	4801      	ldr	r0, [pc, #4]	; (800a094 <__sinit_lock_acquire+0x8>)
 800a08e:	f000 b8a7 	b.w	800a1e0 <__retarget_lock_acquire_recursive>
 800a092:	bf00      	nop
 800a094:	200022fa 	.word	0x200022fa

0800a098 <__sinit_lock_release>:
 800a098:	4801      	ldr	r0, [pc, #4]	; (800a0a0 <__sinit_lock_release+0x8>)
 800a09a:	f000 b8a2 	b.w	800a1e2 <__retarget_lock_release_recursive>
 800a09e:	bf00      	nop
 800a0a0:	200022fa 	.word	0x200022fa

0800a0a4 <__sinit>:
 800a0a4:	b510      	push	{r4, lr}
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	f7ff fff0 	bl	800a08c <__sinit_lock_acquire>
 800a0ac:	69a3      	ldr	r3, [r4, #24]
 800a0ae:	b11b      	cbz	r3, 800a0b8 <__sinit+0x14>
 800a0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0b4:	f7ff bff0 	b.w	800a098 <__sinit_lock_release>
 800a0b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0bc:	6523      	str	r3, [r4, #80]	; 0x50
 800a0be:	4b13      	ldr	r3, [pc, #76]	; (800a10c <__sinit+0x68>)
 800a0c0:	4a13      	ldr	r2, [pc, #76]	; (800a110 <__sinit+0x6c>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a0c6:	42a3      	cmp	r3, r4
 800a0c8:	bf04      	itt	eq
 800a0ca:	2301      	moveq	r3, #1
 800a0cc:	61a3      	streq	r3, [r4, #24]
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	f000 f820 	bl	800a114 <__sfp>
 800a0d4:	6060      	str	r0, [r4, #4]
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f000 f81c 	bl	800a114 <__sfp>
 800a0dc:	60a0      	str	r0, [r4, #8]
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f000 f818 	bl	800a114 <__sfp>
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	60e0      	str	r0, [r4, #12]
 800a0e8:	2104      	movs	r1, #4
 800a0ea:	6860      	ldr	r0, [r4, #4]
 800a0ec:	f7ff ff82 	bl	8009ff4 <std>
 800a0f0:	68a0      	ldr	r0, [r4, #8]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	2109      	movs	r1, #9
 800a0f6:	f7ff ff7d 	bl	8009ff4 <std>
 800a0fa:	68e0      	ldr	r0, [r4, #12]
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	2112      	movs	r1, #18
 800a100:	f7ff ff78 	bl	8009ff4 <std>
 800a104:	2301      	movs	r3, #1
 800a106:	61a3      	str	r3, [r4, #24]
 800a108:	e7d2      	b.n	800a0b0 <__sinit+0xc>
 800a10a:	bf00      	nop
 800a10c:	0800ac84 	.word	0x0800ac84
 800a110:	0800a03d 	.word	0x0800a03d

0800a114 <__sfp>:
 800a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a116:	4607      	mov	r7, r0
 800a118:	f7ff ffac 	bl	800a074 <__sfp_lock_acquire>
 800a11c:	4b1e      	ldr	r3, [pc, #120]	; (800a198 <__sfp+0x84>)
 800a11e:	681e      	ldr	r6, [r3, #0]
 800a120:	69b3      	ldr	r3, [r6, #24]
 800a122:	b913      	cbnz	r3, 800a12a <__sfp+0x16>
 800a124:	4630      	mov	r0, r6
 800a126:	f7ff ffbd 	bl	800a0a4 <__sinit>
 800a12a:	3648      	adds	r6, #72	; 0x48
 800a12c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a130:	3b01      	subs	r3, #1
 800a132:	d503      	bpl.n	800a13c <__sfp+0x28>
 800a134:	6833      	ldr	r3, [r6, #0]
 800a136:	b30b      	cbz	r3, 800a17c <__sfp+0x68>
 800a138:	6836      	ldr	r6, [r6, #0]
 800a13a:	e7f7      	b.n	800a12c <__sfp+0x18>
 800a13c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a140:	b9d5      	cbnz	r5, 800a178 <__sfp+0x64>
 800a142:	4b16      	ldr	r3, [pc, #88]	; (800a19c <__sfp+0x88>)
 800a144:	60e3      	str	r3, [r4, #12]
 800a146:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a14a:	6665      	str	r5, [r4, #100]	; 0x64
 800a14c:	f000 f847 	bl	800a1de <__retarget_lock_init_recursive>
 800a150:	f7ff ff96 	bl	800a080 <__sfp_lock_release>
 800a154:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a158:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a15c:	6025      	str	r5, [r4, #0]
 800a15e:	61a5      	str	r5, [r4, #24]
 800a160:	2208      	movs	r2, #8
 800a162:	4629      	mov	r1, r5
 800a164:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a168:	f7ff fd2c 	bl	8009bc4 <memset>
 800a16c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a170:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a174:	4620      	mov	r0, r4
 800a176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a178:	3468      	adds	r4, #104	; 0x68
 800a17a:	e7d9      	b.n	800a130 <__sfp+0x1c>
 800a17c:	2104      	movs	r1, #4
 800a17e:	4638      	mov	r0, r7
 800a180:	f7ff ff62 	bl	800a048 <__sfmoreglue>
 800a184:	4604      	mov	r4, r0
 800a186:	6030      	str	r0, [r6, #0]
 800a188:	2800      	cmp	r0, #0
 800a18a:	d1d5      	bne.n	800a138 <__sfp+0x24>
 800a18c:	f7ff ff78 	bl	800a080 <__sfp_lock_release>
 800a190:	230c      	movs	r3, #12
 800a192:	603b      	str	r3, [r7, #0]
 800a194:	e7ee      	b.n	800a174 <__sfp+0x60>
 800a196:	bf00      	nop
 800a198:	0800ac84 	.word	0x0800ac84
 800a19c:	ffff0001 	.word	0xffff0001

0800a1a0 <_fwalk_reent>:
 800a1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1a4:	4606      	mov	r6, r0
 800a1a6:	4688      	mov	r8, r1
 800a1a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a1ac:	2700      	movs	r7, #0
 800a1ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1b2:	f1b9 0901 	subs.w	r9, r9, #1
 800a1b6:	d505      	bpl.n	800a1c4 <_fwalk_reent+0x24>
 800a1b8:	6824      	ldr	r4, [r4, #0]
 800a1ba:	2c00      	cmp	r4, #0
 800a1bc:	d1f7      	bne.n	800a1ae <_fwalk_reent+0xe>
 800a1be:	4638      	mov	r0, r7
 800a1c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1c4:	89ab      	ldrh	r3, [r5, #12]
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d907      	bls.n	800a1da <_fwalk_reent+0x3a>
 800a1ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	d003      	beq.n	800a1da <_fwalk_reent+0x3a>
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	47c0      	blx	r8
 800a1d8:	4307      	orrs	r7, r0
 800a1da:	3568      	adds	r5, #104	; 0x68
 800a1dc:	e7e9      	b.n	800a1b2 <_fwalk_reent+0x12>

0800a1de <__retarget_lock_init_recursive>:
 800a1de:	4770      	bx	lr

0800a1e0 <__retarget_lock_acquire_recursive>:
 800a1e0:	4770      	bx	lr

0800a1e2 <__retarget_lock_release_recursive>:
 800a1e2:	4770      	bx	lr

0800a1e4 <__swhatbuf_r>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	460e      	mov	r6, r1
 800a1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ec:	2900      	cmp	r1, #0
 800a1ee:	b096      	sub	sp, #88	; 0x58
 800a1f0:	4614      	mov	r4, r2
 800a1f2:	461d      	mov	r5, r3
 800a1f4:	da08      	bge.n	800a208 <__swhatbuf_r+0x24>
 800a1f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	602a      	str	r2, [r5, #0]
 800a1fe:	061a      	lsls	r2, r3, #24
 800a200:	d410      	bmi.n	800a224 <__swhatbuf_r+0x40>
 800a202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a206:	e00e      	b.n	800a226 <__swhatbuf_r+0x42>
 800a208:	466a      	mov	r2, sp
 800a20a:	f000 fc95 	bl	800ab38 <_fstat_r>
 800a20e:	2800      	cmp	r0, #0
 800a210:	dbf1      	blt.n	800a1f6 <__swhatbuf_r+0x12>
 800a212:	9a01      	ldr	r2, [sp, #4]
 800a214:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a218:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a21c:	425a      	negs	r2, r3
 800a21e:	415a      	adcs	r2, r3
 800a220:	602a      	str	r2, [r5, #0]
 800a222:	e7ee      	b.n	800a202 <__swhatbuf_r+0x1e>
 800a224:	2340      	movs	r3, #64	; 0x40
 800a226:	2000      	movs	r0, #0
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	b016      	add	sp, #88	; 0x58
 800a22c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a230 <__smakebuf_r>:
 800a230:	898b      	ldrh	r3, [r1, #12]
 800a232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a234:	079d      	lsls	r5, r3, #30
 800a236:	4606      	mov	r6, r0
 800a238:	460c      	mov	r4, r1
 800a23a:	d507      	bpl.n	800a24c <__smakebuf_r+0x1c>
 800a23c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a240:	6023      	str	r3, [r4, #0]
 800a242:	6123      	str	r3, [r4, #16]
 800a244:	2301      	movs	r3, #1
 800a246:	6163      	str	r3, [r4, #20]
 800a248:	b002      	add	sp, #8
 800a24a:	bd70      	pop	{r4, r5, r6, pc}
 800a24c:	ab01      	add	r3, sp, #4
 800a24e:	466a      	mov	r2, sp
 800a250:	f7ff ffc8 	bl	800a1e4 <__swhatbuf_r>
 800a254:	9900      	ldr	r1, [sp, #0]
 800a256:	4605      	mov	r5, r0
 800a258:	4630      	mov	r0, r6
 800a25a:	f000 f895 	bl	800a388 <_malloc_r>
 800a25e:	b948      	cbnz	r0, 800a274 <__smakebuf_r+0x44>
 800a260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a264:	059a      	lsls	r2, r3, #22
 800a266:	d4ef      	bmi.n	800a248 <__smakebuf_r+0x18>
 800a268:	f023 0303 	bic.w	r3, r3, #3
 800a26c:	f043 0302 	orr.w	r3, r3, #2
 800a270:	81a3      	strh	r3, [r4, #12]
 800a272:	e7e3      	b.n	800a23c <__smakebuf_r+0xc>
 800a274:	4b0d      	ldr	r3, [pc, #52]	; (800a2ac <__smakebuf_r+0x7c>)
 800a276:	62b3      	str	r3, [r6, #40]	; 0x28
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	6020      	str	r0, [r4, #0]
 800a27c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	9b00      	ldr	r3, [sp, #0]
 800a284:	6163      	str	r3, [r4, #20]
 800a286:	9b01      	ldr	r3, [sp, #4]
 800a288:	6120      	str	r0, [r4, #16]
 800a28a:	b15b      	cbz	r3, 800a2a4 <__smakebuf_r+0x74>
 800a28c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a290:	4630      	mov	r0, r6
 800a292:	f000 fc63 	bl	800ab5c <_isatty_r>
 800a296:	b128      	cbz	r0, 800a2a4 <__smakebuf_r+0x74>
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	f023 0303 	bic.w	r3, r3, #3
 800a29e:	f043 0301 	orr.w	r3, r3, #1
 800a2a2:	81a3      	strh	r3, [r4, #12]
 800a2a4:	89a0      	ldrh	r0, [r4, #12]
 800a2a6:	4305      	orrs	r5, r0
 800a2a8:	81a5      	strh	r5, [r4, #12]
 800a2aa:	e7cd      	b.n	800a248 <__smakebuf_r+0x18>
 800a2ac:	0800a03d 	.word	0x0800a03d

0800a2b0 <_free_r>:
 800a2b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2b2:	2900      	cmp	r1, #0
 800a2b4:	d044      	beq.n	800a340 <_free_r+0x90>
 800a2b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2ba:	9001      	str	r0, [sp, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f1a1 0404 	sub.w	r4, r1, #4
 800a2c2:	bfb8      	it	lt
 800a2c4:	18e4      	addlt	r4, r4, r3
 800a2c6:	f000 fc6b 	bl	800aba0 <__malloc_lock>
 800a2ca:	4a1e      	ldr	r2, [pc, #120]	; (800a344 <_free_r+0x94>)
 800a2cc:	9801      	ldr	r0, [sp, #4]
 800a2ce:	6813      	ldr	r3, [r2, #0]
 800a2d0:	b933      	cbnz	r3, 800a2e0 <_free_r+0x30>
 800a2d2:	6063      	str	r3, [r4, #4]
 800a2d4:	6014      	str	r4, [r2, #0]
 800a2d6:	b003      	add	sp, #12
 800a2d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2dc:	f000 bc66 	b.w	800abac <__malloc_unlock>
 800a2e0:	42a3      	cmp	r3, r4
 800a2e2:	d908      	bls.n	800a2f6 <_free_r+0x46>
 800a2e4:	6825      	ldr	r5, [r4, #0]
 800a2e6:	1961      	adds	r1, r4, r5
 800a2e8:	428b      	cmp	r3, r1
 800a2ea:	bf01      	itttt	eq
 800a2ec:	6819      	ldreq	r1, [r3, #0]
 800a2ee:	685b      	ldreq	r3, [r3, #4]
 800a2f0:	1949      	addeq	r1, r1, r5
 800a2f2:	6021      	streq	r1, [r4, #0]
 800a2f4:	e7ed      	b.n	800a2d2 <_free_r+0x22>
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	b10b      	cbz	r3, 800a300 <_free_r+0x50>
 800a2fc:	42a3      	cmp	r3, r4
 800a2fe:	d9fa      	bls.n	800a2f6 <_free_r+0x46>
 800a300:	6811      	ldr	r1, [r2, #0]
 800a302:	1855      	adds	r5, r2, r1
 800a304:	42a5      	cmp	r5, r4
 800a306:	d10b      	bne.n	800a320 <_free_r+0x70>
 800a308:	6824      	ldr	r4, [r4, #0]
 800a30a:	4421      	add	r1, r4
 800a30c:	1854      	adds	r4, r2, r1
 800a30e:	42a3      	cmp	r3, r4
 800a310:	6011      	str	r1, [r2, #0]
 800a312:	d1e0      	bne.n	800a2d6 <_free_r+0x26>
 800a314:	681c      	ldr	r4, [r3, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	6053      	str	r3, [r2, #4]
 800a31a:	4421      	add	r1, r4
 800a31c:	6011      	str	r1, [r2, #0]
 800a31e:	e7da      	b.n	800a2d6 <_free_r+0x26>
 800a320:	d902      	bls.n	800a328 <_free_r+0x78>
 800a322:	230c      	movs	r3, #12
 800a324:	6003      	str	r3, [r0, #0]
 800a326:	e7d6      	b.n	800a2d6 <_free_r+0x26>
 800a328:	6825      	ldr	r5, [r4, #0]
 800a32a:	1961      	adds	r1, r4, r5
 800a32c:	428b      	cmp	r3, r1
 800a32e:	bf04      	itt	eq
 800a330:	6819      	ldreq	r1, [r3, #0]
 800a332:	685b      	ldreq	r3, [r3, #4]
 800a334:	6063      	str	r3, [r4, #4]
 800a336:	bf04      	itt	eq
 800a338:	1949      	addeq	r1, r1, r5
 800a33a:	6021      	streq	r1, [r4, #0]
 800a33c:	6054      	str	r4, [r2, #4]
 800a33e:	e7ca      	b.n	800a2d6 <_free_r+0x26>
 800a340:	b003      	add	sp, #12
 800a342:	bd30      	pop	{r4, r5, pc}
 800a344:	200022fc 	.word	0x200022fc

0800a348 <sbrk_aligned>:
 800a348:	b570      	push	{r4, r5, r6, lr}
 800a34a:	4e0e      	ldr	r6, [pc, #56]	; (800a384 <sbrk_aligned+0x3c>)
 800a34c:	460c      	mov	r4, r1
 800a34e:	6831      	ldr	r1, [r6, #0]
 800a350:	4605      	mov	r5, r0
 800a352:	b911      	cbnz	r1, 800a35a <sbrk_aligned+0x12>
 800a354:	f000 fb7a 	bl	800aa4c <_sbrk_r>
 800a358:	6030      	str	r0, [r6, #0]
 800a35a:	4621      	mov	r1, r4
 800a35c:	4628      	mov	r0, r5
 800a35e:	f000 fb75 	bl	800aa4c <_sbrk_r>
 800a362:	1c43      	adds	r3, r0, #1
 800a364:	d00a      	beq.n	800a37c <sbrk_aligned+0x34>
 800a366:	1cc4      	adds	r4, r0, #3
 800a368:	f024 0403 	bic.w	r4, r4, #3
 800a36c:	42a0      	cmp	r0, r4
 800a36e:	d007      	beq.n	800a380 <sbrk_aligned+0x38>
 800a370:	1a21      	subs	r1, r4, r0
 800a372:	4628      	mov	r0, r5
 800a374:	f000 fb6a 	bl	800aa4c <_sbrk_r>
 800a378:	3001      	adds	r0, #1
 800a37a:	d101      	bne.n	800a380 <sbrk_aligned+0x38>
 800a37c:	f04f 34ff 	mov.w	r4, #4294967295
 800a380:	4620      	mov	r0, r4
 800a382:	bd70      	pop	{r4, r5, r6, pc}
 800a384:	20002300 	.word	0x20002300

0800a388 <_malloc_r>:
 800a388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a38c:	1ccd      	adds	r5, r1, #3
 800a38e:	f025 0503 	bic.w	r5, r5, #3
 800a392:	3508      	adds	r5, #8
 800a394:	2d0c      	cmp	r5, #12
 800a396:	bf38      	it	cc
 800a398:	250c      	movcc	r5, #12
 800a39a:	2d00      	cmp	r5, #0
 800a39c:	4607      	mov	r7, r0
 800a39e:	db01      	blt.n	800a3a4 <_malloc_r+0x1c>
 800a3a0:	42a9      	cmp	r1, r5
 800a3a2:	d905      	bls.n	800a3b0 <_malloc_r+0x28>
 800a3a4:	230c      	movs	r3, #12
 800a3a6:	603b      	str	r3, [r7, #0]
 800a3a8:	2600      	movs	r6, #0
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3b0:	4e2e      	ldr	r6, [pc, #184]	; (800a46c <_malloc_r+0xe4>)
 800a3b2:	f000 fbf5 	bl	800aba0 <__malloc_lock>
 800a3b6:	6833      	ldr	r3, [r6, #0]
 800a3b8:	461c      	mov	r4, r3
 800a3ba:	bb34      	cbnz	r4, 800a40a <_malloc_r+0x82>
 800a3bc:	4629      	mov	r1, r5
 800a3be:	4638      	mov	r0, r7
 800a3c0:	f7ff ffc2 	bl	800a348 <sbrk_aligned>
 800a3c4:	1c43      	adds	r3, r0, #1
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	d14d      	bne.n	800a466 <_malloc_r+0xde>
 800a3ca:	6834      	ldr	r4, [r6, #0]
 800a3cc:	4626      	mov	r6, r4
 800a3ce:	2e00      	cmp	r6, #0
 800a3d0:	d140      	bne.n	800a454 <_malloc_r+0xcc>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	4631      	mov	r1, r6
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	eb04 0803 	add.w	r8, r4, r3
 800a3dc:	f000 fb36 	bl	800aa4c <_sbrk_r>
 800a3e0:	4580      	cmp	r8, r0
 800a3e2:	d13a      	bne.n	800a45a <_malloc_r+0xd2>
 800a3e4:	6821      	ldr	r1, [r4, #0]
 800a3e6:	3503      	adds	r5, #3
 800a3e8:	1a6d      	subs	r5, r5, r1
 800a3ea:	f025 0503 	bic.w	r5, r5, #3
 800a3ee:	3508      	adds	r5, #8
 800a3f0:	2d0c      	cmp	r5, #12
 800a3f2:	bf38      	it	cc
 800a3f4:	250c      	movcc	r5, #12
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	4638      	mov	r0, r7
 800a3fa:	f7ff ffa5 	bl	800a348 <sbrk_aligned>
 800a3fe:	3001      	adds	r0, #1
 800a400:	d02b      	beq.n	800a45a <_malloc_r+0xd2>
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	442b      	add	r3, r5
 800a406:	6023      	str	r3, [r4, #0]
 800a408:	e00e      	b.n	800a428 <_malloc_r+0xa0>
 800a40a:	6822      	ldr	r2, [r4, #0]
 800a40c:	1b52      	subs	r2, r2, r5
 800a40e:	d41e      	bmi.n	800a44e <_malloc_r+0xc6>
 800a410:	2a0b      	cmp	r2, #11
 800a412:	d916      	bls.n	800a442 <_malloc_r+0xba>
 800a414:	1961      	adds	r1, r4, r5
 800a416:	42a3      	cmp	r3, r4
 800a418:	6025      	str	r5, [r4, #0]
 800a41a:	bf18      	it	ne
 800a41c:	6059      	strne	r1, [r3, #4]
 800a41e:	6863      	ldr	r3, [r4, #4]
 800a420:	bf08      	it	eq
 800a422:	6031      	streq	r1, [r6, #0]
 800a424:	5162      	str	r2, [r4, r5]
 800a426:	604b      	str	r3, [r1, #4]
 800a428:	4638      	mov	r0, r7
 800a42a:	f104 060b 	add.w	r6, r4, #11
 800a42e:	f000 fbbd 	bl	800abac <__malloc_unlock>
 800a432:	f026 0607 	bic.w	r6, r6, #7
 800a436:	1d23      	adds	r3, r4, #4
 800a438:	1af2      	subs	r2, r6, r3
 800a43a:	d0b6      	beq.n	800a3aa <_malloc_r+0x22>
 800a43c:	1b9b      	subs	r3, r3, r6
 800a43e:	50a3      	str	r3, [r4, r2]
 800a440:	e7b3      	b.n	800a3aa <_malloc_r+0x22>
 800a442:	6862      	ldr	r2, [r4, #4]
 800a444:	42a3      	cmp	r3, r4
 800a446:	bf0c      	ite	eq
 800a448:	6032      	streq	r2, [r6, #0]
 800a44a:	605a      	strne	r2, [r3, #4]
 800a44c:	e7ec      	b.n	800a428 <_malloc_r+0xa0>
 800a44e:	4623      	mov	r3, r4
 800a450:	6864      	ldr	r4, [r4, #4]
 800a452:	e7b2      	b.n	800a3ba <_malloc_r+0x32>
 800a454:	4634      	mov	r4, r6
 800a456:	6876      	ldr	r6, [r6, #4]
 800a458:	e7b9      	b.n	800a3ce <_malloc_r+0x46>
 800a45a:	230c      	movs	r3, #12
 800a45c:	603b      	str	r3, [r7, #0]
 800a45e:	4638      	mov	r0, r7
 800a460:	f000 fba4 	bl	800abac <__malloc_unlock>
 800a464:	e7a1      	b.n	800a3aa <_malloc_r+0x22>
 800a466:	6025      	str	r5, [r4, #0]
 800a468:	e7de      	b.n	800a428 <_malloc_r+0xa0>
 800a46a:	bf00      	nop
 800a46c:	200022fc 	.word	0x200022fc

0800a470 <__sfputc_r>:
 800a470:	6893      	ldr	r3, [r2, #8]
 800a472:	3b01      	subs	r3, #1
 800a474:	2b00      	cmp	r3, #0
 800a476:	b410      	push	{r4}
 800a478:	6093      	str	r3, [r2, #8]
 800a47a:	da08      	bge.n	800a48e <__sfputc_r+0x1e>
 800a47c:	6994      	ldr	r4, [r2, #24]
 800a47e:	42a3      	cmp	r3, r4
 800a480:	db01      	blt.n	800a486 <__sfputc_r+0x16>
 800a482:	290a      	cmp	r1, #10
 800a484:	d103      	bne.n	800a48e <__sfputc_r+0x1e>
 800a486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a48a:	f7ff bc31 	b.w	8009cf0 <__swbuf_r>
 800a48e:	6813      	ldr	r3, [r2, #0]
 800a490:	1c58      	adds	r0, r3, #1
 800a492:	6010      	str	r0, [r2, #0]
 800a494:	7019      	strb	r1, [r3, #0]
 800a496:	4608      	mov	r0, r1
 800a498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <__sfputs_r>:
 800a49e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	460f      	mov	r7, r1
 800a4a4:	4614      	mov	r4, r2
 800a4a6:	18d5      	adds	r5, r2, r3
 800a4a8:	42ac      	cmp	r4, r5
 800a4aa:	d101      	bne.n	800a4b0 <__sfputs_r+0x12>
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	e007      	b.n	800a4c0 <__sfputs_r+0x22>
 800a4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b4:	463a      	mov	r2, r7
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	f7ff ffda 	bl	800a470 <__sfputc_r>
 800a4bc:	1c43      	adds	r3, r0, #1
 800a4be:	d1f3      	bne.n	800a4a8 <__sfputs_r+0xa>
 800a4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4c4 <_vfiprintf_r>:
 800a4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c8:	460d      	mov	r5, r1
 800a4ca:	b09d      	sub	sp, #116	; 0x74
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	4698      	mov	r8, r3
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	b118      	cbz	r0, 800a4dc <_vfiprintf_r+0x18>
 800a4d4:	6983      	ldr	r3, [r0, #24]
 800a4d6:	b90b      	cbnz	r3, 800a4dc <_vfiprintf_r+0x18>
 800a4d8:	f7ff fde4 	bl	800a0a4 <__sinit>
 800a4dc:	4b89      	ldr	r3, [pc, #548]	; (800a704 <_vfiprintf_r+0x240>)
 800a4de:	429d      	cmp	r5, r3
 800a4e0:	d11b      	bne.n	800a51a <_vfiprintf_r+0x56>
 800a4e2:	6875      	ldr	r5, [r6, #4]
 800a4e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4e6:	07d9      	lsls	r1, r3, #31
 800a4e8:	d405      	bmi.n	800a4f6 <_vfiprintf_r+0x32>
 800a4ea:	89ab      	ldrh	r3, [r5, #12]
 800a4ec:	059a      	lsls	r2, r3, #22
 800a4ee:	d402      	bmi.n	800a4f6 <_vfiprintf_r+0x32>
 800a4f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4f2:	f7ff fe75 	bl	800a1e0 <__retarget_lock_acquire_recursive>
 800a4f6:	89ab      	ldrh	r3, [r5, #12]
 800a4f8:	071b      	lsls	r3, r3, #28
 800a4fa:	d501      	bpl.n	800a500 <_vfiprintf_r+0x3c>
 800a4fc:	692b      	ldr	r3, [r5, #16]
 800a4fe:	b9eb      	cbnz	r3, 800a53c <_vfiprintf_r+0x78>
 800a500:	4629      	mov	r1, r5
 800a502:	4630      	mov	r0, r6
 800a504:	f7ff fc46 	bl	8009d94 <__swsetup_r>
 800a508:	b1c0      	cbz	r0, 800a53c <_vfiprintf_r+0x78>
 800a50a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a50c:	07dc      	lsls	r4, r3, #31
 800a50e:	d50e      	bpl.n	800a52e <_vfiprintf_r+0x6a>
 800a510:	f04f 30ff 	mov.w	r0, #4294967295
 800a514:	b01d      	add	sp, #116	; 0x74
 800a516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51a:	4b7b      	ldr	r3, [pc, #492]	; (800a708 <_vfiprintf_r+0x244>)
 800a51c:	429d      	cmp	r5, r3
 800a51e:	d101      	bne.n	800a524 <_vfiprintf_r+0x60>
 800a520:	68b5      	ldr	r5, [r6, #8]
 800a522:	e7df      	b.n	800a4e4 <_vfiprintf_r+0x20>
 800a524:	4b79      	ldr	r3, [pc, #484]	; (800a70c <_vfiprintf_r+0x248>)
 800a526:	429d      	cmp	r5, r3
 800a528:	bf08      	it	eq
 800a52a:	68f5      	ldreq	r5, [r6, #12]
 800a52c:	e7da      	b.n	800a4e4 <_vfiprintf_r+0x20>
 800a52e:	89ab      	ldrh	r3, [r5, #12]
 800a530:	0598      	lsls	r0, r3, #22
 800a532:	d4ed      	bmi.n	800a510 <_vfiprintf_r+0x4c>
 800a534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a536:	f7ff fe54 	bl	800a1e2 <__retarget_lock_release_recursive>
 800a53a:	e7e9      	b.n	800a510 <_vfiprintf_r+0x4c>
 800a53c:	2300      	movs	r3, #0
 800a53e:	9309      	str	r3, [sp, #36]	; 0x24
 800a540:	2320      	movs	r3, #32
 800a542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a546:	f8cd 800c 	str.w	r8, [sp, #12]
 800a54a:	2330      	movs	r3, #48	; 0x30
 800a54c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a710 <_vfiprintf_r+0x24c>
 800a550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a554:	f04f 0901 	mov.w	r9, #1
 800a558:	4623      	mov	r3, r4
 800a55a:	469a      	mov	sl, r3
 800a55c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a560:	b10a      	cbz	r2, 800a566 <_vfiprintf_r+0xa2>
 800a562:	2a25      	cmp	r2, #37	; 0x25
 800a564:	d1f9      	bne.n	800a55a <_vfiprintf_r+0x96>
 800a566:	ebba 0b04 	subs.w	fp, sl, r4
 800a56a:	d00b      	beq.n	800a584 <_vfiprintf_r+0xc0>
 800a56c:	465b      	mov	r3, fp
 800a56e:	4622      	mov	r2, r4
 800a570:	4629      	mov	r1, r5
 800a572:	4630      	mov	r0, r6
 800a574:	f7ff ff93 	bl	800a49e <__sfputs_r>
 800a578:	3001      	adds	r0, #1
 800a57a:	f000 80aa 	beq.w	800a6d2 <_vfiprintf_r+0x20e>
 800a57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a580:	445a      	add	r2, fp
 800a582:	9209      	str	r2, [sp, #36]	; 0x24
 800a584:	f89a 3000 	ldrb.w	r3, [sl]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 80a2 	beq.w	800a6d2 <_vfiprintf_r+0x20e>
 800a58e:	2300      	movs	r3, #0
 800a590:	f04f 32ff 	mov.w	r2, #4294967295
 800a594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a598:	f10a 0a01 	add.w	sl, sl, #1
 800a59c:	9304      	str	r3, [sp, #16]
 800a59e:	9307      	str	r3, [sp, #28]
 800a5a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a5a6:	4654      	mov	r4, sl
 800a5a8:	2205      	movs	r2, #5
 800a5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ae:	4858      	ldr	r0, [pc, #352]	; (800a710 <_vfiprintf_r+0x24c>)
 800a5b0:	f7f5 fe1e 	bl	80001f0 <memchr>
 800a5b4:	9a04      	ldr	r2, [sp, #16]
 800a5b6:	b9d8      	cbnz	r0, 800a5f0 <_vfiprintf_r+0x12c>
 800a5b8:	06d1      	lsls	r1, r2, #27
 800a5ba:	bf44      	itt	mi
 800a5bc:	2320      	movmi	r3, #32
 800a5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5c2:	0713      	lsls	r3, r2, #28
 800a5c4:	bf44      	itt	mi
 800a5c6:	232b      	movmi	r3, #43	; 0x2b
 800a5c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5d2:	d015      	beq.n	800a600 <_vfiprintf_r+0x13c>
 800a5d4:	9a07      	ldr	r2, [sp, #28]
 800a5d6:	4654      	mov	r4, sl
 800a5d8:	2000      	movs	r0, #0
 800a5da:	f04f 0c0a 	mov.w	ip, #10
 800a5de:	4621      	mov	r1, r4
 800a5e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5e4:	3b30      	subs	r3, #48	; 0x30
 800a5e6:	2b09      	cmp	r3, #9
 800a5e8:	d94e      	bls.n	800a688 <_vfiprintf_r+0x1c4>
 800a5ea:	b1b0      	cbz	r0, 800a61a <_vfiprintf_r+0x156>
 800a5ec:	9207      	str	r2, [sp, #28]
 800a5ee:	e014      	b.n	800a61a <_vfiprintf_r+0x156>
 800a5f0:	eba0 0308 	sub.w	r3, r0, r8
 800a5f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	9304      	str	r3, [sp, #16]
 800a5fc:	46a2      	mov	sl, r4
 800a5fe:	e7d2      	b.n	800a5a6 <_vfiprintf_r+0xe2>
 800a600:	9b03      	ldr	r3, [sp, #12]
 800a602:	1d19      	adds	r1, r3, #4
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	9103      	str	r1, [sp, #12]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	bfbb      	ittet	lt
 800a60c:	425b      	neglt	r3, r3
 800a60e:	f042 0202 	orrlt.w	r2, r2, #2
 800a612:	9307      	strge	r3, [sp, #28]
 800a614:	9307      	strlt	r3, [sp, #28]
 800a616:	bfb8      	it	lt
 800a618:	9204      	strlt	r2, [sp, #16]
 800a61a:	7823      	ldrb	r3, [r4, #0]
 800a61c:	2b2e      	cmp	r3, #46	; 0x2e
 800a61e:	d10c      	bne.n	800a63a <_vfiprintf_r+0x176>
 800a620:	7863      	ldrb	r3, [r4, #1]
 800a622:	2b2a      	cmp	r3, #42	; 0x2a
 800a624:	d135      	bne.n	800a692 <_vfiprintf_r+0x1ce>
 800a626:	9b03      	ldr	r3, [sp, #12]
 800a628:	1d1a      	adds	r2, r3, #4
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	9203      	str	r2, [sp, #12]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	bfb8      	it	lt
 800a632:	f04f 33ff 	movlt.w	r3, #4294967295
 800a636:	3402      	adds	r4, #2
 800a638:	9305      	str	r3, [sp, #20]
 800a63a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a720 <_vfiprintf_r+0x25c>
 800a63e:	7821      	ldrb	r1, [r4, #0]
 800a640:	2203      	movs	r2, #3
 800a642:	4650      	mov	r0, sl
 800a644:	f7f5 fdd4 	bl	80001f0 <memchr>
 800a648:	b140      	cbz	r0, 800a65c <_vfiprintf_r+0x198>
 800a64a:	2340      	movs	r3, #64	; 0x40
 800a64c:	eba0 000a 	sub.w	r0, r0, sl
 800a650:	fa03 f000 	lsl.w	r0, r3, r0
 800a654:	9b04      	ldr	r3, [sp, #16]
 800a656:	4303      	orrs	r3, r0
 800a658:	3401      	adds	r4, #1
 800a65a:	9304      	str	r3, [sp, #16]
 800a65c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a660:	482c      	ldr	r0, [pc, #176]	; (800a714 <_vfiprintf_r+0x250>)
 800a662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a666:	2206      	movs	r2, #6
 800a668:	f7f5 fdc2 	bl	80001f0 <memchr>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	d03f      	beq.n	800a6f0 <_vfiprintf_r+0x22c>
 800a670:	4b29      	ldr	r3, [pc, #164]	; (800a718 <_vfiprintf_r+0x254>)
 800a672:	bb1b      	cbnz	r3, 800a6bc <_vfiprintf_r+0x1f8>
 800a674:	9b03      	ldr	r3, [sp, #12]
 800a676:	3307      	adds	r3, #7
 800a678:	f023 0307 	bic.w	r3, r3, #7
 800a67c:	3308      	adds	r3, #8
 800a67e:	9303      	str	r3, [sp, #12]
 800a680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a682:	443b      	add	r3, r7
 800a684:	9309      	str	r3, [sp, #36]	; 0x24
 800a686:	e767      	b.n	800a558 <_vfiprintf_r+0x94>
 800a688:	fb0c 3202 	mla	r2, ip, r2, r3
 800a68c:	460c      	mov	r4, r1
 800a68e:	2001      	movs	r0, #1
 800a690:	e7a5      	b.n	800a5de <_vfiprintf_r+0x11a>
 800a692:	2300      	movs	r3, #0
 800a694:	3401      	adds	r4, #1
 800a696:	9305      	str	r3, [sp, #20]
 800a698:	4619      	mov	r1, r3
 800a69a:	f04f 0c0a 	mov.w	ip, #10
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6a4:	3a30      	subs	r2, #48	; 0x30
 800a6a6:	2a09      	cmp	r2, #9
 800a6a8:	d903      	bls.n	800a6b2 <_vfiprintf_r+0x1ee>
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0c5      	beq.n	800a63a <_vfiprintf_r+0x176>
 800a6ae:	9105      	str	r1, [sp, #20]
 800a6b0:	e7c3      	b.n	800a63a <_vfiprintf_r+0x176>
 800a6b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e7f0      	b.n	800a69e <_vfiprintf_r+0x1da>
 800a6bc:	ab03      	add	r3, sp, #12
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	462a      	mov	r2, r5
 800a6c2:	4b16      	ldr	r3, [pc, #88]	; (800a71c <_vfiprintf_r+0x258>)
 800a6c4:	a904      	add	r1, sp, #16
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	f3af 8000 	nop.w
 800a6cc:	4607      	mov	r7, r0
 800a6ce:	1c78      	adds	r0, r7, #1
 800a6d0:	d1d6      	bne.n	800a680 <_vfiprintf_r+0x1bc>
 800a6d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6d4:	07d9      	lsls	r1, r3, #31
 800a6d6:	d405      	bmi.n	800a6e4 <_vfiprintf_r+0x220>
 800a6d8:	89ab      	ldrh	r3, [r5, #12]
 800a6da:	059a      	lsls	r2, r3, #22
 800a6dc:	d402      	bmi.n	800a6e4 <_vfiprintf_r+0x220>
 800a6de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6e0:	f7ff fd7f 	bl	800a1e2 <__retarget_lock_release_recursive>
 800a6e4:	89ab      	ldrh	r3, [r5, #12]
 800a6e6:	065b      	lsls	r3, r3, #25
 800a6e8:	f53f af12 	bmi.w	800a510 <_vfiprintf_r+0x4c>
 800a6ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6ee:	e711      	b.n	800a514 <_vfiprintf_r+0x50>
 800a6f0:	ab03      	add	r3, sp, #12
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	462a      	mov	r2, r5
 800a6f6:	4b09      	ldr	r3, [pc, #36]	; (800a71c <_vfiprintf_r+0x258>)
 800a6f8:	a904      	add	r1, sp, #16
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f000 f880 	bl	800a800 <_printf_i>
 800a700:	e7e4      	b.n	800a6cc <_vfiprintf_r+0x208>
 800a702:	bf00      	nop
 800a704:	0800aca8 	.word	0x0800aca8
 800a708:	0800acc8 	.word	0x0800acc8
 800a70c:	0800ac88 	.word	0x0800ac88
 800a710:	0800ace8 	.word	0x0800ace8
 800a714:	0800acf2 	.word	0x0800acf2
 800a718:	00000000 	.word	0x00000000
 800a71c:	0800a49f 	.word	0x0800a49f
 800a720:	0800acee 	.word	0x0800acee

0800a724 <_printf_common>:
 800a724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a728:	4616      	mov	r6, r2
 800a72a:	4699      	mov	r9, r3
 800a72c:	688a      	ldr	r2, [r1, #8]
 800a72e:	690b      	ldr	r3, [r1, #16]
 800a730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a734:	4293      	cmp	r3, r2
 800a736:	bfb8      	it	lt
 800a738:	4613      	movlt	r3, r2
 800a73a:	6033      	str	r3, [r6, #0]
 800a73c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a740:	4607      	mov	r7, r0
 800a742:	460c      	mov	r4, r1
 800a744:	b10a      	cbz	r2, 800a74a <_printf_common+0x26>
 800a746:	3301      	adds	r3, #1
 800a748:	6033      	str	r3, [r6, #0]
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	0699      	lsls	r1, r3, #26
 800a74e:	bf42      	ittt	mi
 800a750:	6833      	ldrmi	r3, [r6, #0]
 800a752:	3302      	addmi	r3, #2
 800a754:	6033      	strmi	r3, [r6, #0]
 800a756:	6825      	ldr	r5, [r4, #0]
 800a758:	f015 0506 	ands.w	r5, r5, #6
 800a75c:	d106      	bne.n	800a76c <_printf_common+0x48>
 800a75e:	f104 0a19 	add.w	sl, r4, #25
 800a762:	68e3      	ldr	r3, [r4, #12]
 800a764:	6832      	ldr	r2, [r6, #0]
 800a766:	1a9b      	subs	r3, r3, r2
 800a768:	42ab      	cmp	r3, r5
 800a76a:	dc26      	bgt.n	800a7ba <_printf_common+0x96>
 800a76c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a770:	1e13      	subs	r3, r2, #0
 800a772:	6822      	ldr	r2, [r4, #0]
 800a774:	bf18      	it	ne
 800a776:	2301      	movne	r3, #1
 800a778:	0692      	lsls	r2, r2, #26
 800a77a:	d42b      	bmi.n	800a7d4 <_printf_common+0xb0>
 800a77c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a780:	4649      	mov	r1, r9
 800a782:	4638      	mov	r0, r7
 800a784:	47c0      	blx	r8
 800a786:	3001      	adds	r0, #1
 800a788:	d01e      	beq.n	800a7c8 <_printf_common+0xa4>
 800a78a:	6823      	ldr	r3, [r4, #0]
 800a78c:	68e5      	ldr	r5, [r4, #12]
 800a78e:	6832      	ldr	r2, [r6, #0]
 800a790:	f003 0306 	and.w	r3, r3, #6
 800a794:	2b04      	cmp	r3, #4
 800a796:	bf08      	it	eq
 800a798:	1aad      	subeq	r5, r5, r2
 800a79a:	68a3      	ldr	r3, [r4, #8]
 800a79c:	6922      	ldr	r2, [r4, #16]
 800a79e:	bf0c      	ite	eq
 800a7a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7a4:	2500      	movne	r5, #0
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	bfc4      	itt	gt
 800a7aa:	1a9b      	subgt	r3, r3, r2
 800a7ac:	18ed      	addgt	r5, r5, r3
 800a7ae:	2600      	movs	r6, #0
 800a7b0:	341a      	adds	r4, #26
 800a7b2:	42b5      	cmp	r5, r6
 800a7b4:	d11a      	bne.n	800a7ec <_printf_common+0xc8>
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	e008      	b.n	800a7cc <_printf_common+0xa8>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	4652      	mov	r2, sl
 800a7be:	4649      	mov	r1, r9
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	47c0      	blx	r8
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	d103      	bne.n	800a7d0 <_printf_common+0xac>
 800a7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7d0:	3501      	adds	r5, #1
 800a7d2:	e7c6      	b.n	800a762 <_printf_common+0x3e>
 800a7d4:	18e1      	adds	r1, r4, r3
 800a7d6:	1c5a      	adds	r2, r3, #1
 800a7d8:	2030      	movs	r0, #48	; 0x30
 800a7da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7de:	4422      	add	r2, r4
 800a7e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7e8:	3302      	adds	r3, #2
 800a7ea:	e7c7      	b.n	800a77c <_printf_common+0x58>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	4622      	mov	r2, r4
 800a7f0:	4649      	mov	r1, r9
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	47c0      	blx	r8
 800a7f6:	3001      	adds	r0, #1
 800a7f8:	d0e6      	beq.n	800a7c8 <_printf_common+0xa4>
 800a7fa:	3601      	adds	r6, #1
 800a7fc:	e7d9      	b.n	800a7b2 <_printf_common+0x8e>
	...

0800a800 <_printf_i>:
 800a800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a804:	7e0f      	ldrb	r7, [r1, #24]
 800a806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a808:	2f78      	cmp	r7, #120	; 0x78
 800a80a:	4691      	mov	r9, r2
 800a80c:	4680      	mov	r8, r0
 800a80e:	460c      	mov	r4, r1
 800a810:	469a      	mov	sl, r3
 800a812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a816:	d807      	bhi.n	800a828 <_printf_i+0x28>
 800a818:	2f62      	cmp	r7, #98	; 0x62
 800a81a:	d80a      	bhi.n	800a832 <_printf_i+0x32>
 800a81c:	2f00      	cmp	r7, #0
 800a81e:	f000 80d8 	beq.w	800a9d2 <_printf_i+0x1d2>
 800a822:	2f58      	cmp	r7, #88	; 0x58
 800a824:	f000 80a3 	beq.w	800a96e <_printf_i+0x16e>
 800a828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a82c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a830:	e03a      	b.n	800a8a8 <_printf_i+0xa8>
 800a832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a836:	2b15      	cmp	r3, #21
 800a838:	d8f6      	bhi.n	800a828 <_printf_i+0x28>
 800a83a:	a101      	add	r1, pc, #4	; (adr r1, 800a840 <_printf_i+0x40>)
 800a83c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a840:	0800a899 	.word	0x0800a899
 800a844:	0800a8ad 	.word	0x0800a8ad
 800a848:	0800a829 	.word	0x0800a829
 800a84c:	0800a829 	.word	0x0800a829
 800a850:	0800a829 	.word	0x0800a829
 800a854:	0800a829 	.word	0x0800a829
 800a858:	0800a8ad 	.word	0x0800a8ad
 800a85c:	0800a829 	.word	0x0800a829
 800a860:	0800a829 	.word	0x0800a829
 800a864:	0800a829 	.word	0x0800a829
 800a868:	0800a829 	.word	0x0800a829
 800a86c:	0800a9b9 	.word	0x0800a9b9
 800a870:	0800a8dd 	.word	0x0800a8dd
 800a874:	0800a99b 	.word	0x0800a99b
 800a878:	0800a829 	.word	0x0800a829
 800a87c:	0800a829 	.word	0x0800a829
 800a880:	0800a9db 	.word	0x0800a9db
 800a884:	0800a829 	.word	0x0800a829
 800a888:	0800a8dd 	.word	0x0800a8dd
 800a88c:	0800a829 	.word	0x0800a829
 800a890:	0800a829 	.word	0x0800a829
 800a894:	0800a9a3 	.word	0x0800a9a3
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	1d1a      	adds	r2, r3, #4
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	602a      	str	r2, [r5, #0]
 800a8a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e0a3      	b.n	800a9f4 <_printf_i+0x1f4>
 800a8ac:	6820      	ldr	r0, [r4, #0]
 800a8ae:	6829      	ldr	r1, [r5, #0]
 800a8b0:	0606      	lsls	r6, r0, #24
 800a8b2:	f101 0304 	add.w	r3, r1, #4
 800a8b6:	d50a      	bpl.n	800a8ce <_printf_i+0xce>
 800a8b8:	680e      	ldr	r6, [r1, #0]
 800a8ba:	602b      	str	r3, [r5, #0]
 800a8bc:	2e00      	cmp	r6, #0
 800a8be:	da03      	bge.n	800a8c8 <_printf_i+0xc8>
 800a8c0:	232d      	movs	r3, #45	; 0x2d
 800a8c2:	4276      	negs	r6, r6
 800a8c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8c8:	485e      	ldr	r0, [pc, #376]	; (800aa44 <_printf_i+0x244>)
 800a8ca:	230a      	movs	r3, #10
 800a8cc:	e019      	b.n	800a902 <_printf_i+0x102>
 800a8ce:	680e      	ldr	r6, [r1, #0]
 800a8d0:	602b      	str	r3, [r5, #0]
 800a8d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a8d6:	bf18      	it	ne
 800a8d8:	b236      	sxthne	r6, r6
 800a8da:	e7ef      	b.n	800a8bc <_printf_i+0xbc>
 800a8dc:	682b      	ldr	r3, [r5, #0]
 800a8de:	6820      	ldr	r0, [r4, #0]
 800a8e0:	1d19      	adds	r1, r3, #4
 800a8e2:	6029      	str	r1, [r5, #0]
 800a8e4:	0601      	lsls	r1, r0, #24
 800a8e6:	d501      	bpl.n	800a8ec <_printf_i+0xec>
 800a8e8:	681e      	ldr	r6, [r3, #0]
 800a8ea:	e002      	b.n	800a8f2 <_printf_i+0xf2>
 800a8ec:	0646      	lsls	r6, r0, #25
 800a8ee:	d5fb      	bpl.n	800a8e8 <_printf_i+0xe8>
 800a8f0:	881e      	ldrh	r6, [r3, #0]
 800a8f2:	4854      	ldr	r0, [pc, #336]	; (800aa44 <_printf_i+0x244>)
 800a8f4:	2f6f      	cmp	r7, #111	; 0x6f
 800a8f6:	bf0c      	ite	eq
 800a8f8:	2308      	moveq	r3, #8
 800a8fa:	230a      	movne	r3, #10
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a902:	6865      	ldr	r5, [r4, #4]
 800a904:	60a5      	str	r5, [r4, #8]
 800a906:	2d00      	cmp	r5, #0
 800a908:	bfa2      	ittt	ge
 800a90a:	6821      	ldrge	r1, [r4, #0]
 800a90c:	f021 0104 	bicge.w	r1, r1, #4
 800a910:	6021      	strge	r1, [r4, #0]
 800a912:	b90e      	cbnz	r6, 800a918 <_printf_i+0x118>
 800a914:	2d00      	cmp	r5, #0
 800a916:	d04d      	beq.n	800a9b4 <_printf_i+0x1b4>
 800a918:	4615      	mov	r5, r2
 800a91a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a91e:	fb03 6711 	mls	r7, r3, r1, r6
 800a922:	5dc7      	ldrb	r7, [r0, r7]
 800a924:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a928:	4637      	mov	r7, r6
 800a92a:	42bb      	cmp	r3, r7
 800a92c:	460e      	mov	r6, r1
 800a92e:	d9f4      	bls.n	800a91a <_printf_i+0x11a>
 800a930:	2b08      	cmp	r3, #8
 800a932:	d10b      	bne.n	800a94c <_printf_i+0x14c>
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	07de      	lsls	r6, r3, #31
 800a938:	d508      	bpl.n	800a94c <_printf_i+0x14c>
 800a93a:	6923      	ldr	r3, [r4, #16]
 800a93c:	6861      	ldr	r1, [r4, #4]
 800a93e:	4299      	cmp	r1, r3
 800a940:	bfde      	ittt	le
 800a942:	2330      	movle	r3, #48	; 0x30
 800a944:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a948:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a94c:	1b52      	subs	r2, r2, r5
 800a94e:	6122      	str	r2, [r4, #16]
 800a950:	f8cd a000 	str.w	sl, [sp]
 800a954:	464b      	mov	r3, r9
 800a956:	aa03      	add	r2, sp, #12
 800a958:	4621      	mov	r1, r4
 800a95a:	4640      	mov	r0, r8
 800a95c:	f7ff fee2 	bl	800a724 <_printf_common>
 800a960:	3001      	adds	r0, #1
 800a962:	d14c      	bne.n	800a9fe <_printf_i+0x1fe>
 800a964:	f04f 30ff 	mov.w	r0, #4294967295
 800a968:	b004      	add	sp, #16
 800a96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a96e:	4835      	ldr	r0, [pc, #212]	; (800aa44 <_printf_i+0x244>)
 800a970:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a974:	6829      	ldr	r1, [r5, #0]
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	f851 6b04 	ldr.w	r6, [r1], #4
 800a97c:	6029      	str	r1, [r5, #0]
 800a97e:	061d      	lsls	r5, r3, #24
 800a980:	d514      	bpl.n	800a9ac <_printf_i+0x1ac>
 800a982:	07df      	lsls	r7, r3, #31
 800a984:	bf44      	itt	mi
 800a986:	f043 0320 	orrmi.w	r3, r3, #32
 800a98a:	6023      	strmi	r3, [r4, #0]
 800a98c:	b91e      	cbnz	r6, 800a996 <_printf_i+0x196>
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	f023 0320 	bic.w	r3, r3, #32
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	2310      	movs	r3, #16
 800a998:	e7b0      	b.n	800a8fc <_printf_i+0xfc>
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	f043 0320 	orr.w	r3, r3, #32
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	2378      	movs	r3, #120	; 0x78
 800a9a4:	4828      	ldr	r0, [pc, #160]	; (800aa48 <_printf_i+0x248>)
 800a9a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9aa:	e7e3      	b.n	800a974 <_printf_i+0x174>
 800a9ac:	0659      	lsls	r1, r3, #25
 800a9ae:	bf48      	it	mi
 800a9b0:	b2b6      	uxthmi	r6, r6
 800a9b2:	e7e6      	b.n	800a982 <_printf_i+0x182>
 800a9b4:	4615      	mov	r5, r2
 800a9b6:	e7bb      	b.n	800a930 <_printf_i+0x130>
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	6826      	ldr	r6, [r4, #0]
 800a9bc:	6961      	ldr	r1, [r4, #20]
 800a9be:	1d18      	adds	r0, r3, #4
 800a9c0:	6028      	str	r0, [r5, #0]
 800a9c2:	0635      	lsls	r5, r6, #24
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	d501      	bpl.n	800a9cc <_printf_i+0x1cc>
 800a9c8:	6019      	str	r1, [r3, #0]
 800a9ca:	e002      	b.n	800a9d2 <_printf_i+0x1d2>
 800a9cc:	0670      	lsls	r0, r6, #25
 800a9ce:	d5fb      	bpl.n	800a9c8 <_printf_i+0x1c8>
 800a9d0:	8019      	strh	r1, [r3, #0]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	6123      	str	r3, [r4, #16]
 800a9d6:	4615      	mov	r5, r2
 800a9d8:	e7ba      	b.n	800a950 <_printf_i+0x150>
 800a9da:	682b      	ldr	r3, [r5, #0]
 800a9dc:	1d1a      	adds	r2, r3, #4
 800a9de:	602a      	str	r2, [r5, #0]
 800a9e0:	681d      	ldr	r5, [r3, #0]
 800a9e2:	6862      	ldr	r2, [r4, #4]
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	f7f5 fc02 	bl	80001f0 <memchr>
 800a9ec:	b108      	cbz	r0, 800a9f2 <_printf_i+0x1f2>
 800a9ee:	1b40      	subs	r0, r0, r5
 800a9f0:	6060      	str	r0, [r4, #4]
 800a9f2:	6863      	ldr	r3, [r4, #4]
 800a9f4:	6123      	str	r3, [r4, #16]
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9fc:	e7a8      	b.n	800a950 <_printf_i+0x150>
 800a9fe:	6923      	ldr	r3, [r4, #16]
 800aa00:	462a      	mov	r2, r5
 800aa02:	4649      	mov	r1, r9
 800aa04:	4640      	mov	r0, r8
 800aa06:	47d0      	blx	sl
 800aa08:	3001      	adds	r0, #1
 800aa0a:	d0ab      	beq.n	800a964 <_printf_i+0x164>
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	079b      	lsls	r3, r3, #30
 800aa10:	d413      	bmi.n	800aa3a <_printf_i+0x23a>
 800aa12:	68e0      	ldr	r0, [r4, #12]
 800aa14:	9b03      	ldr	r3, [sp, #12]
 800aa16:	4298      	cmp	r0, r3
 800aa18:	bfb8      	it	lt
 800aa1a:	4618      	movlt	r0, r3
 800aa1c:	e7a4      	b.n	800a968 <_printf_i+0x168>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	4632      	mov	r2, r6
 800aa22:	4649      	mov	r1, r9
 800aa24:	4640      	mov	r0, r8
 800aa26:	47d0      	blx	sl
 800aa28:	3001      	adds	r0, #1
 800aa2a:	d09b      	beq.n	800a964 <_printf_i+0x164>
 800aa2c:	3501      	adds	r5, #1
 800aa2e:	68e3      	ldr	r3, [r4, #12]
 800aa30:	9903      	ldr	r1, [sp, #12]
 800aa32:	1a5b      	subs	r3, r3, r1
 800aa34:	42ab      	cmp	r3, r5
 800aa36:	dcf2      	bgt.n	800aa1e <_printf_i+0x21e>
 800aa38:	e7eb      	b.n	800aa12 <_printf_i+0x212>
 800aa3a:	2500      	movs	r5, #0
 800aa3c:	f104 0619 	add.w	r6, r4, #25
 800aa40:	e7f5      	b.n	800aa2e <_printf_i+0x22e>
 800aa42:	bf00      	nop
 800aa44:	0800acf9 	.word	0x0800acf9
 800aa48:	0800ad0a 	.word	0x0800ad0a

0800aa4c <_sbrk_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4d06      	ldr	r5, [pc, #24]	; (800aa68 <_sbrk_r+0x1c>)
 800aa50:	2300      	movs	r3, #0
 800aa52:	4604      	mov	r4, r0
 800aa54:	4608      	mov	r0, r1
 800aa56:	602b      	str	r3, [r5, #0]
 800aa58:	f7f7 fbf6 	bl	8002248 <_sbrk>
 800aa5c:	1c43      	adds	r3, r0, #1
 800aa5e:	d102      	bne.n	800aa66 <_sbrk_r+0x1a>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	b103      	cbz	r3, 800aa66 <_sbrk_r+0x1a>
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	bd38      	pop	{r3, r4, r5, pc}
 800aa68:	20002304 	.word	0x20002304

0800aa6c <__sread>:
 800aa6c:	b510      	push	{r4, lr}
 800aa6e:	460c      	mov	r4, r1
 800aa70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa74:	f000 f8a0 	bl	800abb8 <_read_r>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	bfab      	itete	ge
 800aa7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa7e:	89a3      	ldrhlt	r3, [r4, #12]
 800aa80:	181b      	addge	r3, r3, r0
 800aa82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa86:	bfac      	ite	ge
 800aa88:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa8a:	81a3      	strhlt	r3, [r4, #12]
 800aa8c:	bd10      	pop	{r4, pc}

0800aa8e <__swrite>:
 800aa8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa92:	461f      	mov	r7, r3
 800aa94:	898b      	ldrh	r3, [r1, #12]
 800aa96:	05db      	lsls	r3, r3, #23
 800aa98:	4605      	mov	r5, r0
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	4616      	mov	r6, r2
 800aa9e:	d505      	bpl.n	800aaac <__swrite+0x1e>
 800aaa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f000 f868 	bl	800ab7c <_lseek_r>
 800aaac:	89a3      	ldrh	r3, [r4, #12]
 800aaae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aab6:	81a3      	strh	r3, [r4, #12]
 800aab8:	4632      	mov	r2, r6
 800aaba:	463b      	mov	r3, r7
 800aabc:	4628      	mov	r0, r5
 800aabe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aac2:	f000 b817 	b.w	800aaf4 <_write_r>

0800aac6 <__sseek>:
 800aac6:	b510      	push	{r4, lr}
 800aac8:	460c      	mov	r4, r1
 800aaca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aace:	f000 f855 	bl	800ab7c <_lseek_r>
 800aad2:	1c43      	adds	r3, r0, #1
 800aad4:	89a3      	ldrh	r3, [r4, #12]
 800aad6:	bf15      	itete	ne
 800aad8:	6560      	strne	r0, [r4, #84]	; 0x54
 800aada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aae2:	81a3      	strheq	r3, [r4, #12]
 800aae4:	bf18      	it	ne
 800aae6:	81a3      	strhne	r3, [r4, #12]
 800aae8:	bd10      	pop	{r4, pc}

0800aaea <__sclose>:
 800aaea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaee:	f000 b813 	b.w	800ab18 <_close_r>
	...

0800aaf4 <_write_r>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	4d07      	ldr	r5, [pc, #28]	; (800ab14 <_write_r+0x20>)
 800aaf8:	4604      	mov	r4, r0
 800aafa:	4608      	mov	r0, r1
 800aafc:	4611      	mov	r1, r2
 800aafe:	2200      	movs	r2, #0
 800ab00:	602a      	str	r2, [r5, #0]
 800ab02:	461a      	mov	r2, r3
 800ab04:	f7f7 fb4f 	bl	80021a6 <_write>
 800ab08:	1c43      	adds	r3, r0, #1
 800ab0a:	d102      	bne.n	800ab12 <_write_r+0x1e>
 800ab0c:	682b      	ldr	r3, [r5, #0]
 800ab0e:	b103      	cbz	r3, 800ab12 <_write_r+0x1e>
 800ab10:	6023      	str	r3, [r4, #0]
 800ab12:	bd38      	pop	{r3, r4, r5, pc}
 800ab14:	20002304 	.word	0x20002304

0800ab18 <_close_r>:
 800ab18:	b538      	push	{r3, r4, r5, lr}
 800ab1a:	4d06      	ldr	r5, [pc, #24]	; (800ab34 <_close_r+0x1c>)
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	4604      	mov	r4, r0
 800ab20:	4608      	mov	r0, r1
 800ab22:	602b      	str	r3, [r5, #0]
 800ab24:	f7f7 fb5b 	bl	80021de <_close>
 800ab28:	1c43      	adds	r3, r0, #1
 800ab2a:	d102      	bne.n	800ab32 <_close_r+0x1a>
 800ab2c:	682b      	ldr	r3, [r5, #0]
 800ab2e:	b103      	cbz	r3, 800ab32 <_close_r+0x1a>
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	bd38      	pop	{r3, r4, r5, pc}
 800ab34:	20002304 	.word	0x20002304

0800ab38 <_fstat_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	4d07      	ldr	r5, [pc, #28]	; (800ab58 <_fstat_r+0x20>)
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	4604      	mov	r4, r0
 800ab40:	4608      	mov	r0, r1
 800ab42:	4611      	mov	r1, r2
 800ab44:	602b      	str	r3, [r5, #0]
 800ab46:	f7f7 fb56 	bl	80021f6 <_fstat>
 800ab4a:	1c43      	adds	r3, r0, #1
 800ab4c:	d102      	bne.n	800ab54 <_fstat_r+0x1c>
 800ab4e:	682b      	ldr	r3, [r5, #0]
 800ab50:	b103      	cbz	r3, 800ab54 <_fstat_r+0x1c>
 800ab52:	6023      	str	r3, [r4, #0]
 800ab54:	bd38      	pop	{r3, r4, r5, pc}
 800ab56:	bf00      	nop
 800ab58:	20002304 	.word	0x20002304

0800ab5c <_isatty_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	4d06      	ldr	r5, [pc, #24]	; (800ab78 <_isatty_r+0x1c>)
 800ab60:	2300      	movs	r3, #0
 800ab62:	4604      	mov	r4, r0
 800ab64:	4608      	mov	r0, r1
 800ab66:	602b      	str	r3, [r5, #0]
 800ab68:	f7f7 fb55 	bl	8002216 <_isatty>
 800ab6c:	1c43      	adds	r3, r0, #1
 800ab6e:	d102      	bne.n	800ab76 <_isatty_r+0x1a>
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	b103      	cbz	r3, 800ab76 <_isatty_r+0x1a>
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	bd38      	pop	{r3, r4, r5, pc}
 800ab78:	20002304 	.word	0x20002304

0800ab7c <_lseek_r>:
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	4d07      	ldr	r5, [pc, #28]	; (800ab9c <_lseek_r+0x20>)
 800ab80:	4604      	mov	r4, r0
 800ab82:	4608      	mov	r0, r1
 800ab84:	4611      	mov	r1, r2
 800ab86:	2200      	movs	r2, #0
 800ab88:	602a      	str	r2, [r5, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	f7f7 fb4e 	bl	800222c <_lseek>
 800ab90:	1c43      	adds	r3, r0, #1
 800ab92:	d102      	bne.n	800ab9a <_lseek_r+0x1e>
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	b103      	cbz	r3, 800ab9a <_lseek_r+0x1e>
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	bd38      	pop	{r3, r4, r5, pc}
 800ab9c:	20002304 	.word	0x20002304

0800aba0 <__malloc_lock>:
 800aba0:	4801      	ldr	r0, [pc, #4]	; (800aba8 <__malloc_lock+0x8>)
 800aba2:	f7ff bb1d 	b.w	800a1e0 <__retarget_lock_acquire_recursive>
 800aba6:	bf00      	nop
 800aba8:	200022f8 	.word	0x200022f8

0800abac <__malloc_unlock>:
 800abac:	4801      	ldr	r0, [pc, #4]	; (800abb4 <__malloc_unlock+0x8>)
 800abae:	f7ff bb18 	b.w	800a1e2 <__retarget_lock_release_recursive>
 800abb2:	bf00      	nop
 800abb4:	200022f8 	.word	0x200022f8

0800abb8 <_read_r>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	4d07      	ldr	r5, [pc, #28]	; (800abd8 <_read_r+0x20>)
 800abbc:	4604      	mov	r4, r0
 800abbe:	4608      	mov	r0, r1
 800abc0:	4611      	mov	r1, r2
 800abc2:	2200      	movs	r2, #0
 800abc4:	602a      	str	r2, [r5, #0]
 800abc6:	461a      	mov	r2, r3
 800abc8:	f7f7 fad0 	bl	800216c <_read>
 800abcc:	1c43      	adds	r3, r0, #1
 800abce:	d102      	bne.n	800abd6 <_read_r+0x1e>
 800abd0:	682b      	ldr	r3, [r5, #0]
 800abd2:	b103      	cbz	r3, 800abd6 <_read_r+0x1e>
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	bd38      	pop	{r3, r4, r5, pc}
 800abd8:	20002304 	.word	0x20002304

0800abdc <_init>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	bf00      	nop
 800abe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe2:	bc08      	pop	{r3}
 800abe4:	469e      	mov	lr, r3
 800abe6:	4770      	bx	lr

0800abe8 <_fini>:
 800abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abea:	bf00      	nop
 800abec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abee:	bc08      	pop	{r3}
 800abf0:	469e      	mov	lr, r3
 800abf2:	4770      	bx	lr
